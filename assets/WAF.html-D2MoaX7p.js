import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,f as a,o as e}from"./app-CaxYOVkH.js";const t={};function p(l,s){return e(),n("div",null,[...s[0]||(s[0]=[a(`<h1 id="waf" tabindex="-1"><a class="header-anchor" href="#waf"><span>WAF</span></a></h1><p><strong>safeline</strong></p><p><a href="https://github.com/chaitin/safeline" target="_blank" rel="noopener noreferrer">https://github.com/chaitin/safeline</a></p><p>今天给大家推荐一个广受好评的免费开源WAF：<strong>safeline</strong></p><p>safeline是一款足够简单、足够好用、足够强的免费 WAF。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。</p><p>核心检测能力由智能语义分析算法驱动，专为社区而生，不让黑客越雷池半步。</p><h2 id="安装指南" tabindex="-1"><a class="header-anchor" href="#安装指南"><span>安装指南</span></a></h2><p><strong>配置需求</strong></p><ul><li>操作系统：Linux</li><li>指令架构：x86_64</li><li>软件依赖：Docker 20.10.6 版本以上</li><li>软件依赖：Docker Compose 2.0.0 版本以上</li><li>最小化环境：1 核 CPU / 1 GB 内存 / 10 GB 磁盘</li></ul><p><strong>一键安装</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bash</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fsSLk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://waf-ce.chaitin.cn/release/latest/setup.sh)&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用"><span>快速使用</span></a></h2><p><strong>登录</strong></p><p>浏览器打开后台管理页面 https://:9443。根据界面提示，使用 支持 TOTP 的认证软件 扫描二维码，然后输入动态口令登录：</p><p>添加防护主机，测试攻击，正常执行。除了docker版本坑了以下，一切都很丝滑，很好的体验。产品质量点赞。</p><p><strong>使用</strong></p><p>开关服务：docker-compose stop</p><p>安装目录：/data/safeline</p><p><strong>评价：</strong></p><p>看一下这个产品， 我试用了一下，体验很好，很丝滑。</p><p>但是想做好一款产品，使用很简单方便，做起来挺难的。</p><p><strong>报错：升级 Docker Compose 2.0.0 版</strong></p><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-markdown"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">** docker: &#39;compose&#39; is not a docker command. ** </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"># Docker Compose 2.0.0 版本以上 版本太低，升级系统默认安装的版本：1.25 升级到 2.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"># If installed via apt-get:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sudo apt-get remove docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"># curl + grep 获取最新版本</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">VERSION=$(curl --silent https://api.github.com/repos/docker/compose/releases/latest | grep -Po &#39;&quot;tag_name&quot;: &quot;\\K.*\\d&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"># Finally, download to your favorite $PATH-accessible location and set permissions:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">DESTINATION=/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sudo curl -L https://github.com/docker/compose/releases/download/\${VERSION}/docker-compose-$(uname -s)-$(uname -m) -o $DESTINATION</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sudo chmod 755 $DESTINATION</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="curiefense" tabindex="-1"><a class="header-anchor" href="#curiefense"><span>Curiefense</span></a></h1><p>Curiefense 是一个 <strong>API 优先、面向 DevOps 的 Web 防御 HTTP-Filter</strong> <strong>适配器，用于</strong> <a href="https://www.envoyproxy.io/" target="_blank" rel="noopener noreferrer"><strong>特使</strong></a><strong>和</strong><a href="https://nginx.org/en/" target="_blank" rel="noopener noreferrer"><strong>嘎</strong></a>.它提供多种安全技术（WAF、应用层 DDoS 防护、爬虫程序管理等）以及实时流量监控和透明度。</p><p>Curiefense 是完全可编程.所有配置数据（安全规则集、策略等）都可以单独维护，也可以作为不同环境的不同分支进行维护。所有更改都经过版本控制，并且可以随时进行还原。</p><h2 id="安装部署" tabindex="-1"><a class="header-anchor" href="#安装部署"><span>安装部署</span></a></h2><p><strong>先决条件</strong>：Ubuntu 21.04</p><p>第一步：安装 Docker</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libpq-dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python3-dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python3-psycopg2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> vim</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> usermod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -aG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">whoami</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) &amp;&amp; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">whoami</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步：从 GitHub 获取最新代码以开始使用：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://github.com/curiefense/curiefense.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> curiefense/deploy/compose/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现象总结：暂时觉得放弃。</strong></p><p>优势：</p><p>集成了所有的组件，功能强大，本来是好意，但是，另一个角度就是依赖太多，维护成本高。</p><p>劣势：</p><p>界面操作功能太强，不直观和易用性差，学习成本太高。</p><p>默认安装后，有一个容器报错：<code>trafficmetricsexporter | ERROR:traffic-metrics-exporter:No operations to execute</code></p><p>默认演示案例，兼容性不足，而且依赖14个容器，这个项目太复杂了，学习成本，部署和维护难度很大。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>:~/Desktop/curiefense/deploy/compose$ docker-compose ps</span></span>
<span class="line"><span>         Name                       Command               State                                                      Ports                                                    </span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>confserver               /usr/bin/dumb-init -- /ent ...   Up      0.0.0.0:30000-&gt;80/tcp,:::30000-&gt;80/tcp                                                                      </span></span>
<span class="line"><span>curieproxyenvoy          /start_curiefense.sh             Up      10000/tcp, 0.0.0.0:30444-&gt;443/tcp,:::30444-&gt;443/tcp, 0.0.0.0:30445-&gt;444/tcp,:::30445-&gt;444/tcp,              </span></span>
<span class="line"><span>                                                                  0.0.0.0:30081-&gt;80/tcp,:::30081-&gt;80/tcp, 0.0.0.0:8001-&gt;8001/tcp,:::8001-&gt;8001/tcp,                           </span></span>
<span class="line"><span>                                                                  0.0.0.0:30082-&gt;81/tcp,:::30082-&gt;81/tcp                                                                      </span></span>
<span class="line"><span>curieproxyngx            /bin/sh -c service cron st ...   Up      0.0.0.0:31081-&gt;31081/tcp,:::31081-&gt;31081/tcp, 0.0.0.0:31082-&gt;31082/tcp,:::31082-&gt;31082/tcp,                 </span></span>
<span class="line"><span>                                                                  0.0.0.0:31444-&gt;31083/tcp,:::31444-&gt;31083/tcp, 0.0.0.0:31445-&gt;31084/tcp,:::31445-&gt;31084/tcp,                 </span></span>
<span class="line"><span>                                                                  0.0.0.0:8999-&gt;8999/tcp,:::8999-&gt;8999/tcp                                                                    </span></span>
<span class="line"><span>curiesync                /usr/bin/dumb-init /bin/ba ...   Up                                                                                                                  </span></span>
<span class="line"><span>echo                     /bin/echo-server                 Up      0.0.0.0:8080-&gt;8080/tcp,:::8080-&gt;8080/tcp                                                                    </span></span>
<span class="line"><span>elasticsearch            /bin/tini -- /usr/local/bi ...   Up      0.0.0.0:9200-&gt;9200/tcp,:::9200-&gt;9200/tcp, 9300/tcp                                                          </span></span>
<span class="line"><span>grafana                  /run.sh                          Up      0.0.0.0:30300-&gt;3000/tcp,:::30300-&gt;3000/tcp                                                                  </span></span>
<span class="line"><span>juiceshop                /nodejs/bin/node /juice-sh ...   Up      0.0.0.0:3000-&gt;3000/tcp,:::3000-&gt;3000/tcp                                                                    </span></span>
<span class="line"><span>kibana                   /bin/tini -- /usr/local/bi ...   Up      0.0.0.0:5601-&gt;5601/tcp,:::5601-&gt;5601/tcp                                                                    </span></span>
<span class="line"><span>mongodb                  /opt/bitnami/scripts/mongo ...   Up      0.0.0.0:27017-&gt;27017/tcp,:::27017-&gt;27017/tcp                                                                </span></span>
<span class="line"><span>prometheus               /bin/prometheus --config.f ...   Up      0.0.0.0:9090-&gt;9090/tcp,:::9090-&gt;9090/tcp                                                                    </span></span>
<span class="line"><span>redis                    docker-entrypoint.sh /bin/ ...   Up      0.0.0.0:6379-&gt;6379/tcp,:::6379-&gt;6379/tcp                                                                    </span></span>
<span class="line"><span>trafficmetricsexporter   python3 ./traffic_metrics_ ...   Up      8911/tcp                                                                                                    </span></span>
<span class="line"><span>uiserver                 /usr/bin/start.sh                Up      0.0.0.0:30443-&gt;443/tcp,:::30443-&gt;443/tcp, 0.0.0.0:30080-&gt;80/tcp,:::30080-&gt;80/tcp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40)])])}const h=i(t,[["render",p]]),d=JSON.parse('{"path":"/tld/sec/WAF.html","title":"WAF","lang":"zh-CN","frontmatter":{"description":"WAF safeline https://github.com/chaitin/safeline 今天给大家推荐一个广受好评的免费开源WAF：safeline safeline是一款足够简单、足够好用、足够强的免费 WAF。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。 核心检测能力由智能语义分析算法驱动，专为社区而生，不...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WAF\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-10T14:21:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SecCMD\\",\\"url\\":\\"https://www.seccmd.net\\"}]}"],["meta",{"property":"og:url","content":"https://www.seccmd.net/tld/sec/WAF.html"}],["meta",{"property":"og:site_name","content":"明剑实验室"}],["meta",{"property":"og:title","content":"WAF"}],["meta",{"property":"og:description","content":"WAF safeline https://github.com/chaitin/safeline 今天给大家推荐一个广受好评的免费开源WAF：safeline safeline是一款足够简单、足够好用、足够强的免费 WAF。基于业界领先的语义引擎检测技术，作为反向代理接入，保护你的网站不受黑客攻击。 核心检测能力由智能语义分析算法驱动，专为社区而生，不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-10T14:21:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-10T14:21:13.000Z"}]]},"git":{"createdTime":1757419694000,"updatedTime":1757514073000,"contributors":[{"name":"fireadm","username":"fireadm","email":"iwanwu@hotmail.com","commits":2,"url":"https://github.com/fireadm"}]},"readingTime":{"minutes":3.19,"words":957},"filePathRelative":"tld/sec/WAF.md","autoDesc":true}');export{h as comp,d as data};
