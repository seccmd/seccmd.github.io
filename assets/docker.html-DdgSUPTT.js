import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as n,o as e}from"./app-CaxYOVkH.js";const l={};function t(h,i){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="docker-in-one" tabindex="-1"><a class="header-anchor" href="#docker-in-one"><span>Docker in One</span></a></h1><h2 id="一、docker-出现前的世界" tabindex="-1"><a class="header-anchor" href="#一、docker-出现前的世界"><span>一、Docker 出现前的世界</span></a></h2><p>在软件开发过程中，环境搭建是最繁琐的事情之一。不同用户的环境可能存在差异，导致一个软件在开发者的机器上运行良好，却在他人的设备上无法正常运行。</p><h2 id="二、虚拟机" tabindex="-1"><a class="header-anchor" href="#二、虚拟机"><span>二、虚拟机</span></a></h2><p>使用 Virtualbox 等工具运行 Linux 操作系统有许多缺点。例如</p><ul><li>配置步骤复杂且耗时</li><li>占用宿主机大量内存和硬盘空间</li><li>启动速度慢</li></ul><h2 id="三、linux-容器" tabindex="-1"><a class="header-anchor" href="#三、linux-容器"><span>三、Linux 容器</span></a></h2><p>linux 容器是对进程的封装，在进程外面套上一层“保护层”，具有以下优点：</p><ul><li>进程级别，启动快</li><li>占用资源少</li><li>体积小</li></ul><h2 id="四、docker-是什么" tabindex="-1"><a class="header-anchor" href="#四、docker-是什么"><span>四、Docker 是什么</span></a></h2><p>Docker 是对 Linux 容器的一种封装，提供了一个简单易用的容器管理接口。</p><p>虽然 Docker 的实现较为复杂，但其原理相对简单：通过最小化的 Linux 环境，保证应用的独立运行。</p><h2 id="五、docker-的安装" tabindex="-1"><a class="header-anchor" href="#五、docker-的安装"><span>五、Docker 的安装</span></a></h2><p>Docker 分为社区版和企业版，个人用户安装社区版即可。</p><p><strong>Windows / Mac 用户</strong></p><p><a href="https://www.docker.com/" target="_blank" rel="noopener noreferrer">官网下载 Desktop</a></p><p><strong>Linux 用户(Ubuntu 为例)</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行以下命令卸载旧版 Docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-engine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> containerd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> runc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 更新 apt 包索引</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装 apt 依赖包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    apt-transport-https</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ca-certificates</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    curl</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    gnupg-agent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    software-properties-common</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加 Docker 的官方 GPG 密钥：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fsSL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/apt/keyrings/docker.asc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装 docker 社区版</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-ce</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-ce-cli</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> containerd.io</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加docker用户组</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> usermod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -aG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $USER</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、参考链接" tabindex="-1"><a class="header-anchor" href="#六、参考链接"><span>六、参考链接</span></a></h2><ul><li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener noreferrer">Docker 入门教程（阮一峰）</a></li><li><a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></li></ul><h2 id="一、docker-是什么" tabindex="-1"><a class="header-anchor" href="#一、docker-是什么"><span>一、Docker 是什么</span></a></h2><h3 id="_1-1-简介" tabindex="-1"><a class="header-anchor" href="#_1-1-简介"><span>1.1 简介</span></a></h3><p><code>Docker</code>是一种开源的容器化平台，用于开发、部署和运行应用程序。它通过容器技术将应用程序及其依赖项打包在一起，确保在不同环境中一致运行。</p><p>核心是对<code>Linux</code>容器的一种封装，提供了一个简单易用的容器管理接口。</p><h3 id="_1-2-docker-解决了什么问题" tabindex="-1"><a class="header-anchor" href="#_1-2-docker-解决了什么问题"><span>1.2 Docker 解决了什么问题</span></a></h3><p>Docker 通过容器化技术解决了环境一致性、依赖冲突、部署复杂、资源利用率低等问题，提升了开发、测试和部署的效率，支持微服务架构和 CI/CD 流程，是现代软件开发和运维的重要工具。</p><h2 id="二、安装" tabindex="-1"><a class="header-anchor" href="#二、安装"><span>二、安装</span></a></h2><p><code>Docker</code>分为社区版和企业版，个人用户安装社区版即可。</p><h3 id="_2-1-ubuntu" tabindex="-1"><a class="header-anchor" href="#_2-1-ubuntu"><span>2.1 Ubuntu</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 运行以下命令卸载旧版 Docker</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remove</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-engine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker.io</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> containerd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> runc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 更新 apt 包索引</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装 apt 依赖包</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    apt-transport-https</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    ca-certificates</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    curl</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    gnupg-agent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    software-properties-common</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加 Docker 的官方 GPG 密钥：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -fsSL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/apt/keyrings/docker.asc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装 docker 社区版</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt-get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-ce</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker-ce-cli</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> containerd.io</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 添加docker用户组，避免每次都要输入 sudo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> usermod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -aG</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $USER</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-windows" tabindex="-1"><a class="header-anchor" href="#_2-2-windows"><span>2.2 Windows</span></a></h3><p>在<code>Windows</code>上安装<code>Docker</code>需要<code>Hyper-V</code>或<code>WSL2</code>，有需求安装可自行搜索 🙂</p><h2 id="三、基本概念" tabindex="-1"><a class="header-anchor" href="#三、基本概念"><span>三、基本概念</span></a></h2><h3 id="_3-1-image" tabindex="-1"><a class="header-anchor" href="#_3-1-image"><span>3.1 Image</span></a></h3><p><code>Docker</code>镜像是一个只读的模板，包含了运行应用程序所需的所有内容，例如代码、运行时环境、库、环境变量和配置文件等。镜像是容器的基础，容器是镜像的运行实例。</p><h3 id="_3-2-container" tabindex="-1"><a class="header-anchor" href="#_3-2-container"><span>3.2 Container</span></a></h3><p><code>Docker</code>容器是一个轻量级、可移植的软件单元，用于打包和运行应用程序及其依赖项。它基于镜像创建，提供了隔离的运行环境，确保应用程序在不同环境中一致运行。容器具有高效、隔离、可移植等优点，广泛应用于应用部署、微服务、CI/CD 等场景。</p><h2 id="四、image" tabindex="-1"><a class="header-anchor" href="#四、image"><span>四、Image</span></a></h2><h3 id="_4-1-image-的构建方式" tabindex="-1"><a class="header-anchor" href="#_4-1-image-的构建方式"><span>4.1 image 的构建方式</span></a></h3><p>基本上，获取镜像的方式有以下几种：</p><ol><li>从<code>Docker Hub</code>拉取，<code>Docker Hub</code>是<code>Docker</code>官方的公共镜像仓库，提供了大量官方和社区维护的<code>Docker</code>镜像。缺点国内访问速度慢，甚至无法访问</li><li>自己编写<code>Dockerfile</code>构建镜像</li><li>根据本地运行的容器，构建一个镜像</li></ol><h3 id="_4-2-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_4-2-拉取镜像"><span>4.2 拉取镜像</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从<code>Docker Hub</code>中拉取<code>nginx</code>镜像</p><p><s>不成功😂</s></p><h3 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像"><span>构建镜像</span></a></h3><p>下面单独聊</p><h3 id="_4-3-导出镜像" tabindex="-1"><a class="header-anchor" href="#_4-3-导出镜像"><span>4.3 导出镜像</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> abc123def456</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my_new_image:1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将<code>abc123def456</code>容器打包为一个名为<code>my_new_image</code>且标签为<code>1.0</code>的新镜像</p><h2 id="五、dockerfile-构建镜像" tabindex="-1"><a class="header-anchor" href="#五、dockerfile-构建镜像"><span>五、Dockerfile 构建镜像</span></a></h2><h3 id="_5-1-来个例子" tabindex="-1"><a class="header-anchor" href="#_5-1-来个例子"><span>5.1 来个例子</span></a></h3><p>创建一个 FastAPI 项目</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fastapi </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> FastAPI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">app </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> FastAPI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装<code>fastapi</code>，并写入<code>requirements.txt</code>文件中</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fastapi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> freeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们启动它</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uvicorn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> main:app</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --reload</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>现在，让我们根据以上命令，写一个 Dockerfile 文件</p><div class="language-docker line-numbers-mode" data-highlighter="shiki" data-ext="docker" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-docker"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 Python 3.11 镜像作为基础镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  docker.1ms.run/library/python:3.11-slim</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将当前目录的内容复制到容器中的工作目录</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装项目依赖 (如果有 requirements.txt 文件)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pip install --no-cache-dir -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暴露容器的 8000 端口 (根据需求修改)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 8000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 默认启动命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sh&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;-c&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;python init_db.py &amp;&amp; uvicorn main:app --host 0.0.0.0 --port 8102&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们逐一解释一下这些命令：</p><p><code>FROM</code>：指定基础镜像</p><p><code>WORKDIR</code>：会为后续的命令设置一个默认的工作目录</p><p><code>COPY</code>：可以将主机上的文件或目录复制到容器内的指定路径</p><p><code>RUN</code>：用于在镜像构建过程中执行命令，每个<code>RUN</code>指令都会创建一个新的镜像层。为了减少镜像层数和镜像大小，建议将多个命令合并到一个<code>RUN</code>指令中。</p><p><code>EXPOSE</code>：用于声明容器运行时监听的网络端口，它不会自动将端口映射到宿主机，实际映射需要在运行容器时通过<code>-p</code>或<code>-P</code>参数指定。</p><p><code>CMD</code>：用于指定容器启动时的默认执行命令</p><p>也就是说，上面的的<code>Dockerfile</code>文件的步骤是：</p><ol><li>拉取 python3.11 的镜像</li><li>创建<code>/app</code>作为工作目录</li><li>复制当前文件夹的所有文件到<code>/app</code>中</li><li>运行 pip 下载依赖库</li><li>暴露 8000 端口</li><li>设置容器运行时的命令</li></ol><blockquote><p>注意：这里我们拉取镜像，使用的是第三方镜像地址</p></blockquote><h3 id="_5-2-构建镜像" tabindex="-1"><a class="header-anchor" href="#_5-2-构建镜像"><span>5.2 构建镜像</span></a></h3><p>现在我们已经有了 Dockerfile 了，让我们来依据它来构建一个 Docker Image 吧，构建只需要一行命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-fastapi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，我们就构建成功了一个名字为<code>my-fastapi</code>的镜像</p><h2 id="六、container" tabindex="-1"><a class="header-anchor" href="#六、container"><span>六、Container</span></a></h2><h3 id="_6-1-运行新容器" tabindex="-1"><a class="header-anchor" href="#_6-1-运行新容器"><span>6.1 运行新容器</span></a></h3><p>上面我们已经创建了一个名为<code>my-fastapi</code>的镜像，现在基于它生成新容器</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8000:8000</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-fastapi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>让我们解释一下这些参数</p><p><code>docker run</code>：运行一个新的<code>Docker</code>容器</p><p><code>-d detached mode</code>：以后台运行模式启动容器，使其在后台运行，而不会占用当前终端</p><p><code>-p 8000:8000</code>：端口映射，将宿主机（本机）的<code>8000</code>端口映射到容器的<code>8000</code>端口</p><h3 id="_6-2-查看容器" tabindex="-1"><a class="header-anchor" href="#_6-2-查看容器"><span>6.2 查看容器</span></a></h3><p>让我们查看运行中的容器</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你会看到如下项</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CONTAINER</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ID</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   IMAGE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     COMMAND</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   CREATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   STATUS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    PORTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     NAMES</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>让我们逐一解释：</p><p><strong>CONTAINER ID</strong></p><p>含义: 容器的唯一标识符（ID）</p><p>说明:</p><ul><li>这是一个由 Docker 自动生成的哈希值，用于唯一标识一个容器</li><li>通常只显示前 12 个字符，但可以通过<code>docker inspect</code>查看完整的 ID</li></ul><p>示例:<code>a1b2c3d4e5f6</code></p><hr><p><strong>IMAGE</strong></p><p>含义: 容器所使用的镜像名称</p><p>说明:</p><ul><li>镜像是容器的基础，容器是从镜像创建的实例</li><li>如果镜像有标签（如<code>nginx:latest</code>），标签也会显示在这里</li></ul><p>示例:<code>nginx</code>,<code>ubuntu:20.04</code></p><hr><p><strong>COMMAND</strong></p><p>含义: 容器启动时执行的命令</p><p>说明:</p><ul><li>这是容器启动时运行的默认命令或用户指定的命令</li><li>如果命令较长，可能会被截断显示</li></ul><p>示例:<code>/bin/bash</code>,<code>nginx -g &#39;daemon off;&#39;</code></p><hr><p><strong>CREATED</strong></p><p>含义: 容器的创建时间</p><p>说明:</p><ul><li>显示容器从创建到当前时间的时间差（如<code>2 hours ago</code>）</li><li>可以通过<code>docker inspect</code>查看具体的创建时间</li></ul><p>示例:<code>2 hours ago</code>,<code>5 minutes ago</code></p><hr><p><strong>STATUS</strong></p><p>含义: 容器的当前状态。</p><p>说明:</p><ul><li>常见的状态包括： <ul><li><code>Up</code>：容器正在运行</li><li><code>Exited</code>：容器已停止</li><li><code>Restarting</code>：容器正在重启</li><li><code>Paused</code>：容器已暂停</li></ul></li><li>状态后面通常会附带时间信息（如<code>Up 2 hours</code>或<code>Exited (0) 5 minutes ago</code>）</li></ul><hr><p><strong>PORTS</strong></p><p>含义: 容器的端口映射信息</p><p>说明:</p><ul><li>显示容器内部端口与主机端口的映射关系</li><li>如果没有端口映射，则显示为空</li><li>格式为<code>&lt;主机端口&gt;-&gt;&lt;容器端口&gt;/&lt;协议&gt;</code>（如<code>8080-&gt;80/tcp</code>）</li></ul><p>示例:<code>0.0.0.0:8080-&gt;80/tcp</code>,<code>(无)</code></p><hr><p><strong>NAMES</strong></p><p>含义: 容器的名称。</p><p>说明:</p><ul><li>容器的名称可以由用户通过<code>--name</code>参数指定</li><li>如果没有指定名称，Docker 会随机生成一个名称</li><li>名称是容器的唯一标识符之一，可以在命令中代替容器 ID 使用</li></ul><p>示例:<code>my-nginx</code>,<code>happy_mendeleev</code></p><h2 id="七、常用命令" tabindex="-1"><a class="header-anchor" href="#七、常用命令"><span>七、常用命令</span></a></h2><h3 id="_7-1-image-常用命令" tabindex="-1"><a class="header-anchor" href="#_7-1-image-常用命令"><span>7.1 image 常用命令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 列出本地所有的镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> images</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除本地镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rmi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">image_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 强制删除镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rmi</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">image_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除所有未使用的镜像：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> image</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prune</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 14. 重命名镜像</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-app:1.0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-new-app:1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-container-常用命令" tabindex="-1"><a class="header-anchor" href="#_7-2-container-常用命令"><span>7.2 container 常用命令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指定运行容器名称</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">image_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看正在运行的容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看所有容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ls</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动/停止/重启容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">container_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">container_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">container_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除已停止的容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">container_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 强制删除运行中的容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">container_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除所有已停止的容器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> container</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> prune</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在运行中的容器中执行命令</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> exec</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-nginx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看容器的日志输出</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> logs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">container_id_or_nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-dockerfile-常用指令" tabindex="-1"><a class="header-anchor" href="#_7-3-dockerfile-常用指令"><span>7.3 Dockerfile 常用指令</span></a></h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>FROM</code></td><td>指定基础镜像</td></tr><tr><td><code>RUN</code></td><td>在构建时执行命令</td></tr><tr><td><code>CMD</code></td><td>容器启动时默认执行的命令</td></tr><tr><td><code>ENTRYPOINT</code></td><td>容器启动时执行的主命令</td></tr><tr><td><code>WORKDIR</code></td><td>设置容器内的工作目录</td></tr><tr><td><code>COPY</code></td><td>复制本地文件到镜像</td></tr><tr><td><code>ADD</code></td><td>复制本地文件或远程文件，并自动解压</td></tr><tr><td><code>EXPOSE</code></td><td>声明容器的对外端口</td></tr><tr><td><code>ENV</code></td><td>设置环境变量</td></tr><tr><td><code>ARG</code></td><td>定义构建参数</td></tr><tr><td><code>VOLUME</code></td><td>定义挂载点</td></tr><tr><td><code>LABEL</code></td><td>给镜像添加元数据</td></tr><tr><td><code>USER</code></td><td>指定运行容器的用户</td></tr><tr><td><code>HEALTHCHECK</code></td><td>定义健康检查命令</td></tr></tbody></table><h2 id="八、参考链接" tabindex="-1"><a class="header-anchor" href="#八、参考链接"><span>八、参考链接</span></a></h2><ul><li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener noreferrer">Docker 入门教程</a></li><li><a href="https://www.coderjia.cn/archives/dba3f94c-a021-468a-8ac6-e840f85867ea" target="_blank" rel="noopener noreferrer">目前国内可用 Docker 镜像源汇总</a></li></ul>`,137)])])}const k=s(l,[["render",t]]),r=JSON.parse('{"path":"/tld/prod/docker.html","title":"Docker in One","lang":"zh-CN","frontmatter":{"description":"Docker in One 一、Docker 出现前的世界 在软件开发过程中，环境搭建是最繁琐的事情之一。不同用户的环境可能存在差异，导致一个软件在开发者的机器上运行良好，却在他人的设备上无法正常运行。 二、虚拟机 使用 Virtualbox 等工具运行 Linux 操作系统有许多缺点。例如 配置步骤复杂且耗时 占用宿主机大量内存和硬盘空间 启动速度慢...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker in One\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-11T14:10:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SecCMD\\",\\"url\\":\\"https://www.seccmd.net\\"}]}"],["meta",{"property":"og:url","content":"https://www.seccmd.net/tld/prod/docker.html"}],["meta",{"property":"og:site_name","content":"明剑实验室"}],["meta",{"property":"og:title","content":"Docker in One"}],["meta",{"property":"og:description","content":"Docker in One 一、Docker 出现前的世界 在软件开发过程中，环境搭建是最繁琐的事情之一。不同用户的环境可能存在差异，导致一个软件在开发者的机器上运行良好，却在他人的设备上无法正常运行。 二、虚拟机 使用 Virtualbox 等工具运行 Linux 操作系统有许多缺点。例如 配置步骤复杂且耗时 占用宿主机大量内存和硬盘空间 启动速度慢..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-11T14:10:43.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-11T14:10:43.000Z"}]]},"git":{"createdTime":1757419694000,"updatedTime":1757599843000,"contributors":[{"name":"fireadm","username":"fireadm","email":"iwanwu@hotmail.com","commits":2,"url":"https://github.com/fireadm"}]},"readingTime":{"minutes":8.66,"words":2598},"filePathRelative":"tld/prod/docker.md","autoDesc":true}');export{k as comp,r as data};
