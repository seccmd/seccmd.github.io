import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,f as a,o as r}from"./app-DXpCwEIF.js";const t={};function n(l,s){return r(),i("div",null,[...s[0]||(s[0]=[a('<h3 id="工具介绍-grs-反向-socks5-代理" tabindex="-1"><a class="header-anchor" href="#工具介绍-grs-反向-socks5-代理"><span>工具介绍：grs 反向 SOCKS5 代理</span></a></h3><h4 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h4><p>grs 是一个基于 REALITY 协议的反向 SOCKS5 代理工具，主要用于内网穿透。与 frp、nps 等工具相比，grs 具有以下优势：</p><ul><li><strong>隐藏网络特征</strong>：防止服务端被主动探测，提升安全性。</li><li><strong>简化配置</strong>：客户端和用户端内嵌配置，无需命令行或额外配置文件，使用更便捷。</li></ul><h4 id="工具组成" tabindex="-1"><a class="header-anchor" href="#工具组成"><span>工具组成</span></a></h4><p>grs 包含三个主要程序：</p><ol><li><strong>grss（服务端）</strong>：运行在具有公网 IP 的服务器上，负责接收和处理客户端请求。</li><li><strong>grsc（客户端）</strong>：运行在内网机器上，用于穿透内网。</li><li><strong>grsu（用户端）</strong>：运行在用户机器上，提供 SOCKS5 代理服务。</li></ol><h4 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤"><span>使用步骤</span></a></h4><h5 id="_1-生成配置" tabindex="-1"><a class="header-anchor" href="#_1-生成配置"><span>1. 生成配置</span></a></h5><p>首次使用时，需要生成服务端、客户端和用户端的配置。使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grss</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.qq.com:443</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 127.0.0.1:443</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>www.qq.com:443</code>：模拟的目标地址。</li><li><code>127.0.0.1:443</code>：服务端监听地址，需填写公网 IP，端口建议与模拟目标一致。</li></ul><p>默认会生成 3 个不同 ID 的客户端配置文件，可通过 <code>-c</code> 参数指定生成数量。</p><h5 id="_2-启动服务端" tabindex="-1"><a class="header-anchor" href="#_2-启动服务端"><span>2. 启动服务端</span></a></h5><p>生成配置后，启动服务端：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grss</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> serv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>服务端会加载默认的 <code>config.json</code> 配置文件。</p><h5 id="_3-启动客户端" tabindex="-1"><a class="header-anchor" href="#_3-启动客户端"><span>3. 启动客户端</span></a></h5><p>启动客户端时，指定对应的 ID：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grsc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> X</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>X</code> 表示客户端的 ID，对应生成的配置文件。</p><h5 id="_4-启动用户端" tabindex="-1"><a class="header-anchor" href="#_4-启动用户端"><span>4. 启动用户端</span></a></h5><p>启动用户端时，指定与客户端对应的 ID：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grsu</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>-id 0</code>：表示连接 ID 为 0 的客户端。</li><li>默认监听地址为 <code>127.0.0.1:61080</code>，可通过 <code>-l</code> 参数修改。</li></ul><h4 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明"><span>参数说明</span></a></h4><ul><li><p><strong>生成配置</strong>：</p><ul><li><code>-f</code>：指定客户端指纹（如 Chrome、Firefox 等，默认 Chrome）。</li><li><code>-e</code>：设置过期时间（默认 30 秒）。</li><li><code>-o</code>：指定服务端配置文件输出路径（默认 <code>config.json</code>）。</li><li><code>-c</code>：指定生成的客户端数量（默认 3 个）。</li><li><code>--dir</code>：指定客户端配置文件输出目录（默认当前目录）。</li></ul></li><li><p><strong>用户端</strong>：</p><ul><li><code>-i</code>：指定客户端 ID。</li><li><code>-l</code>：指定 SOCKS5 监听地址（默认 <code>127.0.0.1:61080</code>）。</li></ul></li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p>grs 通过 REALITY 协议实现反向 SOCKS5 代理，简化了内网穿透的配置过程，同时增强了安全性。只需生成配置并分别启动服务端、客户端和用户端，即可快速搭建代理服务。</p><hr><p><strong>REALITY 协议</strong> 是一种基于 TLS（Transport Layer Security）的加密通信协议，旨在隐藏代理流量的特征，使其看起来像正常的 HTTPS 流量，从而避免被主动探测或封锁。它是 Shadowsocks 和 V2Ray 等工具的升级版本，专注于提高隐蔽性和抗审查能力。</p><p>以下是 REALITY 协议的核心特点和原理：</p><h3 id="_1-核心特点" tabindex="-1"><a class="header-anchor" href="#_1-核心特点"><span>1. <strong>核心特点</strong></span></a></h3><ul><li><strong>流量伪装</strong>：REALITY 协议将代理流量伪装成正常的 HTTPS 流量，使其难以被识别为代理流量。</li><li><strong>无证书验证</strong>：与传统 TLS 不同，REALITY 不需要客户端验证服务端证书，而是直接使用目标网站的证书进行通信。</li><li><strong>抗主动探测</strong>：通过模拟真实网站的流量特征，REALITY 可以有效防止服务端被主动探测。</li><li><strong>高性能</strong>：由于减少了证书验证等步骤，REALITY 的性能开销较低，适合高并发场景。</li></ul><hr><h3 id="_2-工作原理" tabindex="-1"><a class="header-anchor" href="#_2-工作原理"><span>2. <strong>工作原理</strong></span></a></h3><p>REALITY 协议的核心思想是利用目标网站的 TLS 证书进行通信，具体步骤如下：</p><ol><li><strong>客户端发起连接</strong>： <ul><li>客户端向服务端发起 TLS 连接请求。</li><li>服务端不提供自己的证书，而是直接使用目标网站（如 <code>www.qq.com</code>）的证书进行通信。</li></ul></li><li><strong>流量伪装</strong>： <ul><li>客户端和服务端之间的流量被伪装成与目标网站的 HTTPS 流量，看起来像是正常的网页访问。</li></ul></li><li><strong>数据转发</strong>： <ul><li>服务端将客户端请求转发到目标网站，并将响应返回给客户端。</li><li>由于流量特征与目标网站一致，中间设备难以区分这是代理流量还是正常流量。</li></ul></li></ol><hr><h3 id="_3-与-tls-的区别" tabindex="-1"><a class="header-anchor" href="#_3-与-tls-的区别"><span>3. <strong>与 TLS 的区别</strong></span></a></h3><ul><li><strong>传统 TLS</strong>： <ul><li>服务端需要提供自己的证书，客户端验证证书合法性。</li><li>流量特征可能被识别为代理流量。</li></ul></li><li><strong>REALITY</strong>： <ul><li>服务端直接使用目标网站的证书，客户端不验证证书。</li><li>流量特征与目标网站一致，隐蔽性更强。</li></ul></li></ul><hr><h3 id="_4-适用场景" tabindex="-1"><a class="header-anchor" href="#_4-适用场景"><span>4. <strong>适用场景</strong></span></a></h3><ul><li><strong>内网穿透</strong>：如 grs 工具中，REALITY 协议用于隐藏代理流量，避免服务端被探测。</li><li><strong>科学上网</strong>：用于绕过网络审查，访问被封锁的网站。</li><li><strong>隐私保护</strong>：隐藏用户的真实流量特征，防止被监控或分析。</li></ul><hr><h3 id="_5-reality-协议的优点" tabindex="-1"><a class="header-anchor" href="#_5-reality-协议的优点"><span>5. <strong>REALITY 协议的优点</strong></span></a></h3><ul><li><strong>隐蔽性强</strong>：流量特征与目标网站一致，难以被识别。</li><li><strong>配置简单</strong>：无需复杂的证书管理。</li><li><strong>抗审查</strong>：有效防止主动探测和封锁。</li></ul><hr><h3 id="_6-reality-协议的局限性" tabindex="-1"><a class="header-anchor" href="#_6-reality-协议的局限性"><span>6. <strong>REALITY 协议的局限性</strong></span></a></h3><ul><li><strong>依赖目标网站</strong>：需要选择一个高可信度的目标网站（如 <code>www.qq.com</code>）进行伪装。</li><li><strong>目标网站变化</strong>：如果目标网站的证书或流量特征发生变化，可能需要调整配置。</li></ul><hr><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h3><p>REALITY 协议是一种创新的流量伪装技术，通过模拟目标网站的 HTTPS 流量，实现高隐蔽性和抗审查能力。它在内网穿透、隐私保护和科学上网等场景中具有广泛的应用前景。</p>',53)])])}const d=e(t,[["render",n]]),c=JSON.parse('{"path":"/sec/rednote/kali/grs_socks5.html","title":"grs 反向 SOCKS5 代理工具使用指南 | 基于 REALITY 协议的内网穿透","lang":"zh-CN","frontmatter":{"date":"2025-01-29T00:00:00.000Z","title":"grs 反向 SOCKS5 代理工具使用指南 | 基于 REALITY 协议的内网穿透","author":["SecCMD"],"description":"本指南详细介绍 grs 反向 SOCKS5 代理工具的使用方法，基于 REALITY 协议实现内网穿透。涵盖服务端、客户端和用户端的配置与启动步骤，提供生成配置的命令详解。通过 REALITY 协议隐藏流量特征，防止服务端被主动探测，提升安全性。适用于内网穿透、隐私保护和科学上网等场景，为开发者提供高效、安全的代理解决方案。\\n","categories":"网络工具","tags":["内网穿透","代理工具","网络安全"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"grs 反向 SOCKS5 代理工具使用指南 | 基于 REALITY 协议的内网穿透\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-09T09:34:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SecCMD\\"}]}"],["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/sec/rednote/kali/grs_socks5.html"}],["meta",{"property":"og:site_name","content":"明剑安全"}],["meta",{"property":"og:title","content":"grs 反向 SOCKS5 代理工具使用指南 | 基于 REALITY 协议的内网穿透"}],["meta",{"property":"og:description","content":"本指南详细介绍 grs 反向 SOCKS5 代理工具的使用方法，基于 REALITY 协议实现内网穿透。涵盖服务端、客户端和用户端的配置与启动步骤，提供生成配置的命令详解。通过 REALITY 协议隐藏流量特征，防止服务端被主动探测，提升安全性。适用于内网穿透、隐私保护和科学上网等场景，为开发者提供高效、安全的代理解决方案。\\n"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-09T09:34:45.000Z"}],["meta",{"property":"article:author","content":"SecCMD"}],["meta",{"property":"article:tag","content":"网络安全"}],["meta",{"property":"article:tag","content":"代理工具"}],["meta",{"property":"article:tag","content":"内网穿透"}],["meta",{"property":"article:published_time","content":"2025-01-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-09T09:34:45.000Z"}]]},"git":{"createdTime":1738117380000,"updatedTime":1757410485000,"contributors":[{"name":"seccmd","username":"seccmd","email":"79789833+seccmd@users.noreply.github.com","commits":1,"url":"https://github.com/seccmd"},{"name":"fireadm","username":"fireadm","email":"iwanwu@hotmail.com","commits":1,"url":"https://github.com/fireadm"}]},"readingTime":{"minutes":5.16,"words":1549},"filePathRelative":"sec/rednote/kali/grs_socks5.md"}');export{d as comp,c as data};
