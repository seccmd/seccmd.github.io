import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,f as o,o as n}from"./app-D1IULfj1.js";const s={};function a(l,e){return n(),r("div",null,[...e[0]||(e[0]=[o('<h1 id="billddesk" tabindex="-1"><a class="header-anchor" href="#billddesk"><span>BilldDesk</span></a></h1><p><a href="https://desk.hsslive.cn/" target="_blank" rel="noopener noreferrer">https://desk.hsslive.cn/</a></p><h2 id="简单体验" tabindex="-1"><a class="header-anchor" href="#简单体验"><span>简单体验</span></a></h2><p>两端 都是浏览器，输入对方设备码（允许后），就能开启共享屏幕或者摄像头。</p><p>基于浏览器内置的功能，只能查看屏幕。 安装客户端能够远程控制。</p><p>使用直播技术，解决远程桌面问题，工具还不成熟，挺神奇的思路！</p><hr><h2 id="技术原理" tabindex="-1"><a class="header-anchor" href="#技术原理"><span>技术原理</span></a></h2><h3 id="webrtc-的作用是什么" tabindex="-1"><a class="header-anchor" href="#webrtc-的作用是什么"><span>WebRTC 的作用是什么？</span></a></h3><p>WebRTC 专注于<strong>实时媒体传输</strong>。它可以：</p><ul><li><strong>获取媒体流</strong>：使用 <code>navigator.mediaDevices</code> API 获取摄像头、麦克风和屏幕的音视频流。</li><li><strong>建立点对点连接</strong>：通过 ICE、STUN 和 TURN 服务器，让两个浏览器或应用程序直接建立通信连接。</li><li><strong>传输数据</strong>：除了音视频流，WebRTC 的 <strong>Data Channel</strong>（数据通道）功能可以用于传输任意数据，比如文本消息、文件，或者——在本例中——<strong>控制指令</strong>。</li></ul><p>WebRTC 的设计理念是作为浏览器的安全沙盒中的一个工具，它不会被赋予直接与操作系统进行交互的权限，例如移动鼠标或模拟按键。这样做是为了保护用户的安全和隐私。</p><hr><h3 id="如何实现远程控制" tabindex="-1"><a class="header-anchor" href="#如何实现远程控制"><span>如何实现远程控制？</span></a></h3><p>虽然 WebRTC 不能直接控制，但它可以作为实现远程控制的<strong>关键传输管道</strong>。要实现完整的远程控制功能，您需要将 WebRTC 与一个<strong>额外的、具有系统权限的应用程序</strong>结合使用。</p><p>这个过程可以分为以下几个步骤：</p><ol><li><p><strong>屏幕共享</strong>：在被控端，使用 WebRTC 的 <code>getDisplayMedia()</code> 方法获取屏幕的视频流，并将其发送给主控端。这让主控端能看到被控端的屏幕。</p></li><li><p><strong>事件监听</strong>：在主控端，您需要编写 JavaScript 代码来监听鼠标和键盘事件。当用户点击或按下某个键时，您会捕获这些事件的数据（例如，鼠标点击的坐标 <code>x, y</code>，或按下的键码）。</p></li><li><p><strong>数据传输</strong>：通过 WebRTC 的 <strong>Data Channel</strong>，将这些事件数据作为<strong>控制指令</strong>发送给被控端。</p></li><li><p><strong>指令执行</strong>：这是最关键的一步。在被控端，除了浏览器之外，您还需要一个<strong>独立运行的应用程序或服务</strong>。这个应用程序通过某种方式（例如，一个本地的 WebSocket 服务器或直接的 WebRTC Data Channel 接口）接收来自浏览器的数据通道指令。由于这个应用程序拥有操作系统的权限，它可以将收到的指令<strong>转换为实际的系统级操作</strong>，比如调用操作系统的 API 来移动鼠标指针或模拟按键事件。</p></li></ol><p>可以将这个过程比作一个遥控机器人：</p><ul><li><strong>WebRTC 的屏幕共享</strong>就像机器人身上的摄像头，将画面传回给您。</li><li><strong>WebRTC 的数据通道</strong>就像一个无线电信号，可以从您这里发送指令（“向前走”、“向右转”）给机器人。</li><li><strong>那个独立的应用程序</strong>才是机器人本身，它接收到指令后，有能力驱动马达（操作系统 API）去执行相应的动作。</li></ul><p>离开了这个拥有系统权限的独立应用程序，浏览器中的 WebRTC 就像一个只提供视频和聊天功能的监视器，无法对被控端进行任何操作。</p><hr><h2 id="chrome有远程控制的插件" tabindex="-1"><a class="header-anchor" href="#chrome有远程控制的插件"><span>Chrome有远程控制的插件</span></a></h2><p><a href="https://remotedesktop.google.com/" target="_blank" rel="noopener noreferrer">https://remotedesktop.google.com/</a></p><p>现代浏览器功能非常强大 几乎就是一个单独的OS</p>',24)])])}const d=t(s,[["render",a]]),c=JSON.parse('{"path":"/tld/net/billddesk.html","title":"BilldDesk","lang":"zh-CN","frontmatter":{"description":"BilldDesk https://desk.hsslive.cn/ 简单体验 两端 都是浏览器，输入对方设备码（允许后），就能开启共享屏幕或者摄像头。 基于浏览器内置的功能，只能查看屏幕。 安装客户端能够远程控制。 使用直播技术，解决远程桌面问题，工具还不成熟，挺神奇的思路！ 技术原理 WebRTC 的作用是什么？ WebRTC 专注于实时媒体传输。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BilldDesk\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-10T14:45:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SecCMD\\",\\"url\\":\\"https://www.seccmd.net\\"}]}"],["meta",{"property":"og:url","content":"https://www.seccmd.net/tld/net/billddesk.html"}],["meta",{"property":"og:site_name","content":"明剑实验室"}],["meta",{"property":"og:title","content":"BilldDesk"}],["meta",{"property":"og:description","content":"BilldDesk https://desk.hsslive.cn/ 简单体验 两端 都是浏览器，输入对方设备码（允许后），就能开启共享屏幕或者摄像头。 基于浏览器内置的功能，只能查看屏幕。 安装客户端能够远程控制。 使用直播技术，解决远程桌面问题，工具还不成熟，挺神奇的思路！ 技术原理 WebRTC 的作用是什么？ WebRTC 专注于实时媒体传输。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-10T14:45:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-10T14:45:07.000Z"}]]},"git":{"createdTime":1757515507000,"updatedTime":1757515507000,"contributors":[{"name":"fireadm","username":"fireadm","email":"iwanwu@hotmail.com","commits":1,"url":"https://github.com/fireadm"}]},"readingTime":{"minutes":2.92,"words":877},"filePathRelative":"tld/net/billddesk.md","autoDesc":true}');export{d as comp,c as data};
