import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as e,o as i}from"./app-xvMLnBYk.js";const l={};function p(t,n){return i(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="iam-proxy技术方案" tabindex="-1"><a class="header-anchor" href="#iam-proxy技术方案"><span>IAM+Proxy技术方案</span></a></h1><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Client   --&gt;  Oauth GW Nginx  --&gt;  Service1, Service2, Service3 </span></span>
<span class="line"><span>                     |                |         |         |</span></span>
<span class="line"><span>                     |----------------+---------+---------+</span></span>
<span class="line"><span>                     |</span></span>
<span class="line"><span>                   IAM</span></span>
<span class="line"><span>Front   Cas Oauth OIDC  SAML   Basic   </span></span>
<span class="line"><span>Back    AD LDAP Kerberos</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>零信任小demo昨晚跑起来了</strong></p><p>1.访问内网应用WikiJS，首先要通过边界Nginx的代理的访问控制；</p><p>2.边界Nginx，需要OAuth登录，才能访问后端服务；</p><p>3.边界Nginx，通过IAM身份认证 控制身份准入，隔离了内网服务不直接暴露在外网。</p><p><strong>组件:</strong></p><ul><li><p>IAM: Keylocak</p></li><li><p>GW : Nginx + OAuth_proxy</p></li><li><p>App: WikiJS</p></li></ul><p><strong>测试操作：</strong></p><p>1.绑定域名 /etc/hosts</p><p>- &lt;vps_ip&gt; <a href="http://wiki.lab.com" target="_blank" rel="noopener noreferrer">wiki.lab.com</a></p><p>2.访问应用 <a href="https://wiki.lab.com/" target="_blank" rel="noopener noreferrer">https://wiki.lab.com/</a></p><p>- <a href="mailto:usertest@lab.com" target="_blank" rel="noopener noreferrer">usertest@lab.com</a> pwd123456</p><p>第一层登录 Nginx 身份认证</p><p>第二层登录 WikiJS 身份认证</p><h1 id="搭建测试环境步骤" tabindex="-1"><a class="header-anchor" href="#搭建测试环境步骤"><span>搭建测试环境步骤</span></a></h1><p><strong>IAM</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>### IAM</span></span>
<span class="line"><span>iam.lab.com</span></span>
<span class="line"><span>访问管理后台,管理员IAM</span></span>
<span class="line"><span>https://&lt;vps_ip&gt;/admin/master/console/</span></span>
<span class="line"><span>admin pwd123456</span></span>
<span class="line"><span>usertest pwd123456</span></span>
<span class="line"><span>Keycloak OIDC Auth Provider</span></span>
<span class="line"><span>1.Create new client in your Keycloak realm with Access Type &#39;confidental&#39;, Client protocol &#39;openid-connect&#39; and Valid Redirect URIs &#39;https://internal.yourcompany.com/oauth2/callback&#39;</span></span>
<span class="line"><span>2.Take note of the Secret in the credential tab of the client</span></span>
<span class="line"><span>3.Create a mapper with Mapper Type &#39;Group Membership&#39; and Token Claim Name &#39;groups&#39;.</span></span>
<span class="line"><span>4.Create a mapper with Mapper Type &#39;Audience&#39; and Included Client Audience and Included Custom Audience set to your client name.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Oauth proxy</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>### Oauth proxy</span></span>
<span class="line"><span>下载 https://github.com/oauth2-proxy/oauth2-proxy/releases</span></span>
<span class="line"><span>Make sure you set the following to the appropriate url:</span></span>
<span class="line"><span>./oauth2-proxy \\</span></span>
<span class="line"><span>   --provider=keycloak-oidc \\</span></span>
<span class="line"><span>   --client-id=oauth_proxy \\</span></span>
<span class="line"><span>   --client-secret=g5IfwF4pICSVDyKvkTA4Y8j1iKXcs5VU \\</span></span>
<span class="line"><span>   --redirect-url=https://wiki.lab.com/oauth2/callback \\</span></span>
<span class="line"><span>   --oidc-issuer-url=https://&lt;vps_ip&gt;/realms/master \\</span></span>
<span class="line"><span>   --email-domain=* \\</span></span>
<span class="line"><span>   --upstream=http://127.0.0.1:3000/ \\</span></span>
<span class="line"><span>   --reverse-proxy=true \\</span></span>
<span class="line"><span>   --cookie-secure=true \\</span></span>
<span class="line"><span>   --cookie-secret=mima2233mima2233 \\</span></span>
<span class="line"><span>   --insecure-oidc-allow-unverified-email  </span></span>
<span class="line"><span>    --allowed-role=&lt;realm role name&gt; // Optional, required realm role</span></span>
<span class="line"><span>    --allowed-role=&lt;client id&gt;:&lt;client role name&gt; // Optional, required client role</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>NGINX</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>### Nginx</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen 443 default ssl;</span></span>
<span class="line"><span>    server_name wiki.lab.com;</span></span>
<span class="line"><span>    ssl_certificate /path/to/cert.pem;</span></span>
<span class="line"><span>    ssl_certificate_key /path/to/cert.key;</span></span>
<span class="line"><span>    add_header Strict-Transport-Security max-age=2592000;</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        proxy_buffer_size 8k;</span></span>
<span class="line"><span>        proxy_pass http://127.0.0.1:4180;</span></span>
<span class="line"><span>        proxy_set_header Host $host;</span></span>
<span class="line"><span>        proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>        proxy_set_header X-Scheme $scheme;</span></span>
<span class="line"><span>        proxy_connect_timeout 1;</span></span>
<span class="line"><span>        proxy_send_timeout 30;</span></span>
<span class="line"><span>        proxy_read_timeout 30;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### WijiJS</span></span>
<span class="line"><span>wiki.lab.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ERROR</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>x509: certificate relies on legacy Common Name field</span></span>
<span class="line"><span>x509: cannot validate certificate for &lt;vps_ip&gt; because it doesn&#39;t contain any IP SANs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>openssl req -x509 -out lab.crt -keyout lab.key -days 1825 \\</span></span>
<span class="line"><span>  -newkey rsa:2048 -nodes -sha256 \\</span></span>
<span class="line"><span>  -subj &#39;/CN=lab.com&#39; -extensions EXT -config &lt;( \\</span></span>
<span class="line"><span>   printf &quot;[dn]\\nCN=lab.com\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:lab.com\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>openssl req -x509 -out lab.crt -keyout lab.key -days 1825 \\</span></span>
<span class="line"><span>  -newkey rsa:2048 -nodes -sha256 \\</span></span>
<span class="line"><span>  -subj &#39;/CN=lab.com&#39; -extensions EXT -config &lt;( \\</span></span>
<span class="line"><span>   printf &quot;[dn]\\nCN=lab.com\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=IP:&lt;vps_ip&gt;\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>x509: certificate signed by unknown authority</span></span>
<span class="line"><span>将生成的私有证书追加到系统的证书管理文件中，否则后面push和login和pull时会报如下错误：</span></span>
<span class="line"><span>cp /etc/nginx/lab.crt /usr/local/share/ca-certificates</span></span>
<span class="line"><span>Ubuntu下添加系统根证书, 只要将证书(扩展名为crt)复制到**/usr/local/share/ca-certificates**文件夹然后运行即可</span></span>
<span class="line"><span></span></span>
<span class="line"><span>添加证书：</span></span>
<span class="line"><span>$sudo update-ca-certificates</span></span>
<span class="line"><span></span></span>
<span class="line"><span>删除证书：</span></span>
<span class="line"><span>$sudo rm -f /usr/local/share/ca-certificates/xinmu.crt  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>### 问题，认证成功 报错502，nginx proxy_buffer_size 解决后端服务传输数据过多</span></span>
<span class="line"><span>502 Bad Gateway after successful login</span></span>
<span class="line"><span>https://github.com/oauth2-proxy/oauth2-proxy/issues/646</span></span>
<span class="line"><span>https://blog.csdn.net/Dream_Flying_BJ/article/details/62892870</span></span>
<span class="line"><span>I changed proxy_buffer_size to 8k(origin 4k) , and 502 is gone.</span></span>
<span class="line"><span>proxy_buffer_size</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="零信任技术选型" tabindex="-1"><a class="header-anchor" href="#零信任技术选型"><span><strong>零信任技术选型</strong></span></a></h2><p><strong>零信任技术选型：访问代理网关（APISIX）、身份认证（Keycloack）、风控引擎（Drools）。</strong></p><p>零信任安全产品设计实现</p><p>​ 产品全流程</p><p>​ 基础方法论（BRD、PRD、产品原型</p><p>​ 产品 Demo 产品 Team</p><p>​ IAM、Gateway、Risk、Client、Web UI</p><p>​ 实时风控引擎(Radar) (<a href="http://riskengine.cn" target="_blank" rel="noopener noreferrer">riskengine.cn</a>)</p><p><strong>[<strong><strong><a href="https://github.com/authelia/authelia" target="_blank" rel="noopener noreferrer">GitHub - authelia/authelia: The Single Sign-On Multi-Factor portal for web apps</a></strong></strong>](<strong><a href="https://github.com/authelia/authelia" target="_blank" rel="noopener noreferrer">https://github.com/authelia/authelia</a></strong>)</strong></p><h3 id="oauth2-proxy" tabindex="-1"><a class="header-anchor" href="#oauth2-proxy"><span><strong>oauth2-proxy</strong></span></a></h3><p>零信任小demo昨晚跑起来了</p><p>1.访问内网应用WikiJS，首先要通过边界Nginx的代理的访问控制；</p><p>2.边界Nginx，需要OAuth登录，才能访问后端服务；</p><p>3.边界Nginx，通过IAM身份认证 控制身份准入，隔离了内网服务不直接暴露在外网。</p><p>组件:</p><p>IAM: Keylocak</p><p>GW : Nginx + OAuth_proxy</p><p>App: WikiJS</p><p>测试操作：</p><p>1.绑定域名 /etc/hosts</p><p>- &lt;vps_ip&gt; <a href="http://wiki.lab.com" target="_blank" rel="noopener noreferrer">wiki.lab.com</a></p><p>2.访问应用 <a href="https://wiki.lab.com/" target="_blank" rel="noopener noreferrer">https://wiki.lab.com/</a></p><p>- <a href="mailto:usertest@lab.com" target="_blank" rel="noopener noreferrer">usertest@lab.com</a> pwd123456</p><p>第一层登录 Nginx 身份认证</p><p>第二层登录 WikiJS 身份认证</p><h3 id="risk" tabindex="-1"><a class="header-anchor" href="#risk"><span>Risk</span></a></h3><p><a href="https://zhuanlan.zhihu.com/p/107975044" target="_blank" rel="noopener noreferrer">风控系统资料合集-蚂蚁，京东，美团，开源系统</a></p><p><a href="https://www.riskengine.cn/" target="_blank" rel="noopener noreferrer">实时风控引擎(Radar)</a></p><p>GW</p><p><a href="https://apisix.apache.org/zh/blog/2021/09/07/how-to-use-apisix-auth/" target="_blank" rel="noopener noreferrer">如何使用 APISIX 进行集中式身份认证 | Apache APISIX® -- Cloud-Native API Gateway</a></p><h3 id="技术问题-https" tabindex="-1"><a class="header-anchor" href="#技术问题-https"><span><strong>技术问题-https</strong></span></a></h3><p><a href="https://help.aliyun.com/document_detail/160093.html" target="_blank" rel="noopener noreferrer">https://help.aliyun.com/document_detail/160093.html</a></p><p>HTTPS双向认证（Mutual TLS authentication) (<a href="http://aliyun.com" target="_blank" rel="noopener noreferrer">aliyun.com</a>)</p><p><a href="https://github.com/smallstep/cli#installation-guide" target="_blank" rel="noopener noreferrer">https://github.com/smallstep/cli#installation-guide</a></p><p>GitHub - smallstep/cli: 🧰 A zero trust swiss army knife for working with X509, OAuth, JWT, OATH OTP, etc.</p><p>PKI</p><p><a href="https://smallstep.com/hello-mtls/doc/client/nodejs" target="_blank" rel="noopener noreferrer">https://smallstep.com/hello-mtls/doc/client/nodejs</a></p><p>Using Mutual TLS on the Client Side with Node.js — Smallstep</p><p><a href="https://smallstep.com/docs/step-ca" target="_blank" rel="noopener noreferrer">https://smallstep.com/docs/step-ca</a></p><p>step-ca open source server (<a href="http://smallstep.com" target="_blank" rel="noopener noreferrer">smallstep.com</a>)</p><p><a href="https://github.com/julie-ng/nodejs-certificate-auth" target="_blank" rel="noopener noreferrer">https://github.com/julie-ng/nodejs-certificate-auth</a></p><p>GitHub - julie-ng/nodejs-certificate-auth: Demo for Client Certificate Authentication with Node.js Tutorial</p>`,66)])])}const o=s(l,[["render",p]]),d=JSON.parse('{"path":"/tld/sec/SSOGW.html","title":"IAM+Proxy技术方案","lang":"zh-CN","frontmatter":{"description":"IAM+Proxy技术方案 零信任小demo昨晚跑起来了 1.访问内网应用WikiJS，首先要通过边界Nginx的代理的访问控制； 2.边界Nginx，需要OAuth登录，才能访问后端服务； 3.边界Nginx，通过IAM身份认证 控制身份准入，隔离了内网服务不直接暴露在外网。 组件: IAM: Keylocak GW : Nginx + OAuth_...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IAM+Proxy技术方案\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-09T12:08:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"SecCMD\\",\\"url\\":\\"https://www.seccmd.net\\"}]}"],["meta",{"property":"og:url","content":"https://www.seccmd.net/tld/sec/SSOGW.html"}],["meta",{"property":"og:site_name","content":"明剑实验室"}],["meta",{"property":"og:title","content":"IAM+Proxy技术方案"}],["meta",{"property":"og:description","content":"IAM+Proxy技术方案 零信任小demo昨晚跑起来了 1.访问内网应用WikiJS，首先要通过边界Nginx的代理的访问控制； 2.边界Nginx，需要OAuth登录，才能访问后端服务； 3.边界Nginx，通过IAM身份认证 控制身份准入，隔离了内网服务不直接暴露在外网。 组件: IAM: Keylocak GW : Nginx + OAuth_..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-09T12:08:14.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-09T12:08:14.000Z"}]]},"git":{"createdTime":1757419694000,"updatedTime":1757419694000,"contributors":[{"name":"fireadm","username":"fireadm","email":"iwanwu@hotmail.com","commits":1,"url":"https://github.com/fireadm"}]},"readingTime":{"minutes":3.32,"words":996},"filePathRelative":"tld/sec/SSOGW.md","autoDesc":true}');export{o as comp,d as data};
